{"version":3,"file":"98fcb977cfffa1899c899ef9b9596c45bce34855-b8cb781245a25c600e94.js","mappings":"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","sources":["webpack://side-trail-software-development/./src/sections/AboutMeSection.tsx","webpack://side-trail-software-development/./src/data/Values.ts","webpack://side-trail-software-development/./src/sections/AgileSection.tsx","webpack://side-trail-software-development/./src/data/Principles.ts","webpack://side-trail-software-development/./src/sections/ContactSection.tsx","webpack://side-trail-software-development/./src/sections/ExpertiseSection.tsx","webpack://side-trail-software-development/./src/data/Expertise.ts","webpack://side-trail-software-development/./src/sections/ProcessSection.tsx","webpack://side-trail-software-development/./src/sections/TestimonialSection.tsx","webpack://side-trail-software-development/./src/data/Testimonials.ts","webpack://side-trail-software-development/./src/sections/WhySideTrailsSection.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { IconType } from \"react-icons\"\nimport { StaticImage } from \"gatsby-plugin-image\"\nimport { Accordion, Card, Content, MDXRenderer, Section, SquareGlyph } from \"../components\"\nimport { useValues } from \"../data/Values\"\n\nconst Summary = ({ value, iconType }: { value: string, iconType: IconType }) => {\n  return (\n    <div className=\"flex flex-row gap-4 items-center min-h-[72px]\">\n      <SquareGlyph iconType={iconType}/>\n      <div className=\"flex flex-col flex-1 justify-center md:text-lg xl:text-xl 3xl:text-2xl text-center md:text-left\">\n        {value}\n      </div>\n    </div>\n  )\n}\n\nconst AboutMeSection = () => {\n  const values = useValues()\n\n  return (\n    <Section.Item heading={{\n        title: \"A Little About Me\",\n        subtitle: [\"\\\"The unexamined life is not worth living.\\\"\", \"Socrates\"]\n      }}\n    >\n      <div className=\"flex flex-col gap-8\">\n        <Content className=\"prose-h3:mt-0\">\n          <div className=\"text-center mb-4 lg:float-left lg:mr-8\">\n            <StaticImage src=\"../images/headshot.jpeg\" alt=\"Picture of Spencer Haan with a beautiful beard.\" className=\"w-60 h-60 md:w-80 md:h-80 xl:w-96 xl:h-96 rounded-xl\"/>\n          </div>\n          <h3>\n            Hey, my name is Spencer Haan and I'm Side Trails Software Development!\n          </h3>\n          <p>\n            I’m an avid gamer, and have been for most of my life. As a kid my mind was constantly inundated with ideas on how to improve the games I was playing, or how I’d build a game with more interesting mechanics. This drove me towards software development, where I had hoped one day I’d be able to bring those ideas to life. Over the course of my career, I discovered that this behaviour wasn’t exclusive to games. I found a passion for solving interesting and complex problems, and realized that what I enjoyed was the ability to bring systems to life.\n          </p>\n          <p>\n            I’ve been described as a thinker. For much of my life I had a hunch I spent more time in my head than many of my peers. It wasn’t until I started my career that I learned just how much more I think about problems. Given an interesting enough problem, my brain plugs away at it until I’m satisfied I both understand it well enough, and have an adequate solution.\n          </p>\n          <p>\n            I like to ask a lot of questions, and often I’ll respond to questions with more questions. I want to make sure I understand the question well enough before I provide an answer. Otherwise, how can I know if the answer is actually helpful or not?\n          </p>\n        </Content>\n        <div>\n          <Card heading=\"Values\">\n            <Accordion>\n              {values.map(value => {\n                return (\n                  <Accordion.Item\n                    key={value.id}\n                    summary={<Summary value={value.title} iconType={value.icon}/>}\n                  >\n                    <Content className=\"mb-4\">\n                      <MDXRenderer>{value.body}</MDXRenderer>\n                    </Content>\n                  </Accordion.Item>\n                )\n              })}\n            </Accordion>\n          </Card>\n        </div>\n      </div>\n    </Section.Item>\n  )\n}\n\nexport default AboutMeSection","import { IconType } from \"react-icons\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { AllFileQueryResult, ContentFragmentFrontmatter } from \"./Types\"\nimport { Icons } from \"../utilities\"\n\ninterface Value {\n  id: string\n  title: string\n  icon: IconType\n  body: string\n}\n\nfunction useValues(): Value[] {\n  const result = useStaticQuery<AllFileQueryResult<ContentFragmentFrontmatter>>(graphql`\n  query {\n    allFile(\n      filter: {sourceInstanceName: {eq: \"values\"}}\n      sort: {childMdx: {frontmatter: {slug: ASC}}}\n    ) {\n      nodes {\n        childMdx {\n          id\n          frontmatter {\n            title\n            icon\n          }\n          body\n        }\n      }\n    }\n  }`)\n  return result.allFile.nodes?.map(({ childMdx }) => ({\n    id: childMdx.id,\n    title: childMdx.frontmatter.title,\n    icon: Icons[childMdx.frontmatter.icon],\n    body: childMdx.body\n  })) || []\n}\n\nexport {\n  Value,\n  useValues\n}\n","import * as React from \"react\"\nimport { IconType } from \"react-icons\"\nimport { Section, Content, Card, Accordion, MDXRenderer, SquareGlyph } from \"../components\"\nimport { usePrinciples } from \"../data/Principles\"\n\nconst Summary = ({ value, iconType }: { value: string, iconType: IconType }) => {\n  return (\n    <div className=\"flex flex-row gap-4 items-center min-h-[72px]\">\n      <SquareGlyph iconType={iconType}/>\n      <div className=\"flex flex-col flex-1 justify-center md:text-lg xl:text-xl 3xl:text-2xl text-center md:text-left\">\n        {value}\n      </div>\n    </div>\n  )\n}\n\nconst AgileSection = () => {\n  const principles = usePrinciples()\n\n  return (\n    <Section.Item heading={{\n      title: \"Agile\",\n      subtitle: [\"\\\"Plans are worthless, but planning is everything.\\\"\", \"Dwight D. Eisenhower\"]\n    }}>\n      <Content>\n        <p>\n          The Agile Manifesto was created in the early 2000s by prominent members of the software industry.\n          This manifesto is what underpins many of the agile processes common in the software industry today, but I believe these processes misunderstand the intention behind the manifesto.\n        </p>\n        <p>\n          The following principles are a condensed version of my understanding of manifestos original twelve:\n        </p>\n      </Content>\n      <Card heading=\"Principles\">\n        <Accordion>\n          { principles.map(principle => {\n            return (\n              <Accordion.Item\n                key={principle.id}\n                summary={<Summary value={principle.title} iconType={principle.icon}/>}\n              >\n                <Content className=\"mb-4\">\n                  <MDXRenderer>{principle.body}</MDXRenderer>\n                </Content>\n              </Accordion.Item>\n            )\n          })}\n        </Accordion>\n      </Card>\n      <Content>\n        <center>\n          <sup>\n            Check out the <a href=\"https://agilemanifesto.org/principles.html\" target=\"_blank\">Principles behind the Agile Manifesto</a> for the originals.\n          </sup>\n        </center>\n      </Content>\n    </Section.Item>\n  )\n}\n\nexport default AgileSection","import { IconType } from \"react-icons\";\nimport { graphql, useStaticQuery } from \"gatsby\";\nimport { AllFileQueryResult, ContentFragmentFrontmatter } from \"./Types\";\nimport { Icons } from \"../utilities\"\n\ninterface Principle {\n  id: string,\n  title: string,\n  icon: IconType,\n  body: string\n}\n\nfunction usePrinciples(): Principle[] {\n  const result = useStaticQuery<AllFileQueryResult<ContentFragmentFrontmatter>>(graphql`\n  {\n    allFile(\n      filter: {sourceInstanceName: {eq: \"principles\"}}\n      sort: {childMdx: {frontmatter: {slug: ASC}}}\n    ) {\n      nodes {\n        childMdx {\n          id\n          frontmatter {\n            title\n            icon\n          }\n          body\n        }\n      }\n    }\n  }`\n  )\n  \n  return result.allFile.nodes?.map(({ childMdx }) => ({\n    id: childMdx.id,\n    title: childMdx.frontmatter.title,\n    icon: Icons[childMdx.frontmatter.icon],\n    body: childMdx.body\n  })) || []\n}\n\nexport {\n  Principle,\n  usePrinciples\n}\n","import * as React from \"react\"\nimport { ContactForm, Section } from \"../components\"\n\nconst ContactSection = () => {\n  return (\n    <Section.Item\n      anchor=\"contact\"\n      heading={{ title: \"Let's Chat\", subtitle: \"Need help with a project? Send me some details.\" }}\n    >\n      <ContactForm/>\n    </Section.Item>\n  )\n}\n\nexport default ContactSection","import * as React from \"react\"\nimport { IconType } from \"react-icons\"\nimport { Content, RoundGlyph, Section } from \"../components\"\nimport { Orientation } from \"../utilities\"\nimport { useExpertise } from \"../data/Expertise\"\n\ninterface ExpertiseProperties {\n  title: string\n  icon: {\n    type: IconType,\n    orientation: Orientation.Horizontal\n  }\n  children: string\n}\n\nconst Item = ({title, icon, children}: ExpertiseProperties) => {\n  return (\n    <div\n      className={\n        `flex ${icon.orientation === Orientation.Horizontal.Left ? \"flex-wrap\" : \"flex-wrap-reverse\"} justify-center\n        min-w-full md:min-w-[45%] gap-4 flex-1`\n    }\n    >\n      {icon.orientation === Orientation.Horizontal.Left\n        ? <div className=\"flex flex-col justify-center\"><RoundGlyph iconType={icon.type}/></div>\n        : null\n      }\n      <Content className=\"flex-1 min-w-full sm:min-w-[640px] md:min-w-[128px] md:min-h-[100px] text-center\">\n        <h4>{title}</h4>\n        <p>{children}</p>\n      </Content>\n      {icon.orientation === Orientation.Horizontal.Right\n        ? <div className=\"flex flex-col justify-center\"><RoundGlyph iconType={icon.type}/></div>\n        : null\n      }\n    </div>\n  )\n}\n\nconst ExpertiseSection = () => {\n  const expertise = useExpertise()\n\n  return (\n    <Section.Item\n      heading={{ title: \"Expertise\", subtitle:\"Some of the things I can do.\" }}\n    >\n      <div className=\"flex flex-wrap justify-center gap-4\">\n        {expertise.map((e, i) => (\n          <Item\n            key={e.id}\n            title={e.title}\n            icon={{\n              type: e.icon,\n              orientation: i % 2 === 0 ? Orientation.Horizontal.Left : Orientation.Horizontal.Right\n            }}\n          >\n            {e.body}\n          </Item>\n        ))}\n      </div>\n    </Section.Item>\n  )\n}\n\nexport default ExpertiseSection","import { IconType } from \"react-icons\";\nimport { graphql, useStaticQuery } from \"gatsby\";\nimport { AllFileQueryResult, ContentFragmentFrontmatter } from \"./Types\";\nimport { Icons } from \"../utilities\"\n\ninterface Expertise {\n  id: string,\n  title: string,\n  icon: IconType,\n  body: string\n}\n\nfunction useExpertise(): Expertise[] {\n  const result = useStaticQuery<AllFileQueryResult<ContentFragmentFrontmatter>>(graphql`\n  {\n    allFile(\n      filter: {sourceInstanceName: {eq: \"expertise\"}}\n      sort: {childMdx: {frontmatter: {slug: ASC}}}\n    ) {\n      nodes {\n        childMdx {\n          id\n          frontmatter {\n            title\n            icon\n          }\n          body\n        }\n      }\n    }\n  }`\n  )\n  \n  return result.allFile.nodes?.map(({ childMdx }) => ({\n    id: childMdx.id,\n    title: childMdx.frontmatter.title,\n    icon: Icons[childMdx.frontmatter.icon],\n    body: childMdx.body\n  })) || []\n}\n\nexport {\n  Expertise,\n  useExpertise\n}\n","import * as React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\nimport { Section, Content, Card } from \"../components\"\nimport { Orientation } from \"../utilities\"\n\ninterface ItemProperties {\n  image: React.ReactElement\n  imageOrientation: Orientation.Horizontal\n  title: string\n  text: string\n  subtext: string\n}\n\nconst Item = ({ image, imageOrientation, title, text, subtext }: ItemProperties) => {\n  const Image = () => (\n    <div className=\"flex justify-center max-w-[192px] md:max-w-[224px] rounded-xl overflow-clip bg-white\">\n      {image}\n    </div>\n  )\n  return (\n    <div className={`flex ${imageOrientation === Orientation.Horizontal.Left ? \"flex-wrap\" : \"flex-wrap-reverse\"} justify-center items-center gap-4`}>\n      { imageOrientation === Orientation.Horizontal.Left\n          ? <Image/>\n          : null\n      }\n      <Content className=\"flex-1 min-w-[320px] text-center md:text-left\">\n        <h4>{title}</h4>\n        <p>{text}</p>\n        <p className=\"text-zinc-400\">{subtext}</p>\n      </Content>\n      { imageOrientation === Orientation.Horizontal.Right\n          ? <Image/>\n          : null\n      }\n    </div>\n  )\n}\n\nconst ProcessSection = () => {\n  return (\n    <Section.Item heading={{ title: \"Side Trailing\", subtitle: \"The Side Trails Software Development process.\" }}>\n      <Content>\n        <p>\n          A process of discovery and exploration aimed at developing a deep understanding of your systems, technical challenges, and business problems.\n          In order to establish this understanding, close collaboration with you is integral to the process. It is not to embarked upon alone.\n        </p>\n        <p>\n          Any development project I undertake can be loosely broken down into the following parts: Discover, Explore, and Build.\n        </p>\n      </Content>\n      <Card heading=\"Process\">\n        <div className=\"flex flex-col gap-12 lg:gap-6\">\n          <Item\n            image={<StaticImage src=\"../images/discover.png\" alt=\"\" objectFit=\"fill\"/>}\n            imageOrientation={Orientation.Horizontal.Right}\n            title=\"Discover\"\n            text=\"First, let's discover what your business needs/technical challenges are all about.\"\n            subtext=\"What are you trying to achieve? What existing software solutions do you have? What are the non-negotiable vs. the nice-to-haves requirements?\"\n            />\n          <Item\n            image={<StaticImage src=\"../images/explore.png\" alt=\"\" objectFit=\"fill\"/>}\n            imageOrientation={Orientation.Horizontal.Left}\n            title=\"Explore\"\n            text=\"Second, let's explore these business needs/technical challenges to establish a shared and deep understanding.\"\n            subtext=\"What are the various systems and processes? How do they interact? What are the first principles? Close collaboration is key.\"\n            />\n          <Item\n            image={<StaticImage src=\"../images/build.png\" alt=\"\" objectFit=\"fill\"/>}\n            imageOrientation={Orientation.Horizontal.Right}\n            title=\"Build\"\n            text=\"Third, let's build the solution.\"\n            subtext=\"Discovery and exploration remain ongoing. There will always be more questions to ask and answer throughout the process, always more side trails to explore.\"\n            />\n          </div>\n        </Card>\n    </Section.Item>\n  )\n}\n\nexport default ProcessSection","import * as React from \"react\"\nimport { getImage, GatsbyImage, StaticImage } from \"gatsby-plugin-image\"\nimport { Section, Carousel, Testimonial, MDXRenderer } from \"../components\"\nimport { useTestimonials } from \"../data/Testimonials\"\n\nconst TestimonialSection = () => {\n  const testimonials = useTestimonials()\n  \n  return (\n    <Section.Item heading={{ title: \"What Clients Think\", subtitle: \"And colleagues, too!\" }}>\n      <Carousel>\n        {testimonials.map(testimonial => {\n          const image = getImage(testimonial.image.source)\n          return (\n            <Carousel.Item key={testimonial.id}>\n              <Testimonial\n                image={image \n                  ? <GatsbyImage image={image} alt={testimonial.image.alt}/>\n                  : <StaticImage src=\"https://placehold.co/500/png?text=?\" alt=\"Missing testimonial image\"/>\n                }\n                contact={testimonial.contact}\n                role={testimonial.role}\n                company={testimonial.company}\n              >\n                <MDXRenderer>\n                  {testimonial.body}\n                </MDXRenderer>\n              </Testimonial>\n            </Carousel.Item>\n          )\n        })}\n      </Carousel>\n    </Section.Item>\n  )\n}\n\nexport default TestimonialSection","import { graphql, useStaticQuery } from \"gatsby\";\nimport { AllFileQueryResult, Image } from \"./Types\";\n\n\ninterface TestimonialFrontmatter {\n  image: Image\n  company: string\n  contact: string\n  role: string\n}\n\ninterface Testimonial {\n  id: string,\n  company: string\n  contact: string\n  role: string\n  image: Image\n  body: string\n\n}\n\nfunction useTestimonials(): Testimonial[] {\n  const result = useStaticQuery<AllFileQueryResult<TestimonialFrontmatter>>(graphql`\n  {\n    allFile(\n      filter: {sourceInstanceName: {eq: \"testimonials\"}, extension: {eq: \"mdx\"}}\n      sort: {childMdx: {frontmatter: {slug: ASC}}}\n    ) {\n      nodes {\n        childMdx {\n          id\n          frontmatter {\n            company\n            contact\n            role\n            image {\n              source {\n                childImageSharp {\n                  gatsbyImageData\n                }\n              }\n              alt\n            }\n          }\n          body\n        }\n      }\n    }\n  }`)\n  return result.allFile.nodes?.map(({ childMdx }) => ({\n    id: childMdx.id,\n    company: childMdx.frontmatter.company,\n    contact: childMdx.frontmatter.contact,\n    role: childMdx.frontmatter.role,\n    image: childMdx.frontmatter.image,\n    body: childMdx.body\n  })) || []\n}\n\nexport {\n  Testimonial,\n  useTestimonials\n}\n","import * as React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\nimport { Section, Content } from \"../components\"\n\nconst WhySideTrailsSection = () => {\n  return (\n    <Section.Item heading={{\n      title: \"Why Side Trails?\",\n      subtitle: [\"\\\"We cannot solve our problems with the same thinking we used when we created them.\\\"\", \"Albert Einstein\"]\n    }}>\n      <Content>\n        <div className=\"text-center mb-4 lg:float-right lg:ml-8\">\n          <StaticImage src=\"../images/why-side-trails.jpeg\" alt=\"\" className=\"-mx-3 h-60 md:mx-0 md:h-80 xl:w-96 xl:h-96 md:rounded-xl\"/>\n        </div>\n        <p>\n          During hikes with my friends, we often come across side trails and every time we do I wonder where it’ll take us and what we’ll see. These side trails are more dangerous and less groomed, but are also more interesting and less travelled. I enjoy going down these side trails every opportunity I get. I’m an explorer.\n        </p>\n        <p>\n          This mindset reflects how I solve problems.\n        </p>\n        <p>\n          If the status quo is the main trail, the side trails represent the unconventional and unorthodox. Often it makes sense to stick with the status quo, and solve problems within it. Exploration beyond this establishes confidence in that approach, while ensuring that better solutions aren’t missed.\n        </p>\n      </Content>\n    </Section.Item>\n  )\n}\n\nexport default WhySideTrailsSection"],"names":["Summary","_ref","value","iconType","React","className","SquareGlyph","values","useStaticQuery","allFile","nodes","_result$allFile$nodes","map","childMdx","id","title","frontmatter","icon","Icons","body","Section","Item","heading","subtitle","Content","StaticImage","src","alt","__imageData","Card","Accordion","key","summary","MDXRenderer","principles","principle","href","target","anchor","ContactForm","children","orientation","Orientation","Left","RoundGlyph","type","Right","expertise","e","i","image","imageOrientation","text","subtext","Image","objectFit","testimonials","company","contact","role","Carousel","testimonial","getImage","source","Testimonial","GatsbyImage"],"sourceRoot":""}