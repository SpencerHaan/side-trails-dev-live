{"version":3,"file":"98fcb977cfffa1899c899ef9b9596c45bce34855-dc0db99c2d00ef49d016.js","mappings":"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","sources":["webpack://side-trail-software-development/./src/sections/AboutMeSection.tsx","webpack://side-trail-software-development/./src/data/Values.ts","webpack://side-trail-software-development/./src/sections/AgileSection.tsx","webpack://side-trail-software-development/./src/data/Principles.ts","webpack://side-trail-software-development/./src/sections/ContactSection.tsx","webpack://side-trail-software-development/./src/sections/ExpertiseSection.tsx","webpack://side-trail-software-development/./src/data/Expertise.ts","webpack://side-trail-software-development/./src/sections/ProcessSection.tsx","webpack://side-trail-software-development/./src/sections/TestimonialSection.tsx","webpack://side-trail-software-development/./src/data/Testimonials.ts","webpack://side-trail-software-development/./src/sections/WhySideTrailsSection.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { IconType } from \"react-icons\"\nimport { StaticImage } from \"gatsby-plugin-image\"\nimport { Accordion, Card, Content, MDXRenderer, Section, SquareGlyph } from \"../components\"\nimport { useValues } from \"../data/Values\"\n\nconst Summary = ({ value, iconType }: { value: string, iconType: IconType }) => {\n  return (\n    <div className=\"flex flex-row gap-4 items-center min-h-[72px]\">\n      <SquareGlyph iconType={iconType}/>\n      <div className=\"flex flex-col flex-1 justify-center md:text-lg xl:text-xl 3xl:text-2xl text-center md:text-left\">\n        {value}\n      </div>\n    </div>\n  )\n}\n\nconst AboutMeSection = () => {\n  const values = useValues()\n\n  return (\n    <Section.Item heading={{\n        title: \"A Little About Me\",\n        subtitle: [\"\\\"The unexamined life is not worth living.\\\"\", \"Socrates\"]\n      }}\n    >\n      <div className=\"flex flex-col gap-8\">\n        <Content className=\"prose-h3:mt-0\">\n          <div className=\"text-center mb-4 lg:float-left lg:mr-8\">\n            <StaticImage src=\"../images/headshot.jpeg\" alt=\"Picture of Spencer Haan with a beautiful beard.\" className=\"w-60 h-60 md:w-80 md:h-80 xl:w-96 xl:h-96 rounded-xl shadow-xl\"/>\n          </div>\n          <h3>\n            Hey, my name is Spencer Haan and I'm Side Trails Software Development!\n          </h3>\n          <p>\n            Guiding principles over following rules. Accuracy over expediency. Long-term thinking over short-term thinking.\n          </p>\n          <p>\n            When I was 10 years old, if you had asked about my career aspirations, I would have eagerly said I wanted to be a video game developer. Little did I know that this path wouldn't necessarily place me in charge of the creative vision. The work-life balance within that industry isn’t ideal, either. Nonetheless, this dream became my guiding North Star.\n          </p>\n          <p>\n            Software development is like a constantly changing puzzle, with each component fitting somewhere within the bigger picture. More often than not, these components are fuzzy rather than well-defined. I enjoy figuring out what these components should be, how they can be made clearer, where they should go, and, most importantly, why they should exist in the first place.\n          </p>\n          <p>\n            I have an insatiable drive to understand interesting and complex problems. Simple problems often mask underlying complexity, and vice versa, so it is my belief that a shared, and deep, understanding of those problems is the path towards effective solutions.\n          </p>\n          <p>\n            Despite my perfectionist nature, I’ve learned that my desire isn’t to make something perfect, but to instead do things properly by following my principles of accuracy, quality, and building for the long-term.\n          </p>\n          <p>\n            I enjoy rebuilding systems and frameworks, envisioning a better, or even the best, versions of themselves. Described as a deep, lateral, and first-principles thinker, I challenge the status quo to better understand and determine if, and how, it needs to change.\n          </p>\n          <p>\n            Ultimately, I’m looking for opportunities to solve problems that I find interesting, and to do so in my own unique and creative way.\n          </p>\n        </Content>\n        <div>\n          <Card heading=\"Values\">\n            <Accordion>\n              {values.map(value => {\n                return (\n                  <Accordion.Item\n                    key={value.id}\n                    summary={<Summary value={value.title} iconType={value.icon}/>}\n                  >\n                    <Content className=\"mb-4\">\n                      <MDXRenderer>{value.body}</MDXRenderer>\n                    </Content>\n                  </Accordion.Item>\n                )\n              })}\n            </Accordion>\n          </Card>\n        </div>\n      </div>\n    </Section.Item>\n  )\n}\n\nexport default AboutMeSection","import { IconType } from \"react-icons\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { AllFileQueryResult, ContentFragmentFrontmatter } from \"./Types\"\nimport { Icons } from \"../utilities\"\n\ninterface Value {\n  id: string\n  title: string\n  icon: IconType\n  body: string\n}\n\nfunction useValues(): Value[] {\n  const result = useStaticQuery<AllFileQueryResult<ContentFragmentFrontmatter>>(graphql`\n  query {\n    allFile(\n      filter: {sourceInstanceName: {eq: \"values\"}}\n      sort: {childMdx: {frontmatter: {slug: ASC}}}\n    ) {\n      nodes {\n        childMdx {\n          id\n          frontmatter {\n            title\n            icon\n          }\n          body\n        }\n      }\n    }\n  }`)\n  return result.allFile.nodes?.map(({ childMdx }) => ({\n    id: childMdx.id,\n    title: childMdx.frontmatter.title,\n    icon: Icons[childMdx.frontmatter.icon],\n    body: childMdx.body\n  })) || []\n}\n\nexport {\n  Value,\n  useValues\n}\n","import * as React from \"react\"\nimport { IconType } from \"react-icons\"\nimport { Section, Content, Card, Accordion, MDXRenderer, SquareGlyph } from \"../components\"\nimport { usePrinciples } from \"../data/Principles\"\n\nconst Summary = ({ value, iconType }: { value: string, iconType: IconType }) => {\n  return (\n    <div className=\"flex flex-row gap-4 items-center min-h-[72px]\">\n      <SquareGlyph iconType={iconType}/>\n      <div className=\"flex flex-col flex-1 justify-center md:text-lg xl:text-xl 3xl:text-2xl text-center md:text-left\">\n        {value}\n      </div>\n    </div>\n  )\n}\n\nconst AgileSection = () => {\n  const principles = usePrinciples()\n\n  return (\n    <Section.Item heading={{\n      title: \"Agile\",\n      subtitle: [\"\\\"Plans are worthless, but planning is everything.\\\"\", \"Dwight D. Eisenhower\"]\n    }}>\n      <Content>\n        <p>\n          The Agile Manifesto was created in the early 2000s by prominent members of the software industry.\n          This manifesto is what underpins many of the agile processes common in the software industry today, but I believe these processes misunderstand the intention behind the manifesto.\n        </p>\n        <p>\n          The following principles are a condensed version of my understanding of manifestos original twelve:\n        </p>\n      </Content>\n      <Card heading=\"Principles\">\n        <Accordion>\n          { principles.map(principle => {\n            return (\n              <Accordion.Item\n                key={principle.id}\n                summary={<Summary value={principle.title} iconType={principle.icon}/>}\n              >\n                <Content className=\"mb-4\">\n                  <MDXRenderer>{principle.body}</MDXRenderer>\n                </Content>\n              </Accordion.Item>\n            )\n          })}\n        </Accordion>\n      </Card>\n      <Content>\n        <center>\n          <sup>\n            Check out the <a href=\"https://agilemanifesto.org/principles.html\" target=\"_blank\">Principles behind the Agile Manifesto</a> for the originals.\n          </sup>\n        </center>\n      </Content>\n    </Section.Item>\n  )\n}\n\nexport default AgileSection","import { IconType } from \"react-icons\";\nimport { graphql, useStaticQuery } from \"gatsby\";\nimport { AllFileQueryResult, ContentFragmentFrontmatter } from \"./Types\";\nimport { Icons } from \"../utilities\"\n\ninterface Principle {\n  id: string,\n  title: string,\n  icon: IconType,\n  body: string\n}\n\nfunction usePrinciples(): Principle[] {\n  const result = useStaticQuery<AllFileQueryResult<ContentFragmentFrontmatter>>(graphql`\n  {\n    allFile(\n      filter: {sourceInstanceName: {eq: \"principles\"}}\n      sort: {childMdx: {frontmatter: {slug: ASC}}}\n    ) {\n      nodes {\n        childMdx {\n          id\n          frontmatter {\n            title\n            icon\n          }\n          body\n        }\n      }\n    }\n  }`\n  )\n  \n  return result.allFile.nodes?.map(({ childMdx }) => ({\n    id: childMdx.id,\n    title: childMdx.frontmatter.title,\n    icon: Icons[childMdx.frontmatter.icon],\n    body: childMdx.body\n  })) || []\n}\n\nexport {\n  Principle,\n  usePrinciples\n}\n","import * as React from \"react\"\nimport { ContactForm, Section } from \"../components\"\n\nconst ContactSection = () => {\n  return (\n    <Section.Item\n      anchor=\"contact\"\n      heading={{ title: \"Let's Chat\", subtitle: \"Need help with a project? Send me some details.\" }}\n    >\n      <ContactForm/>\n    </Section.Item>\n  )\n}\n\nexport default ContactSection","import * as React from \"react\"\nimport { IconType } from \"react-icons\"\nimport { Content, RoundGlyph, Section } from \"../components\"\nimport { Orientation } from \"../utilities\"\nimport { useExpertise } from \"../data/Expertise\"\n\ninterface ExpertiseProperties {\n  title: string\n  icon: {\n    type: IconType,\n    orientation: Orientation.Horizontal\n  }\n  children: string\n}\n\nconst Item = ({title, icon, children}: ExpertiseProperties) => {\n  return (\n    <div\n      className={\n        `flex ${icon.orientation === Orientation.Horizontal.Left ? \"flex-wrap\" : \"flex-wrap-reverse\"} justify-center\n        min-w-full md:min-w-[45%] gap-4 flex-1`\n    }\n    >\n      {icon.orientation === Orientation.Horizontal.Left\n        ? <div className=\"flex flex-col justify-center\"><RoundGlyph iconType={icon.type}/></div>\n        : null\n      }\n      <Content className=\"flex-1 min-w-full sm:min-w-[640px] md:min-w-[128px] md:min-h-[100px] text-center\">\n        <h4>{title}</h4>\n        <p>{children}</p>\n      </Content>\n      {icon.orientation === Orientation.Horizontal.Right\n        ? <div className=\"flex flex-col justify-center\"><RoundGlyph iconType={icon.type}/></div>\n        : null\n      }\n    </div>\n  )\n}\n\nconst ExpertiseSection = () => {\n  const expertise = useExpertise()\n\n  return (\n    <Section.Item\n      heading={{ title: \"Expertise\", subtitle:\"Some of the things I can do.\" }}\n    >\n      <div className=\"flex flex-wrap justify-center gap-4\">\n        {expertise.map((e, i) => (\n          <Item\n            key={e.id}\n            title={e.title}\n            icon={{\n              type: e.icon,\n              orientation: i % 2 === 0 ? Orientation.Horizontal.Left : Orientation.Horizontal.Right\n            }}\n          >\n            {e.body}\n          </Item>\n        ))}\n      </div>\n    </Section.Item>\n  )\n}\n\nexport default ExpertiseSection","import { IconType } from \"react-icons\";\nimport { graphql, useStaticQuery } from \"gatsby\";\nimport { AllFileQueryResult, ContentFragmentFrontmatter } from \"./Types\";\nimport { Icons } from \"../utilities\"\n\ninterface Expertise {\n  id: string,\n  title: string,\n  icon: IconType,\n  body: string\n}\n\nfunction useExpertise(): Expertise[] {\n  const result = useStaticQuery<AllFileQueryResult<ContentFragmentFrontmatter>>(graphql`\n  {\n    allFile(\n      filter: {sourceInstanceName: {eq: \"expertise\"}}\n      sort: {childMdx: {frontmatter: {slug: ASC}}}\n    ) {\n      nodes {\n        childMdx {\n          id\n          frontmatter {\n            title\n            icon\n          }\n          body\n        }\n      }\n    }\n  }`\n  )\n  \n  return result.allFile.nodes?.map(({ childMdx }) => ({\n    id: childMdx.id,\n    title: childMdx.frontmatter.title,\n    icon: Icons[childMdx.frontmatter.icon],\n    body: childMdx.body\n  })) || []\n}\n\nexport {\n  Expertise,\n  useExpertise\n}\n","import * as React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\nimport { Section, Content, Card } from \"../components\"\nimport { Orientation } from \"../utilities\"\n\ninterface ItemProperties {\n  image: React.ReactElement\n  imageOrientation: Orientation.Horizontal\n  title: string\n  text: string\n  subtext: string\n}\n\nconst Item = ({ image, imageOrientation, title, text, subtext }: ItemProperties) => {\n  const Image = () => (\n    <div className=\"flex justify-center max-w-[192px] md:max-w-[224px] rounded-xl overflow-clip bg-white\">\n      {image}\n    </div>\n  )\n  return (\n    <div className={`flex ${imageOrientation === Orientation.Horizontal.Left ? \"flex-wrap\" : \"flex-wrap-reverse\"} justify-center items-center gap-4`}>\n      { imageOrientation === Orientation.Horizontal.Left\n          ? <Image/>\n          : null\n      }\n      <Content className=\"flex-1 min-w-[320px] text-center md:text-left\">\n        <h4>{title}</h4>\n        <p>{text}</p>\n        <p className=\"text-zinc-400\">{subtext}</p>\n      </Content>\n      { imageOrientation === Orientation.Horizontal.Right\n          ? <Image/>\n          : null\n      }\n    </div>\n  )\n}\n\nconst ProcessSection = () => {\n  return (\n    <Section.Item heading={{ title: \"Side Trailing\", subtitle: \"The Side Trails Software Development process.\" }}>\n      <Content>\n        <p>\n          A process of discovery and exploration aimed at developing a deep understanding of your systems, technical challenges, and business problems.\n          In order to establish this understanding, close collaboration with you is integral to the process. It is not to embarked upon alone.\n        </p>\n        <p>\n          Any development project I undertake can be loosely broken down into the following parts: Discover, Explore, and Build.\n        </p>\n      </Content>\n      <Card heading=\"Process\">\n        <div className=\"flex flex-col gap-12 lg:gap-6\">\n          <Item\n            image={<StaticImage src=\"../images/discover.png\" alt=\"\" objectFit=\"fill\"/>}\n            imageOrientation={Orientation.Horizontal.Right}\n            title=\"Discover\"\n            text=\"First, let's discover what your business needs/technical challenges are all about.\"\n            subtext=\"What are you trying to achieve? What existing software solutions do you have? What are the non-negotiable vs. the nice-to-haves requirements?\"\n            />\n          <Item\n            image={<StaticImage src=\"../images/explore.png\" alt=\"\" objectFit=\"fill\"/>}\n            imageOrientation={Orientation.Horizontal.Left}\n            title=\"Explore\"\n            text=\"Second, let's explore these business needs/technical challenges to establish a shared and deep understanding.\"\n            subtext=\"What are the various systems and processes? How do they interact? What are the first principles? Close collaboration is key.\"\n            />\n          <Item\n            image={<StaticImage src=\"../images/build.png\" alt=\"\" objectFit=\"fill\"/>}\n            imageOrientation={Orientation.Horizontal.Right}\n            title=\"Build\"\n            text=\"Third, let's build the solution.\"\n            subtext=\"Discovery and exploration remain ongoing. There will always be more questions to ask and answer throughout the process, always more side trails to explore.\"\n            />\n          </div>\n        </Card>\n    </Section.Item>\n  )\n}\n\nexport default ProcessSection","import * as React from \"react\"\nimport { getImage, GatsbyImage, StaticImage } from \"gatsby-plugin-image\"\nimport { Section, Carousel, Testimonial, MDXRenderer } from \"../components\"\nimport { useTestimonials } from \"../data/Testimonials\"\n\nconst TestimonialSection = () => {\n  const testimonials = useTestimonials()\n  \n  return (\n    <Section.Item heading={{ title: \"What Clients Think\", subtitle: \"And colleagues, too!\" }}>\n      <Carousel>\n        {testimonials.map(testimonial => {\n          const image = getImage(testimonial.image.source)\n          return (\n            <Carousel.Item key={testimonial.id}>\n              <Testimonial\n                image={image \n                  ? <GatsbyImage image={image} alt={testimonial.image.alt}/>\n                  : <StaticImage src=\"https://placehold.co/500/png?text=?\" alt=\"Missing testimonial image\"/>\n                }\n                contact={testimonial.contact}\n                role={testimonial.role}\n                company={testimonial.company}\n              >\n                <MDXRenderer>\n                  {testimonial.body}\n                </MDXRenderer>\n              </Testimonial>\n            </Carousel.Item>\n          )\n        })}\n      </Carousel>\n    </Section.Item>\n  )\n}\n\nexport default TestimonialSection","import { graphql, useStaticQuery } from \"gatsby\";\nimport { AllFileQueryResult, Image } from \"./Types\";\n\n\ninterface TestimonialFrontmatter {\n  image: Image\n  company: string\n  contact: string\n  role: string\n}\n\ninterface Testimonial {\n  id: string,\n  company: string\n  contact: string\n  role: string\n  image: Image\n  body: string\n\n}\n\nfunction useTestimonials(): Testimonial[] {\n  const result = useStaticQuery<AllFileQueryResult<TestimonialFrontmatter>>(graphql`\n  {\n    allFile(\n      filter: {sourceInstanceName: {eq: \"testimonials\"}, extension: {eq: \"mdx\"}}\n      sort: {childMdx: {frontmatter: {slug: ASC}}}\n    ) {\n      nodes {\n        childMdx {\n          id\n          frontmatter {\n            company\n            contact\n            role\n            image {\n              source {\n                childImageSharp {\n                  gatsbyImageData\n                }\n              }\n              alt\n            }\n          }\n          body\n        }\n      }\n    }\n  }`)\n  return result.allFile.nodes?.map(({ childMdx }) => ({\n    id: childMdx.id,\n    company: childMdx.frontmatter.company,\n    contact: childMdx.frontmatter.contact,\n    role: childMdx.frontmatter.role,\n    image: childMdx.frontmatter.image,\n    body: childMdx.body\n  })) || []\n}\n\nexport {\n  Testimonial,\n  useTestimonials\n}\n","import * as React from \"react\"\nimport { StaticImage } from \"gatsby-plugin-image\"\nimport { Section, Content } from \"../components\"\n\nconst WhySideTrailsSection = () => {\n  return (\n    <Section.Item heading={{\n      title: \"Why Side Trails?\",\n      subtitle: [\"\\\"We cannot solve our problems with the same thinking we used when we created them.\\\"\", \"Albert Einstein\"]\n    }}>\n      <Content>\n        <div className=\"text-center mb-4 lg:float-right lg:ml-8\">\n          <StaticImage src=\"../images/why-side-trails.jpeg\" alt=\"\" className=\"-mx-3 h-60 md:mx-0 md:h-80 xl:w-96 xl:h-96 md:rounded-xl\"/>\n        </div>\n        <p>\n          During hikes with my friends, we often come across side trails and every time we do I wonder where it’ll take us and what we’ll see. These side trails are more dangerous and less groomed, but are also more interesting and less travelled. I enjoy going down these side trails every opportunity I get. I’m an explorer.\n        </p>\n        <p>\n          This mindset reflects how I solve problems.\n        </p>\n        <p>\n          If the status quo is the main trail, the side trails represent the unconventional and unorthodox. Often it makes sense to stick with the status quo, and solve problems within it. Exploration beyond this establishes confidence in that approach, while ensuring that better solutions aren’t missed.\n        </p>\n      </Content>\n    </Section.Item>\n  )\n}\n\nexport default WhySideTrailsSection"],"names":["Summary","_ref","value","iconType","React","className","SquareGlyph","values","useStaticQuery","allFile","nodes","_result$allFile$nodes","map","childMdx","id","title","frontmatter","icon","Icons","body","Section","Item","heading","subtitle","Content","StaticImage","src","alt","Card","Accordion","key","summary","MDXRenderer","principles","principle","href","target","anchor","ContactForm","children","orientation","Orientation","Left","RoundGlyph","type","Right","expertise","e","i","image","imageOrientation","text","subtext","Image","objectFit","__imageData","testimonials","company","contact","role","Carousel","testimonial","getImage","source","Testimonial","GatsbyImage"],"sourceRoot":""}