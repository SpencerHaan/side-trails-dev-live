{"version":3,"file":"component---src-pages-index-tsx-c5b2f75df74db52a0ec2.js","mappings":";uJAEA,MAAMA,EAAgB,EAAQ,MAExBC,EAAY,gBACZC,EAAgB,QAGhBC,EAAc,IAAIC,QAGxB,SAASC,EAAaC,GACpBA,EAAQA,EAAMC,OAAOD,OAASA,EAC9B,IAAIE,EAAWL,EAAYM,IAAIH,GAC/B,IAAKE,EAAU,CACb,MAAME,EAAKJ,EAAMK,SACXC,EAAaN,EAAMM,WACnBC,EAAYP,EAAMO,UAClBC,EAAU,IAAIF,EAAW,QAAQ,GACjCG,EAAU,IAAIH,EAAW,SAAS,GAClCI,EAAU,IAAIJ,EAAW,kBAAkB,GAAM,GACjDK,EAAc,CAClBH,QAASA,EACTC,QAASA,EACTC,QAASA,GAELL,EAAW,CACfO,QAAS,IAAIL,EAAU,WACvBM,QAAS,IAAIN,EAAU,UAAW,CAACO,YAAY,IAC/CC,YAAa,IAAIR,EAAU,cAAe,CAACS,YAAY,IACvDC,UAAW,IAAIV,EAAU,cAG3BF,EAASU,YAAYG,cAAgB,WACnCC,KAAKC,QAAQC,KAAKX,GAClBS,KAAKC,QAAQC,KAAKb,GAClBW,KAAKG,aAAc,CACrB,EACAjB,EAASY,UAAUC,cAAgB,SAASK,GAC1C,IAAIC,EAAML,KAAKC,QAAQK,MACnBD,IAAQhB,GAAWe,IAAanB,EAAGsB,OAASF,IAAQf,GACtDU,KAAKC,QAAQK,MACbN,KAAKG,YAAcH,KAAKQ,eAAiBjB,GAEzCS,KAAKG,aAAc,CAEvB,EAEApB,EAAW,CAAES,YAAaA,EAAaN,SAAUA,GACjDR,EAAY+B,IAAI5B,EAAOE,EACzB,CAEA,OAAOA,CACT,CAIA,SAAS2B,EAAoBC,GAC3B,OAAKA,EAGe,kBAAhBA,EAAOC,KACFD,EAAOE,KAEI,sBAAhBF,EAAOC,KACFD,EAAOG,UAAUD,KAAO,IAAMF,EAAOE,KAAKA,KAE/B,wBAAhBF,EAAOC,KACFF,EAAoBC,EAAOA,QAAU,IAC5CD,EAAoBC,EAAOI,eAF7B,EARSJ,CAWX,CAEAK,EAAOC,QAAU,SAASC,GAExB,OADAA,EAAUA,GAAW,CAAC,EACf,SAASpC,GACd,OAiBJ,SAAgBoC,EAASpC,GACvB,MAAMD,EAAQC,EAAOD,OAAS,EAAQ,MAChCE,EAAWH,EAAaC,GACxBI,EAAKJ,EAAMK,SACXiC,EAAMpC,EAASG,SACfM,EAAcX,EAAMW,YACpBH,EAAUN,EAASS,YAAYH,QAC/BC,EAAUP,EAASS,YAAYF,QAC/BC,EAAUR,EAASS,YAAYD,QAC/B6B,EAAYvC,EAAMuC,UAClBC,EAAoBxC,EAAMwC,kBAC1BC,EAAmBzC,EAAMyC,iBAE/B,OAAO,cAAcxC,EAERC,sBACT,OAAOA,CACT,CAGAwC,gBACE,IAAIlB,EAAM,GAAImB,EAAaxB,KAAKyB,IAChC,OAAS,CACHzB,KAAKyB,KAAOzB,KAAK0B,MAAMC,QACzB3B,KAAK4B,MAAM5B,KAAK6B,MAAO,6BACzB,IAAIC,EAAK9B,KAAK0B,MAAMK,WAAW/B,KAAKyB,KAEpC,OAAQK,GACR,KAAK,GACL,KAAK,IACH,OAAI9B,KAAKyB,MAAQzB,KAAK6B,MACT,KAAPC,GAAa9B,KAAKG,eAClBH,KAAKyB,IACAzB,KAAKgC,YAAYb,EAAIvB,cAEvBI,KAAKiC,iBAAiBH,IAE/BzB,GAAOL,KAAK0B,MAAMQ,MAAMV,EAAYxB,KAAKyB,KAClCzB,KAAKgC,YAAYb,EAAIzB,QAASW,IAEvC,KAAK,GACHA,GAAOL,KAAK0B,MAAMQ,MAAMV,EAAYxB,KAAKyB,KACzCpB,GAAOL,KAAKmC,iBACZX,EAAaxB,KAAKyB,IAClB,MAEF,KAAK,GACL,KAAK,IACHzB,KAAK4B,MACH5B,KAAKyB,IACL,qBAAuBzB,KAAK0B,MAAM1B,KAAKyB,KAAO,qBACpC,KAAPK,EAAY,OAAS,YADxB,WACyD9B,KAAK0B,MAAM1B,KAAKyB,KADzE,QAIJ,QACML,EAAUU,IACZzB,GAAOL,KAAK0B,MAAMQ,MAAMV,EAAYxB,KAAKyB,KACzCpB,GAAOL,KAAKoC,iBAAgB,GAC5BZ,EAAaxB,KAAKyB,OAEhBzB,KAAKyB,IAGb,CACF,CAEAW,gBAAgBC,GACd,IACIhC,EADAyB,EAAK9B,KAAK0B,MAAMK,WAAW/B,KAAKyB,KAcpC,QAZEzB,KAAKyB,IACI,KAAPK,GAAiD,KAApC9B,KAAK0B,MAAMK,WAAW/B,KAAKyB,QACxCzB,KAAKyB,IACPpB,EAAMgC,EAAgB,KAAO,QAE7BhC,EAAMiC,OAAOC,aAAaT,GAExB9B,KAAKkB,QAAQsB,cACbxC,KAAKyC,QACPzC,KAAK0C,UAAY1C,KAAKyB,KAGjBpB,CACT,CAEAsC,eAAeC,GACb,IAAIvC,EAAM,GAAImB,IAAexB,KAAKyB,IAClC,OAAS,CACHzB,KAAKyB,KAAOzB,KAAK0B,MAAMC,QACzB3B,KAAK4B,MAAM5B,KAAK6B,MAAO,gCACzB,IAAIC,EAAK9B,KAAK0B,MAAMK,WAAW/B,KAAKyB,KACpC,GAAIK,IAAOc,EAAO,MACP,KAAPd,GACFzB,GAAOL,KAAK0B,MAAMQ,MAAMV,EAAYxB,KAAKyB,KACzCpB,GAAOL,KAAKmC,iBACZX,EAAaxB,KAAKyB,KACTL,EAAUU,IACnBzB,GAAOL,KAAK0B,MAAMQ,MAAMV,EAAYxB,KAAKyB,KACzCpB,GAAOL,KAAKoC,iBAAgB,GAC5BZ,EAAaxB,KAAKyB,OAEhBzB,KAAKyB,GAEX,CAEA,OADApB,GAAOL,KAAK0B,MAAMQ,MAAMV,EAAYxB,KAAKyB,OAClCzB,KAAKgC,YAAY/C,EAAG4D,OAAQxC,EACrC,CAEA8B,iBACE,IAAyBW,EAArBC,EAAM,GAAIC,EAAQ,EAClBlB,EAAK9B,KAAK0B,MAAM1B,KAAKyB,KACd,MAAPK,GACF9B,KAAK4B,MAAM5B,KAAKyB,IAAK,uCACvB,IAAIwB,IAAajD,KAAKyB,IACtB,KAAOzB,KAAKyB,IAAMzB,KAAK0B,MAAMC,QAAUqB,IAAU,IAAI,CAEnD,GADAlB,EAAK9B,KAAK0B,MAAM1B,KAAKyB,OACV,MAAPK,EAAY,CACC,MAAXiB,EAAI,GACS,MAAXA,EAAI,IACNA,EAAMA,EAAIG,OAAO,GACb1E,EAAU2E,KAAKJ,KACjBD,EAASR,OAAOC,aAAaa,SAASL,EAAK,QAE7CA,EAAMA,EAAIG,OAAO,GACbzE,EAAc0E,KAAKJ,KACrBD,EAASR,OAAOC,aAAaa,SAASL,EAAK,OAG/CD,EAASvE,EAAcwE,GAEzB,KACF,CACAA,GAAOjB,CACT,CACA,OAAKgB,IACH9C,KAAKyB,IAAMwB,EACJ,IAGX,CASAI,eACE,IAAIvB,EAAID,EAAQ7B,KAAKyB,IACrB,GACEK,EAAK9B,KAAK0B,MAAMK,aAAa/B,KAAKyB,WAC3BH,EAAiBQ,IAAc,KAAPA,GACjC,OAAO9B,KAAKgC,YAAYb,EAAI1B,QAASO,KAAK0B,MAAMQ,MAAML,EAAO7B,KAAKyB,KACpE,CAIA6B,sBACE,IAAIC,EAAOvD,KAAKwD,YAQhB,OAPIxD,KAAKY,OAASO,EAAI1B,QACpB8D,EAAK1C,KAAOb,KAAKyD,MACVzD,KAAKY,KAAK8C,QACjBH,EAAK1C,KAAOb,KAAKY,KAAK8C,QAEtB1D,KAAK2D,aACP3D,KAAK4D,OACE5D,KAAK6D,WAAWN,EAAM,gBAC/B,CAIAO,0BACE,IAAIb,EAAWjD,KAAK6B,MAAOkC,EAAW/D,KAAK+D,SACvClD,EAAOb,KAAKsD,sBAChB,IAAKpC,EAAQ8C,kBAAoBhE,KAAKiE,IAAIhF,EAAGiF,OAAQ,OAAOrD,EAC5D,IAAI0C,EAAOvD,KAAKmE,YAAYlB,EAAUc,GAGtC,OAFAR,EAAKzC,UAAYD,EACjB0C,EAAK1C,KAAOb,KAAKsD,sBACVtD,KAAK6D,WAAWN,EAAM,oBAC/B,CAKAa,uBACE,GAAIpE,KAAKY,OAASO,EAAIrB,UAAW,MAAO,GACxC,IAAImD,EAAWjD,KAAK6B,MAAOkC,EAAW/D,KAAK+D,SACvCR,EAAOvD,KAAK8D,0BAIhB,IAHI9D,KAAKY,OAAS3B,EAAGoF,KAAqB,sBAAdd,EAAK3C,MAAiCM,EAAQoD,wBACxEtE,KAAK2D,aAEA3D,KAAKiE,IAAIhF,EAAGoF,MAAM,CACvB,IAAIE,EAAUvE,KAAKmE,YAAYlB,EAAUc,GACzCQ,EAAQ5D,OAAS4C,EACjBgB,EAAQxD,SAAWf,KAAKsD,sBACxBC,EAAOvD,KAAK6D,WAAWU,EAAS,sBAClC,CACA,OAAOhB,CACT,CAIAiB,0BACE,OAAQxE,KAAKY,MACb,KAAK3B,EAAGwF,OACN,IAAIlB,EAAOvD,KAAK0E,+BAGhB,MAF6B,uBAAzBnB,EAAKoB,WAAW/D,MAClBZ,KAAK4B,MAAM2B,EAAK1B,MAAO,+DAClB0B,EAET,KAAKpC,EAAIvB,YACT,KAAKX,EAAG4D,OACN,OAAO7C,KAAK4E,gBAEd,QACE5E,KAAK4B,MAAM5B,KAAK6B,MAAO,iEAE3B,CAMAgD,2BACE,IAAItB,EAAOvD,KAAKmE,YAAYnE,KAAK8E,WAAY9E,KAAK+E,eAClD,OAAO/E,KAAKgF,aAAazB,EAAM,qBAAsBvD,KAAK6B,MAAO7B,KAAK+D,SACxE,CAIAW,+BACE,IAAInB,EAAOvD,KAAKwD,YAMhB,OALAxD,KAAK4D,OACLL,EAAKoB,WAAa3E,KAAKY,OAAS3B,EAAGgG,OAC/BjF,KAAK6E,2BACL7E,KAAKkF,kBACTlF,KAAKmF,OAAOlG,EAAGgG,QACRjF,KAAK6D,WAAWN,EAAM,yBAC/B,CAIA6B,qBACE,IAAI7B,EAAOvD,KAAKwD,YAChB,OAAIxD,KAAKiE,IAAIhF,EAAGwF,SACdzE,KAAKmF,OAAOlG,EAAGoG,UACf9B,EAAK+B,SAAWtF,KAAKuF,mBACrBvF,KAAKmF,OAAOlG,EAAGgG,QACRjF,KAAK6D,WAAWN,EAAM,wBAE/BA,EAAK1C,KAAOb,KAAK8D,0BACjBP,EAAKE,MAAQzD,KAAKiE,IAAIhF,EAAGuG,IAAMxF,KAAKwE,0BAA4B,KACzDxE,KAAK6D,WAAWN,EAAM,gBAC/B,CAIAkC,0BAA0BxC,EAAUc,GAClC,IAAIR,EAAOvD,KAAKmE,YAAYlB,EAAUc,GACtCR,EAAKmC,WAAa,GAClB,IAAIC,EAAW3F,KAAKoE,uBAEpB,IADIuB,IAAUpC,EAAK1C,KAAO8E,GACnB3F,KAAKY,OAAS3B,EAAGsB,OAASP,KAAKY,OAASO,EAAIrB,WACjDyD,EAAKmC,WAAWxF,KAAKF,KAAKoF,sBAG5B,OAFA7B,EAAKqC,YAAc5F,KAAKiE,IAAIhF,EAAGsB,OAC/BP,KAAKmF,OAAOhE,EAAIrB,WACTE,KAAK6D,WAAWN,EAAMoC,EAAW,oBAAsB,qBAChE,CAIAE,0BAA0B5C,EAAUc,GAClC,IAAIR,EAAOvD,KAAKmE,YAAYlB,EAAUc,GAClC4B,EAAW3F,KAAKoE,uBAGpB,OAFIuB,IAAUpC,EAAK1C,KAAO8E,GAC1B3F,KAAKmF,OAAOhE,EAAIrB,WACTE,KAAK6D,WAAWN,EAAMoC,EAAW,oBAAsB,qBAChE,CAKAG,mBAAmB7C,EAAUc,GAC3B,IAAIR,EAAOvD,KAAKmE,YAAYlB,EAAUc,GAClCgC,EAAW,GACXC,EAAiBhG,KAAKyF,0BAA0BxC,EAAUc,GAC1DkC,EAAiB,KAErB,IAAKD,EAAeJ,YAAa,CAC/BM,EAAU,OACR,OAAQlG,KAAKY,MACb,KAAKO,EAAIvB,YAGP,GAFAqD,EAAWjD,KAAK6B,MAAOkC,EAAW/D,KAAK+D,SACvC/D,KAAK4D,OACD5D,KAAKiE,IAAIhF,EAAGsB,OAAQ,CACtB0F,EAAiBjG,KAAK6F,0BAA0B5C,EAAUc,GAC1D,MAAMmC,CACR,CACAH,EAAS7F,KAAKF,KAAK8F,mBAAmB7C,EAAUc,IAChD,MAEF,KAAK5C,EAAIzB,QACPqG,EAAS7F,KAAKF,KAAK4E,iBACnB,MAEF,KAAK3F,EAAGwF,OACNsB,EAAS7F,KAAKF,KAAK0E,gCACnB,MAEF,QACE1E,KAAK2D,aAGLjD,EAAoBuF,EAAepF,QAAUH,EAAoBsF,EAAenF,OAClFb,KAAK4B,MACHqE,EAAepE,MACf,+CAAiDnB,EAAoBsF,EAAenF,MAAQ,IAElG,CACA,IAAIsF,EAAoBH,EAAenF,KAAO,UAAY,WAQ1D,OANA0C,EAAK,UAAY4C,GAAqBH,EACtCzC,EAAK,UAAY4C,GAAqBF,EACtC1C,EAAKwC,SAAWA,EACZ/F,KAAKY,OAAS3B,EAAGmH,YAA6B,MAAfpG,KAAKyD,OACtCzD,KAAK4B,MAAM5B,KAAK6B,MAAO,6DAElB7B,KAAK6D,WAAWN,EAAM,MAAQ4C,EACvC,CAIAE,gBACE,IAAI9C,EAAOvD,KAAKsG,aAAatG,KAAKyD,OAElC,OADAF,EAAK3C,KAAO,UACL2C,CACT,CAIAgD,mBACE,IAAItD,EAAWjD,KAAK6B,MAAOkC,EAAW/D,KAAK+D,SAE3C,OADA/D,KAAK4D,OACE5D,KAAK8F,mBAAmB7C,EAAUc,EAC3C,CAEAa,cAAc4B,GACZ,OAAIxG,KAAKY,OAASO,EAAIzB,QACbM,KAAKqG,gBACLrG,KAAKY,OAASO,EAAIvB,YAClBI,KAAKuG,mBAELE,MAAM7B,cAAc4B,EAC/B,CAEAE,UAAUC,GACR,IAAI1G,EAAUD,KAAKQ,aAEnB,GAAIP,IAAYV,EAAS,OAAOS,KAAKuB,gBAErC,GAAItB,IAAYZ,GAAWY,IAAYX,EAAS,CAC9C,GAAI+B,EAAkBsF,GAAO,OAAO3G,KAAKqD,eAEzC,GAAY,IAARsD,EAEF,QADE3G,KAAKyB,IACAzB,KAAKgC,YAAYb,EAAIrB,WAG9B,IAAc,KAAT6G,GAAwB,KAATA,IAAgB1G,GAAWZ,EAC7C,OAAOW,KAAK2C,eAAegE,EAC/B,CAEA,OAAa,KAATA,GAAe3G,KAAKG,aAAuD,KAAxCH,KAAK0B,MAAMK,WAAW/B,KAAKyB,IAAM,MACpEzB,KAAKyB,IACAzB,KAAKgC,YAAYb,EAAIvB,cAEvB6G,MAAMC,UAAUC,EACzB,CAEA5G,cAAcK,GACZ,GAAIJ,KAAKY,MAAQ3B,EAAGwF,OAAQ,CAC1B,IAAIjE,EAAaR,KAAKQ,aAClBA,GAAcnB,EAASW,KAAKC,QAAQC,KAAKV,EAAYoH,QAChDpG,GAAcjB,EAASS,KAAKC,QAAQC,KAAKV,EAAYqH,QACzDJ,MAAM1G,cAAcK,GACzBJ,KAAKG,aAAc,CACrB,KAAO,IAAIH,KAAKY,OAAS3B,EAAGsB,OAASH,IAAae,EAAIvB,YAKpD,OAAO6G,MAAM1G,cAAcK,GAJ3BJ,KAAKC,QAAQ0B,QAAU,EACvB3B,KAAKC,QAAQC,KAAKZ,GAClBU,KAAKG,aAAc,CAGrB,CACF,EAEJ,CA5ZW2G,CAAO,CACZ9C,iBAA6C,IAA5B9C,EAAQ8C,gBACzBM,yBAA0BpD,EAAQoD,wBACjCxF,EACL,CACF,EAIAiI,OAAOC,eAAehG,EAAOC,QAAS,WAAY,CAChDjC,IAAK,WACH,OAAOJ,EAAa,EAAQ,OAAUM,QACxC,EACA+H,cAAc,EACdC,YAAY,sBCzFdlG,EAAOC,QAAU,CACfkG,KAAM,IACNC,IAAK,IACLC,KAAM,IACNC,GAAI,IACJC,GAAI,IACJC,KAAM,IACNC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,OAAQ,IACRC,IAAK,IACLC,OAAQ,IACRC,KAAM,IACNC,IAAK,IACLC,KAAM,IACNC,KAAM,IACNC,MAAO,IACPC,IAAK,IACLC,IAAK,IACLC,IAAK,IACLC,KAAM,IACNC,IAAK,IACLC,OAAQ,IACRC,KAAM,IACNC,KAAM,IACNC,MAAO,IACPC,MAAO,IACPC,KAAM,IACNC,OAAQ,IACRC,MAAO,IACPC,KAAM,IACNC,KAAM,IACNC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,OAAQ,IACRC,KAAM,IACNC,MAAO,IACPC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,KAAM,IACNC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,KAAM,IACNC,IAAK,IACLC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,OAAQ,IACRC,KAAM,IACNC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,KAAM,IACNC,OAAQ,IACRC,MAAO,IACPC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,OAAQ,IACRC,KAAM,IACNC,MAAO,IACPC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,KAAM,IACNC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,KAAM,IACNC,IAAK,IACLC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,OAAQ,IACRC,KAAM,IACNC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,KAAM,IACNC,OAAQ,IACRC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,MAAO,IACPC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,MAAO,IACPC,QAAS,IACTC,KAAM,IACNC,IAAK,IACLC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,OAAQ,IACRC,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,QAAS,IACTC,GAAI,IACJC,IAAK,IACLC,MAAO,IACPC,IAAK,IACLC,QAAS,IACTC,IAAK,IACLC,IAAK,IACLC,IAAK,IACLC,MAAO,IACPC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,MAAO,IACPC,QAAS,IACTC,KAAM,IACNC,IAAK,IACLC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,OAAQ,IACRC,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,QAAS,IACTC,GAAI,IACJC,IAAK,IACLC,OAAQ,IACRC,MAAO,IACPC,IAAK,IACLC,QAAS,IACTC,IAAK,IACLC,IAAK,IACLC,IAAK,IACLC,MAAO,IACPC,SAAU,IACVC,MAAO,IACPC,IAAK,IACLC,KAAM,IACNC,KAAM,IACNC,OAAQ,IACRC,KAAM,IACNC,IAAK,IACLC,IAAK,IACLC,IAAK,IACLC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,KAAM,IACNC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,OAAQ,IACRC,KAAM,IACNC,MAAO,IACPC,QAAS,IACTC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,MAAO,IACPC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,OAAQ,IACRC,KAAM,IACNC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,GAAI,IACJC,KAAM,IACNC,IAAK,IACLC,MAAO,IACPC,OAAQ,IACRC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,IAAK,IACLC,IAAK,IACLC,GAAI,IACJC,IAAK,IACLC,IAAK,IACL,IAAO,IACPC,OAAQ,IACRC,IAAK,IACLC,KAAM,IACNC,MAAO,IACPC,GAAI,IACJC,MAAO,IACPC,GAAI,IACJC,GAAI,IACJC,IAAK,IACLC,IAAK,IACLC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,MAAO,IACPC,OAAQ,IACRC,KAAM,IACNC,KAAM,IACNC,MAAO,IACPC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,KAAM,IACNC,KAAM,IACNC,IAAK,IACLC,OAAQ,IACRC,MAAO,IACPC,OAAQ,IACRC,MAAO,oCC3PT,IAAIC,EAAShQ,OAAOiQ,UAAUC,eAC1BC,EAAQnQ,OAAOiQ,UAAUG,SACzBnQ,EAAiBD,OAAOC,eACxBoQ,EAAOrQ,OAAOsQ,yBAEdC,EAAU,SAAiBC,GAC9B,MAA6B,mBAAlBC,MAAMF,QACTE,MAAMF,QAAQC,GAGK,mBAApBL,EAAMO,KAAKF,EACnB,EAEIG,EAAgB,SAAuBC,GAC1C,IAAKA,GAA2B,oBAApBT,EAAMO,KAAKE,GACtB,OAAO,EAGR,IASIC,EATAC,EAAoBd,EAAOU,KAAKE,EAAK,eACrCG,EAAmBH,EAAII,aAAeJ,EAAII,YAAYf,WAAaD,EAAOU,KAAKE,EAAII,YAAYf,UAAW,iBAE9G,GAAIW,EAAII,cAAgBF,IAAsBC,EAC7C,OAAO,EAMR,IAAKF,KAAOD,GAEZ,YAAsB,IAARC,GAAuBb,EAAOU,KAAKE,EAAKC,EACvD,EAGII,EAAc,SAAqBC,EAAQ/W,GAC1C8F,GAAmC,cAAjB9F,EAAQL,KAC7BmG,EAAeiR,EAAQ/W,EAAQL,KAAM,CACpCqG,YAAY,EACZD,cAAc,EACdxD,MAAOvC,EAAQgX,SACfC,UAAU,IAGXF,EAAO/W,EAAQL,MAAQK,EAAQgX,QAEjC,EAGIE,EAAc,SAAqBT,EAAK9W,GAC3C,GAAa,cAATA,EAAsB,CACzB,IAAKkW,EAAOU,KAAKE,EAAK9W,GACrB,OACM,GAAIuW,EAGV,OAAOA,EAAKO,EAAK9W,GAAM4C,KAEzB,CAEA,OAAOkU,EAAI9W,EACZ,EAEAG,EAAOC,QAAU,SAASoX,IACzB,IAAInX,EAASL,EAAMyX,EAAKrQ,EAAMsQ,EAAaC,EACvCP,EAASQ,UAAU,GACnBC,EAAI,EACJ/W,EAAS8W,UAAU9W,OACnBgX,GAAO,EAaX,IAVsB,kBAAXV,IACVU,EAAOV,EACPA,EAASQ,UAAU,IAAM,CAAC,EAE1BC,EAAI,IAES,MAAVT,GAAqC,iBAAXA,GAAyC,mBAAXA,KAC3DA,EAAS,CAAC,GAGJS,EAAI/W,IAAU+W,EAGpB,GAAe,OAFfxX,EAAUuX,UAAUC,IAInB,IAAK7X,KAAQK,EACZoX,EAAMF,EAAYH,EAAQpX,GAItBoX,KAHJhQ,EAAOmQ,EAAYlX,EAASL,MAKvB8X,GAAQ1Q,IAASyP,EAAczP,KAAUsQ,EAAcjB,EAAQrP,MAC9DsQ,GACHA,GAAc,EACdC,EAAQF,GAAOhB,EAAQgB,GAAOA,EAAM,IAEpCE,EAAQF,GAAOZ,EAAcY,GAAOA,EAAM,CAAC,EAI5CN,EAAYC,EAAQ,CAAEpX,KAAMA,EAAMqX,SAAUG,EAAOM,EAAMH,EAAOvQ,WAGtC,IAATA,GACjB+P,EAAYC,EAAQ,CAAEpX,KAAMA,EAAMqX,SAAUjQ,KAQjD,OAAOgQ,CACR,mDCtGA,IARaW,IAAiC,IAAhC,SAAC7S,GAAyB,EACtC,OACE8S,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,uDACZ/S,EACG,mDCqBV,IArBgB6S,IAA6E,IAA5E,MAACG,EAAK,SAAEC,EAAQ,YAAEC,EAAW,UAAEH,EAAS,SAAE/S,GAA4B,EACrF,OACE8S,EAAAA,cAAAA,MAAAA,CAAKC,UAAW,iCAAmCA,GAC/CE,EACEH,EAAAA,cAAAA,IAAAA,CAAGC,UAAU,mDAAmDE,GAChE,GAEJH,EAAAA,cAAAA,IAAAA,CAAGC,UAAU,qCACVC,GAEHF,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,oCACXG,EACEJ,EAAAA,cAAAA,IAAAA,CAAGC,UAAU,iEAAiEG,GAC9E,GAEHlT,GAEC,4DCYV,IAzBoB6S,IAAiE,IAAhE,MAAC7F,EAAK,QAAEmG,EAAO,QAAEC,EAAO,SAAEpT,GAAgC,EAC7E,OACE8S,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,mCACX/F,EACI8F,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,0CAA0C/F,GACzD,GAEN8F,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,QACbD,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,6DACbD,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,4CACbD,EAAAA,cAACO,EAAAA,IAAS,CAACC,KAAM,KACjBR,EAAAA,cAACS,EAAAA,IAAU,CAACD,KAAM,OAGtBR,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,2FACZ/S,IAGL8S,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,0DACZI,EAAQ,IAAEC,EAAO,KAAQA,EAAO,IAAM,IAErC,6wBCxBV,MAYMI,EAAWC,IAAqC,IAApC,SAACzT,GAA6B,EAC9C,MAAO0T,EAAcC,GAAmBb,EAAAA,SAAe,GAKvD,OACEA,EAAAA,cAACc,EAAAA,EAAI,KACHd,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,QACbD,EAAAA,cAAAA,SAAAA,CAAQe,QANQ,IAAMF,EAAiC,IAAjBD,EAAqB1T,EAASpE,OAAS,EAAI8X,EAAe,GAMhEX,UAAU,iBACxCD,EAAAA,cAACgB,EAAAA,IAAS,CAACR,KAAM,MAEnBR,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,4BACbD,EAAAA,cAAAA,MAAAA,CACEC,UAAU,wCACVgB,MAAO,CACLC,UAAU,eAA+B,IAAfN,EAAkB,OAI5C1T,EAASiU,KAAI,CAACC,EAAOC,IAEjBrB,EAAAA,cAAAA,MAAAA,CAAKjB,IAAKsC,EAAOpB,UAAU,wBACxBmB,MAMbpB,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,yCAET/S,EAASiU,KAAI,CAACG,EAAGD,KACf,MAAMJ,EAAQI,IAAUT,EACpB,0BACA,0BACJ,OAAOZ,EAAAA,cAAAA,SAAAA,CACLjB,IAAKsC,EACLN,QAAS,IAAMF,EAAgBQ,GAC/BE,SAAUF,IAAUT,EACpBX,UAAS,4BAA8BgB,GACvC,MAKVjB,EAAAA,cAAAA,SAAAA,CAAQe,QAzCI,IAAMF,EAAgBD,IAAiB1T,EAASpE,OAAS,EAAI,EAAI8X,EAAe,GAyChEX,UAAU,iBACpCD,EAAAA,cAACwB,EAAAA,IAAU,CAAChB,KAAM,OAGjB,EAIXE,EAASe,KAjEI1B,IAAiC,IAAhC,SAAC7S,GAAyB,EACtC,OACE8S,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,UACZ/S,EACG,EA+DV,QC9EO,IAAKwU,GAGX,SAHWA,GAAAA,EAAAA,EAAqB,eAArBA,EAAAA,EAAqB,iBAGhC,CAHWA,IAAAA,EAAqB,KCUjC,MAAMC,EAAW5B,IAA4C,IAA3C,MAACG,EAAK,SAAEhT,GAA6B,EACrD,OACE8S,EAAAA,cAACc,EAAAA,EAAI,KACHd,EAAAA,cAAAA,IAAAA,CAAGC,UAAU,qCACVC,GAEHF,EAAAA,cAAAA,MAAAA,KACG9S,GAEE,EA4BXyU,EAASF,KAlBId,IAA0D,IAAzD,MAACzG,EAAK,iBAAE0H,EAAgB,SAAE1U,GAAyB,EAC/D,OACE8S,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,2BACX2B,IAAqBF,EAAsBG,KACvC7B,EAAAA,cAAAA,MAAAA,KAAM9F,GACN,GAEN8F,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,sCACZ/S,GAED0U,IAAqBF,EAAsBI,MACvC9B,EAAAA,cAAAA,MAAAA,KAAM9F,GACN,GAEF,EAMV,2BC/BA,MAXe6F,IAAyC,IAAxC,MAACgC,EAAK,QAAEhB,GAA0B,EAChD,OACEf,EAAAA,cAAAA,SAAAA,CACEe,QAASA,EACTd,UAAU,sIAET8B,EACM,ECPN,SAASC,EAAKC,GACnB,GAAIA,EACF,MAAMA,CAEV,yBCXe,SAASpD,EAAcjU,GACrC,GAAqB,iBAAVA,GAAgC,OAAVA,EAChC,OAAO,EAGR,MAAMuT,EAAYjQ,OAAOgU,eAAetX,GACxC,QAAsB,OAAduT,GAAsBA,IAAcjQ,OAAOiQ,WAAkD,OAArCjQ,OAAOgU,eAAe/D,IAA0BgE,OAAOC,eAAexX,GAAYuX,OAAOE,YAAYzX,EACtK,CCUO,SAAS0X,IAEd,MAAMC,EAAM,GAENC,EAAW,CAACC,IAKlB,YAAgBC,GACd,IAAIC,GAAmB,EAEvB,MAAMC,EAAWF,EAAOjb,MAExB,GAAwB,mBAAbmb,EACT,MAAM,IAAIC,UAAU,2CAA6CD,IAWnE,SAAS7X,EAAKkX,KAAUa,GACtB,MAAMC,EAAKR,IAAMI,GACjB,IAAItB,GAAS,EAEb,GAAIY,EACFW,EAASX,OADX,CAMA,OAASZ,EAAQqB,EAAO5Z,QACA,OAAlBga,EAAOzB,SAAqC2B,IAAlBF,EAAOzB,KACnCyB,EAAOzB,GAASqB,EAAOrB,IAK3BqB,EAASI,EAGLC,EA6BH,SAAcE,EAAYL,GAE/B,IAAIM,EAEJ,OAAOC,EAQP,SAASA,KAAWC,GAClB,MAAMC,EAAoBJ,EAAWna,OAASsa,EAAWta,OAEzD,IAAIwa,EAEAD,GACFD,EAAW/b,KAAKkc,GAGlB,IACED,EAASL,EAAWO,MAAMrc,KAAMic,EAClC,CAAE,MAAOnB,GAOP,GAAIoB,GAAqBH,EACvB,MAPqC,EAUvC,OAAOK,EAVgC,EAWzC,CAEKF,IACCC,aAAkBG,QACpBH,EAAOI,KAAKA,EAAMH,GACTD,aAAkBK,MAC3BJ,EAAKD,GAELI,EAAKJ,GAGX,CAMA,SAASC,EAAKtB,KAAUa,GACjBI,IACHA,GAAS,EACTN,EAASX,KAAUa,GAEvB,CAOA,SAASY,EAAK9Y,GACZ2Y,EAAK,KAAM3Y,EACb,CACF,CA/FQgZ,CAAKb,EAAIhY,EAAT6Y,IAAkBd,GAElBF,EAAS,QAASE,EAhBpB,CAkBF,CAjCA/X,CAAK,QAAS2X,EAkChB,EAhDuBmB,IAmDvB,SAAaC,GACX,GAA0B,mBAAfA,EACT,MAAM,IAAIjB,UACR,+CAAiDiB,GAKrD,OADAvB,EAAIlb,KAAKyc,GACFtB,CACT,GA1DA,OAAOA,CA2DT,CC9CO,SAASuB,EAAkBnZ,GAEhC,OAAKA,GAA0B,iBAAVA,EAKjB,aAAcA,GAAS,SAAUA,EAC5BoZ,EAASpZ,EAAMoZ,UAIpB,UAAWpZ,GAAS,QAASA,EACxBoZ,EAASpZ,GAId,SAAUA,GAAS,WAAYA,EAC1BqZ,EAAMrZ,GAIR,GAnBE,EAoBX,CAMA,SAASqZ,EAAMA,GACb,OAAO5C,EAAM4C,GAASA,EAAMC,MAAQ,IAAM7C,EAAM4C,GAASA,EAAME,OACjE,CAMA,SAASH,EAASpb,GAChB,OAAOqb,EAAMrb,GAAOA,EAAII,OAAS,IAAMib,EAAMrb,GAAOA,EAAIwb,IAC1D,CAMA,SAAS/C,EAAMzW,GACb,OAAOA,GAA0B,iBAAVA,EAAqBA,EAAQ,CACtD,CCvEO,MAAMyZ,UAAqBV,MAmBhCzE,YAAYoF,EAAQC,EAAOC,GAEzB,MAAMC,EAAQ,CAAC,KAAM,MAErB,IAAIT,EAAW,CAEbhb,MAAO,CAACkb,KAAM,KAAMC,OAAQ,MAE5BC,IAAK,CAACF,KAAM,KAAMC,OAAQ,OAU5B,GAPAvW,QAEqB,iBAAV2W,IACTC,EAASD,EACTA,OAAQvB,GAGY,iBAAXwB,EAAqB,CAC9B,MAAMnD,EAAQmD,EAAOE,QAAQ,MAEd,IAAXrD,EACFoD,EAAM,GAAKD,GAEXC,EAAM,GAAKD,EAAOnb,MAAM,EAAGgY,GAC3BoD,EAAM,GAAKD,EAAOnb,MAAMgY,EAAQ,GAEpC,CAEIkD,IAEE,SAAUA,GAAS,aAAcA,EAC/BA,EAAMP,WAGRA,EAAWO,EAAMP,UAIZ,UAAWO,GAAS,QAASA,EAGpCP,EAAWO,GAGJ,SAAUA,GAAS,WAAYA,KAEtCP,EAAShb,MAAQub,IAWrBpd,KAAKa,KAAO+b,EAAkBQ,IAAU,MAOxCpd,KAAKwd,QAA4B,iBAAXL,EAAsBA,EAAOK,QAAUL,EAU7Dnd,KAAKyd,MAAQ,GAES,iBAAXN,GAAuBA,EAAOM,QACvCzd,KAAKyd,MAAQN,EAAOM,OAUtBzd,KAAKmd,OAASnd,KAAKwd,QAYnBxd,KAAK0d,MAOL1d,KAAK+c,KAAOF,EAAShb,MAAMkb,KAO3B/c,KAAKgd,OAASH,EAAShb,MAAMmb,OAO7Bhd,KAAK6c,SAAWA,EAOhB7c,KAAK2d,OAASL,EAAM,GAOpBtd,KAAK4d,OAASN,EAAM,GAOpBtd,KAAK6d,KAYL7d,KAAK8d,OAOL9d,KAAK+d,SAUL/d,KAAKge,IAOLhe,KAAKie,IAEP,EAGFf,EAAalG,UAAU6G,KAAO,GAC9BX,EAAalG,UAAUnW,KAAO,GAC9Bqc,EAAalG,UAAUmG,OAAS,GAChCD,EAAalG,UAAUwG,QAAU,GACjCN,EAAalG,UAAUyG,MAAQ,GAC/BP,EAAalG,UAAU0G,MAAQ,KAC/BR,EAAalG,UAAUgG,OAAS,KAChCE,EAAalG,UAAU+F,KAAO,KAC9BG,EAAalG,UAAU2G,OAAS,KAChCT,EAAalG,UAAU4G,OAAS,KAChCV,EAAalG,UAAU6F,SAAW,KC7K3B,MAAMqB,EAAO,CAACC,SAcrB,SAAkBD,EAAME,GACtB,QAAYvC,IAARuC,GAAoC,iBAARA,EAC9B,MAAM,IAAI1C,UAAU,mCAGtB2C,EAAWH,GACX,IAIII,EAJAzc,EAAQ,EACRob,GAAO,EACP/C,EAAQgE,EAAKvc,OAIjB,QAAYka,IAARuC,GAAoC,IAAfA,EAAIzc,QAAgByc,EAAIzc,OAASuc,EAAKvc,OAAQ,CACrE,KAAOuY,KACL,GAA+B,KAA3BgE,EAAKnc,WAAWmY,IAGlB,GAAIoE,EAAc,CAChBzc,EAAQqY,EAAQ,EAChB,KACF,OACS+C,EAAM,IAGfqB,GAAe,EACfrB,EAAM/C,EAAQ,GAIlB,OAAO+C,EAAM,EAAI,GAAKiB,EAAKhc,MAAML,EAAOob,EAC1C,CAEA,GAAImB,IAAQF,EACV,MAAO,GAGT,IAAIK,GAAoB,EACpBC,EAAWJ,EAAIzc,OAAS,EAE5B,KAAOuY,KACL,GAA+B,KAA3BgE,EAAKnc,WAAWmY,IAGlB,GAAIoE,EAAc,CAChBzc,EAAQqY,EAAQ,EAChB,KACF,OAEIqE,EAAmB,IAGrBD,GAAe,EACfC,EAAmBrE,EAAQ,GAGzBsE,GAAY,IAEVN,EAAKnc,WAAWmY,KAAWkE,EAAIrc,WAAWyc,KACxCA,EAAW,IAGbvB,EAAM/C,IAKRsE,GAAY,EACZvB,EAAMsB,IAMV1c,IAAUob,EACZA,EAAMsB,EACGtB,EAAM,IACfA,EAAMiB,EAAKvc,QAGb,OAAOuc,EAAKhc,MAAML,EAAOob,EAC3B,EA9F+BwB,QAwG/B,SAAiBP,GAGf,GAFAG,EAAWH,GAES,IAAhBA,EAAKvc,OACP,MAAO,IAGT,IAGI+c,EAHAzB,GAAO,EACP/C,EAAQgE,EAAKvc,OAKjB,OAASuY,GACP,GAA+B,KAA3BgE,EAAKnc,WAAWmY,IAClB,GAAIwE,EAAgB,CAClBzB,EAAM/C,EACN,KACF,OACUwE,IAEVA,GAAiB,GAIrB,OAAOzB,EAAM,EACc,KAAvBiB,EAAKnc,WAAW,GACd,IACA,IACM,IAARkb,GAAoC,KAAvBiB,EAAKnc,WAAW,GAC7B,KACAmc,EAAKhc,MAAM,EAAG+a,EACpB,EAxIwC0B,QAkJxC,SAAiBT,GACfG,EAAWH,GAEX,IASIQ,EATAxE,EAAQgE,EAAKvc,OAEbsb,GAAO,EACP2B,EAAY,EACZC,GAAY,EAGZC,EAAc,EAIlB,KAAO5E,KAAS,CACd,MAAMvT,EAAOuX,EAAKnc,WAAWmY,GAE7B,GAAa,KAATvT,EAWAsW,EAAM,IAGRyB,GAAiB,EACjBzB,EAAM/C,EAAQ,GAGH,KAATvT,EAEEkY,EAAW,EACbA,EAAW3E,EACc,IAAhB4E,IACTA,EAAc,GAEPD,GAAY,IAGrBC,GAAe,QAzBf,GAAIJ,EAAgB,CAClBE,EAAY1E,EAAQ,EACpB,KACF,CAwBJ,CAEA,GACE2E,EAAW,GACX5B,EAAM,GAEU,IAAhB6B,GAEiB,IAAhBA,GAAqBD,IAAa5B,EAAM,GAAK4B,IAAaD,EAAY,EAEvE,MAAO,GAGT,OAAOV,EAAKhc,MAAM2c,EAAU5B,EAC9B,EA/MiD8B,KAyNjD,YAAiBC,GACf,IAEIC,EAFA/E,GAAS,EAIb,OAASA,EAAQ8E,EAASrd,QACxB0c,EAAWW,EAAS9E,IAEhB8E,EAAS9E,KACX+E,OACapD,IAAXoD,EAAuBD,EAAS9E,GAAS+E,EAAS,IAAMD,EAAS9E,IAIvE,YAAkB2B,IAAXoD,EAAuB,IAahC,SAAmBf,GACjBG,EAAWH,GAEX,MAAMgB,EAAkC,KAAvBhB,EAAKnc,WAAW,GAGjC,IAAI0B,EAuBN,SAAyBya,EAAMiB,GAC7B,IAMIxY,EAEAyY,EARAjD,EAAS,GACTkD,EAAoB,EACpBC,GAAa,EACbC,EAAO,EACPrF,GAAS,EAMb,OAASA,GAASgE,EAAKvc,QAAQ,CAC7B,GAAIuY,EAAQgE,EAAKvc,OACfgF,EAAOuX,EAAKnc,WAAWmY,OAClB,IAAa,KAATvT,EACT,MAEAA,EAAO,EACT,CAEA,GAAa,KAATA,EAAuB,CACzB,GAAI2Y,IAAcpF,EAAQ,GAAc,IAATqF,QAExB,GAAID,IAAcpF,EAAQ,GAAc,IAATqF,EAAY,CAChD,GACEpD,EAAOxa,OAAS,GACM,IAAtB0d,GACyC,KAAzClD,EAAOpa,WAAWoa,EAAOxa,OAAS,IACO,KAAzCwa,EAAOpa,WAAWoa,EAAOxa,OAAS,GAElC,GAAIwa,EAAOxa,OAAS,GAGlB,GAFAyd,EAAiBjD,EAAOqD,YAAY,KAEhCJ,IAAmBjD,EAAOxa,OAAS,EAAG,CACpCyd,EAAiB,GACnBjD,EAAS,GACTkD,EAAoB,IAEpBlD,EAASA,EAAOja,MAAM,EAAGkd,GACzBC,EAAoBlD,EAAOxa,OAAS,EAAIwa,EAAOqD,YAAY,MAG7DF,EAAYpF,EACZqF,EAAO,EACP,QACF,OACK,GAAIpD,EAAOxa,OAAS,EAAG,CAC5Bwa,EAAS,GACTkD,EAAoB,EACpBC,EAAYpF,EACZqF,EAAO,EACP,QACF,CAGEJ,IACFhD,EAASA,EAAOxa,OAAS,EAAIwa,EAAS,MAAQ,KAC9CkD,EAAoB,EAExB,MACMlD,EAAOxa,OAAS,EAClBwa,GAAU,IAAM+B,EAAKhc,MAAMod,EAAY,EAAGpF,GAE1CiC,EAAS+B,EAAKhc,MAAMod,EAAY,EAAGpF,GAGrCmF,EAAoBnF,EAAQoF,EAAY,EAG1CA,EAAYpF,EACZqF,EAAO,CACT,MAAoB,KAAT5Y,GAAyB4Y,GAAQ,EAC1CA,IAEAA,GAAQ,CAEZ,CAEA,OAAOpD,CACT,CAtGcsD,CAAgBvB,GAAOgB,GAEd,IAAjBzb,EAAM9B,QAAiBud,IACzBzb,EAAQ,KAGNA,EAAM9B,OAAS,GAA0C,KAArCuc,EAAKnc,WAAWmc,EAAKvc,OAAS,KACpD8B,GAAS,KAGX,OAAOyb,EAAW,IAAMzb,EAAQA,CAClC,CA9BsCic,CAAUT,EAChD,EAxOuDU,IAAK,KA0W5D,SAAStB,EAAWH,GAClB,GAAoB,iBAATA,EACT,MAAM,IAAIxC,UACR,mCAAqCkE,KAAKC,UAAU3B,GAG1D,CChaO,MAAM4B,EAAO,CAACC,IAErB,WACE,MAAO,GACT,GCoBO,SAASC,EAAMC,GACpB,OACoB,OAAlBA,GACyB,iBAAlBA,GAEPA,EAAcC,MAEdD,EAAc5C,MAElB,CCxBO,SAAS8C,EAAUjC,GACxB,GAAoB,iBAATA,EACTA,EAAO,IAAIkC,IAAIlC,QACV,IAAK8B,EAAM9B,GAAO,CAEvB,MAAMpD,EAAQ,IAAIY,UAChB,+EACEwC,EACA,KAGJ,MADApD,EAAMnU,KAAO,uBACPmU,CACR,CAEA,GAAsB,UAAlBoD,EAAKmC,SAAsB,CAE7B,MAAMvF,EAAQ,IAAIY,UAAU,kCAE5B,MADAZ,EAAMnU,KAAO,yBACPmU,CACR,CAEA,OAWF,SAA6BkD,GAC3B,GAAqB,KAAjBA,EAAIsC,SAAiB,CAEvB,MAAMxF,EAAQ,IAAIY,UAChB,wDAGF,MADAZ,EAAMnU,KAAO,4BACPmU,CACR,CAEA,MAAMyF,EAAWvC,EAAIuC,SACrB,IAAIrG,GAAS,EAEb,OAASA,EAAQqG,EAAS5e,QACxB,GACiC,KAA/B4e,EAASxe,WAAWmY,IACe,KAAnCqG,EAASxe,WAAWmY,EAAQ,GAC5B,CACA,MAAMsG,EAAQD,EAASxe,WAAWmY,EAAQ,GAC1C,GAAc,KAAVsG,GAAoC,MAAVA,EAAyB,CAErD,MAAM1F,EAAQ,IAAIY,UAChB,uDAGF,MADAZ,EAAMnU,KAAO,4BACPmU,CACR,CACF,CAGF,OAAO2F,mBAAmBF,EAC5B,CA1CSG,CAAoBxC,EAC7B,CCgEA,MAAMyC,EAAQ,CAAC,UAAW,OAAQ,WAAY,OAAQ,UAAW,WAE1D,MAAMC,EAuBX7I,YAAYtU,GAEV,IAAIvC,EAKFA,EAHGuC,EAEuB,iBAAVA,GAoYtB,SAAgBA,GACd,OAAO,EAAWA,EACpB,CAtY4Cod,CAAOpd,GACnC,CAACA,SACFuc,EAAMvc,GACL,CAACya,KAAMza,GAEPA,EANA,CAAC,EAiBbzD,KAAK8gB,KAAO,CAAC,EAOb9gB,KAAK+gB,SAAW,GAShB/gB,KAAKghB,QAAU,GAOfhhB,KAAK+f,IAAMD,EAAKC,MAQhB/f,KAAKyD,MAYLzD,KAAKihB,OAULjhB,KAAKmc,OAULnc,KAAKga,IAIL,IAkBIpF,EAlBAsF,GAAS,EAEb,OAASA,EAAQyG,EAAMhf,QAAQ,CAC7B,MAAMiT,EAAO+L,EAAMzG,GAKjBtF,KAAQ1T,QACU2a,IAAlB3a,EAAQ0T,IACU,OAAlB1T,EAAQ0T,KAGR5U,KAAK4U,GAAiB,YAATA,EAAqB,IAAI1T,EAAQ0T,IAAS1T,EAAQ0T,GAEnE,CAMA,IAAKA,KAAQ1T,EAENyf,EAAMO,SAAStM,KAElB5U,KAAK4U,GAAQ1T,EAAQ0T,GAG3B,CAOIsJ,WACF,OAAOle,KAAKghB,QAAQhhB,KAAKghB,QAAQrf,OAAS,EAC5C,CAWIuc,SAAKA,GACH8B,EAAM9B,KACRA,EAAOiC,EAAUjC,IAGnBiD,EAAejD,EAAM,QAEjBle,KAAKke,OAASA,GAChBle,KAAKghB,QAAQ9gB,KAAKge,EAEtB,CAKIO,cACF,MAA4B,iBAAdze,KAAKke,KAAoBA,EAAKO,QAAQze,KAAKke,WAAQrC,CACnE,CAOI4C,YAAQA,GACV,EAAWze,KAAKme,SAAU,WAC1Bne,KAAKke,KAAOA,EAAKa,KAAKN,GAAW,GAAIze,KAAKme,SAC5C,CAKIA,eACF,MAA4B,iBAAdne,KAAKke,KAAoBA,EAAKC,SAASne,KAAKke,WAAQrC,CACpE,CASIsC,aAASA,GACXgD,EAAehD,EAAU,YACzBiD,EAAWjD,EAAU,YACrBne,KAAKke,KAAOA,EAAKa,KAAK/e,KAAKye,SAAW,GAAIN,EAC5C,CAKIQ,cACF,MAA4B,iBAAd3e,KAAKke,KAAoBA,EAAKS,QAAQ3e,KAAKke,WAAQrC,CACnE,CASI8C,YAAQA,GAIV,GAHAyC,EAAWzC,EAAS,WACpB,EAAW3e,KAAKye,QAAS,WAErBE,EAAS,CACX,GAA8B,KAA1BA,EAAQ5c,WAAW,GACrB,MAAM,IAAIya,MAAM,iCAGlB,GAAImC,EAAQuC,SAAS,IAAK,GACxB,MAAM,IAAI1E,MAAM,yCAEpB,CAEAxc,KAAKke,KAAOA,EAAKa,KAAK/e,KAAKye,QAASze,KAAKqhB,MAAQ1C,GAAW,IAC9D,CAKI0C,WACF,MAA4B,iBAAdrhB,KAAKke,KACfA,EAAKC,SAASne,KAAKke,KAAMle,KAAK2e,cAC9B9C,CACN,CASIwF,SAAKA,GACPF,EAAeE,EAAM,QACrBD,EAAWC,EAAM,QACjBrhB,KAAKke,KAAOA,EAAKa,KAAK/e,KAAKye,SAAW,GAAI4C,GAAQrhB,KAAK2e,SAAW,IACpE,CAWAxH,SAASmK,GACP,OAAQthB,KAAKyD,OAAS,IAAI0T,SAASmK,QAAYzF,EACjD,CAkBA2B,QAAQL,EAAQC,EAAOC,GACrB,MAAMG,EAAU,IAAIN,EAAaC,EAAQC,EAAOC,GAWhD,OATIrd,KAAKke,OACPV,EAAQ3c,KAAOb,KAAKke,KAAO,IAAMV,EAAQ3c,KACzC2c,EAAQK,KAAO7d,KAAKke,MAGtBV,EAAQE,OAAQ,EAEhB1d,KAAK+gB,SAAS7gB,KAAKsd,GAEZA,CACT,CAkBA+D,KAAKpE,EAAQC,EAAOC,GAClB,MAAMG,EAAUxd,KAAKwd,QAAQL,EAAQC,EAAOC,GAI5C,OAFAG,EAAQE,MAAQ,KAETF,CACT,CAsBAgE,KAAKrE,EAAQC,EAAOC,GAClB,MAAMG,EAAUxd,KAAKwd,QAAQL,EAAQC,EAAOC,GAI5C,MAFAG,EAAQE,OAAQ,EAEVF,CACR,EAaF,SAAS4D,EAAWpN,EAAMnT,GACxB,GAAImT,GAAQA,EAAKkN,SAAShD,EAAKyB,KAC7B,MAAM,IAAInD,MACR,IAAM3b,EAAO,uCAAyCqd,EAAKyB,IAAM,IAGvE,CAYA,SAASwB,EAAenN,EAAMnT,GAC5B,IAAKmT,EACH,MAAM,IAAIwI,MAAM,IAAM3b,EAAO,oBAEjC,CAYA,SAAS,EAAWqd,EAAMrd,GACxB,IAAKqd,EACH,MAAM,IAAI1B,MAAM,YAAc3b,EAAO,kCAEzC,CC/dO,MAAM4gB,EAQb,SAASC,IACP,MAAMC,EAAexG,IAEfyG,EAAY,GAElB,IAEIC,EAFA/gB,EAAY,CAAC,EAGbghB,GAAe,EA2BnB,OAvBAC,EAAUjB,KA6CV,SAAclJ,EAAKnU,GACjB,GAAmB,iBAARmU,EAET,OAAyB,IAArBa,UAAU9W,QACZqgB,EAAe,OAAQH,GACvB/gB,EAAU8W,GAAOnU,EACVse,GAIDE,EAAIxK,KAAK3W,EAAW8W,IAAQ9W,EAAU8W,IAAS,KAIzD,GAAIA,EAGF,OAFAoK,EAAe,OAAQH,GACvB/gB,EAAY8W,EACLmK,EAIT,OAAOjhB,CACT,EAlEAihB,EAAUjjB,YAAS+c,EACnBkG,EAAUG,cAAWrG,EAGrBkG,EAAUI,OAiEV,WACE,GAAIN,EACF,OAAOE,EAGT,OAASD,EAAcF,EAAUjgB,QAAQ,CACvC,MAAOygB,KAAalhB,GAAW0gB,EAAUE,GAEzC,IAAmB,IAAf5gB,EAAQ,GACV,UAGiB,IAAfA,EAAQ,KACVA,EAAQ,QAAK2a,GAIf,MAAMwG,EAAcD,EAAS3K,KAAKsK,KAAc7gB,GAErB,mBAAhBmhB,GACTV,EAAajF,IAAI2F,EAErB,CAKA,OAHAR,GAAS,EACTC,EAAcQ,OAAOC,kBAEdR,CACT,EA1FAA,EAAUH,UAAYA,EAEtBG,EAAUrF,IA+FV,SAAajZ,KAAUvC,GAErB,IAAIshB,EAIJ,GAFAR,EAAe,MAAOH,GAElBpe,cAEG,GAAqB,mBAAVA,EAChBgf,EAAUhf,KAAUvC,OACf,IAAqB,iBAAVuC,EAOhB,MAAM,IAAIiY,UAAU,+BAAiCjY,EAAQ,KANzD+T,MAAMF,QAAQ7T,GAChBif,EAAQjf,GAERkf,EAAUlf,EAId,CAEI+e,IACF1hB,EAAU0hB,SAAWzb,OAAO6b,OAAO9hB,EAAU0hB,UAAY,CAAC,EAAGA,IAG/D,OAAOT,EAMP,SAASc,EAAIpf,GACX,GAAqB,mBAAVA,EACTgf,EAAUhf,OACL,IAAqB,iBAAVA,EAQhB,MAAM,IAAIiY,UAAU,+BAAiCjY,EAAQ,KAP7D,GAAI+T,MAAMF,QAAQ7T,GAAQ,CACxB,MAAOqD,KAAW5F,GAAWuC,EAC7Bgf,EAAU3b,KAAW5F,EACvB,MACEyhB,EAAUlf,EAId,CACF,CAMA,SAASkf,EAAUxG,GACjBuG,EAAQvG,EAAO2G,SAEX3G,EAAOqG,WACTA,EAAWzb,OAAO6b,OAAOJ,GAAY,CAAC,EAAGrG,EAAOqG,UAEpD,CAMA,SAASE,EAAQI,GACf,IAAI5I,GAAS,EAEb,GAAI4I,aAEG,KAAItL,MAAMF,QAAQwL,GAMvB,MAAM,IAAIpH,UAAU,oCAAsCoH,EAAU,KALpE,OAAS5I,EAAQ4I,EAAQnhB,QAAQ,CAE/BkhB,EADcC,EAAQ5I,GAExB,CAGF,CACF,CAOA,SAASuI,EAAU3b,EAAQrD,GACzB,IAEIsf,EAFA7I,GAAS,EAIb,OAASA,EAAQ0H,EAAUjgB,QACzB,GAAIigB,EAAU1H,GAAO,KAAOpT,EAAQ,CAClCic,EAAQnB,EAAU1H,GAClB,KACF,CAGE6I,GACE,EAAWA,EAAM,KAAO,EAAWtf,KACrCA,EAAQ4U,GAAO,EAAM0K,EAAM,GAAItf,IAGjCsf,EAAM,GAAKtf,GAGXme,EAAU1hB,KAAK,IAAIuY,WAEvB,CACF,EApMAsJ,EAAUiB,MAuMV,SAAeC,GACblB,EAAUI,SACV,MAAMtE,EAAOqF,EAAMD,GACbnkB,EAASijB,EAAUjjB,OAGzB,GAFAqkB,EAAa,QAASrkB,GAElBskB,EAAQtkB,EAAQ,SAElB,OAAO,IAAIA,EAAOwD,OAAOub,GAAOA,GAAMmF,QAIxC,OAAOlkB,EAAOwD,OAAOub,GAAOA,EAC9B,EAnNAkE,EAAUlC,UAsNV,SAAmBtc,EAAM0f,GACvBlB,EAAUI,SACV,MAAMtE,EAAOqF,EAAMD,GACbf,EAAWH,EAAUG,SAI3B,GAHAmB,EAAe,YAAanB,GAC5BoB,EAAW/f,GAEP6f,EAAQlB,EAAU,WAEpB,OAAO,IAAIA,EAAS3e,EAAMsa,GAAM0F,UAIlC,OAAOrB,EAAS3e,EAAMsa,EACxB,EAlOAkE,EAAUzG,IA0OV,SAAa/X,EAAM0f,EAAKxH,GACtB6H,EAAW/f,GACXwe,EAAUI,SAEL1G,GAA2B,mBAARwH,IACtBxH,EAAWwH,EACXA,OAAMpH,GAGR,IAAKJ,EACH,OAAO,IAAIa,QAAQkH,GAUrB,SAASA,EAASC,EAASC,GAUzB,SAAStH,EAAKtB,EAAO6I,EAAM9F,GACzB8F,EAAOA,GAAQpgB,EACXuX,EACF4I,EAAO5I,GACE2I,EACTA,EAAQE,GAGRlI,EAAS,KAAMkI,EAAM9F,EAEzB,CAlBA8D,EAAarG,IAAI/X,EAAM2f,EAAMD,GAAM7G,EAmBrC,CA5BAoH,EAAS,KAAM/H,EA6BjB,EAnRAsG,EAAU6B,QAsRV,SAAiBrgB,EAAMsa,GAErB,IAAI1B,EAEA0H,EAOJ,OALA9B,EAAUzG,IAAI/X,EAAMsa,EAAMzB,GAE1B0H,EAAW,UAAW,MAAOD,GAGtB1H,EAOP,SAASC,EAAKtB,EAAO6I,GACnB9I,EAAKC,GACLqB,EAASwH,EACTE,GAAW,CACb,CACF,EA3SA9B,EAAUgC,QAkTV,SAAiBd,EAAKxH,GAKpB,GAJAsG,EAAUI,SACVgB,EAAa,UAAWpB,EAAUjjB,QAClCukB,EAAe,UAAWtB,EAAUG,WAE/BzG,EACH,OAAO,IAAIa,QAAQkH,GAUrB,SAASA,EAASC,EAASC,GACzB,MAAM7F,EAAOqF,EAAMD,GA0BnB,SAAS7G,EAAKtB,EAAO+C,GACf/C,IAAU+C,EACZ6F,EAAO5I,GACE2I,EACTA,EAAQ5F,GAGRpC,EAAS,KAAMoC,EAEnB,CAjCAkE,EAAUzG,IAAIyG,EAAUiB,MAAMnF,GAAOA,GAAM,CAAC/C,EAAO6I,EAAM9F,KACvD,IAAI/C,GAAU6I,GAAS9F,EAEhB,CAEL,MAAM1B,EAAS4F,EAAUlC,UAAU8D,EAAM9F,GAErC1B,UAsMY,iBADI1Y,EAnMY0Y,IAoMJ,EAAS1Y,GAnMnCoa,EAAKpa,MAAQ0Y,EAEb0B,EAAK1B,OAASA,GAGhBC,EAAKtB,EAAO+C,EACd,MAdEzB,EAAKtB,GA0Mf,IAA8BrX,CA5LtB,GAkBJ,CA5CA+f,EAAS,KAAM/H,EA6CjB,EAvWAsG,EAAUiC,YA0WV,SAAqBf,GAEnB,IAAIY,EAEJ9B,EAAUI,SACVgB,EAAa,cAAepB,EAAUjjB,QACtCukB,EAAe,cAAetB,EAAUG,UAExC,MAAMrE,EAAOqF,EAAMD,GAMnB,OAJAlB,EAAUgC,QAAQlG,EAAMzB,GAExB0H,EAAW,cAAe,UAAWD,GAE9BhG,EAMP,SAASzB,EAAKtB,GACZ+I,GAAW,EACXhJ,EAAKC,EACP,CACF,EA/XOiH,EAIP,SAASA,IACP,MAAMkC,EAAcvC,IACpB,IAAIxH,GAAS,EAEb,OAASA,EAAQ0H,EAAUjgB,QACzBsiB,EAAYvH,OAAOkF,EAAU1H,IAK/B,OAFA+J,EAAYnD,KAAKzI,GAAO,EAAM,CAAC,EAAGvX,IAE3BmjB,CACT,CAiXF,CA3auBvC,GAAOS,SAExBF,EAAM,CAAC,EAAEhL,eAkbf,SAASmM,EAAQ3f,EAAO5C,GACtB,MACmB,mBAAV4C,GAGPA,EAAMuT,YAeV,SAAcvT,GAEZ,IAAImU,EAEJ,IAAKA,KAAOnU,EACV,GAAIwe,EAAIxK,KAAKhU,EAAOmU,GAClB,OAAO,EAIX,OAAO,CACT,CArBKsM,CAAKzgB,EAAMuT,YAAcnW,KAAQ4C,EAAMuT,UAE5C,CA4BA,SAASmM,EAAatiB,EAAM4C,GAC1B,GAAqB,mBAAVA,EACT,MAAM,IAAIiY,UAAU,WAAa7a,EAAO,qBAE5C,CASA,SAASwiB,EAAexiB,EAAM4C,GAC5B,GAAqB,mBAAVA,EACT,MAAM,IAAIiY,UAAU,WAAa7a,EAAO,uBAE5C,CASA,SAASmhB,EAAenhB,EAAMghB,GAC5B,GAAIA,EACF,MAAM,IAAIrF,MACR,gBACE3b,EACA,mHAGR,CAQA,SAASyiB,EAAW/f,GAGlB,IAAK,EAAWA,IAA8B,iBAAdA,EAAK3C,KACnC,MAAM,IAAI8a,UAAU,uBAAyBnY,EAAO,IAGxD,CAUA,SAASugB,EAAWjjB,EAAMsjB,EAAWN,GACnC,IAAKA,EACH,MAAM,IAAIrH,MACR,IAAM3b,EAAO,0BAA4BsjB,EAAY,YAG3D,CAMA,SAASjB,EAAMzf,GACb,OAOF,SAAyBA,GACvB,OAAO2gB,QACL3gB,GACmB,iBAAVA,GACP,YAAaA,GACb,aAAcA,EAEpB,CAdS4gB,CAAgB5gB,GAASA,EAAQ,IAAImd,EAAMnd,EACpD,yBCvjBO,MCaM6gB,EAAaC,GAAW,YAcxBC,EAAoBD,GAAW,cAuB/BE,GAAaF,GAAW,uBAa9B,SAASG,GAAa/d,GAC3B,OAGW,OAATA,IAAkBA,EAAO,IAAe,MAATA,EAEnC,CAaO,MAAMge,GAAaJ,GAAW,MAoBxBK,GAAgBL,GAAW,cAe3BM,GAAmBN,GAAW,kBAiBpC,SAASO,GAAmBne,GACjC,OAAgB,OAATA,GAAiBA,GAAQ,CAClC,CAWO,SAASoe,GAA0Bpe,GACxC,OAAgB,OAATA,IAAkBA,EAAO,GAAc,KAATA,EACvC,CAiBO,SAASqe,GAAcre,GAC5B,OAAiB,IAAVA,IAAyB,IAAVA,GAAwB,KAATA,CACvC,CAuBO,MAAMse,GAAqBV,GD9LhC,wwCCoNWW,GAAoBX,GAAW,MAQ5C,SAASA,GAAWY,GAClB,OAUA,SAAexe,GACb,OAAgB,OAATA,GAAiBwe,EAAMhiB,KAAKb,OAAOC,aAAaoE,GACzD,CACF,CCnLA,MAAM,GAAM,CAAC,EAAEsQ,eAKFmO,GAAWpK,OAAO,YAKlBqK,GAAOrK,OAAO,QAKdsK,GAAOtK,OAAO,QAuH3B,SAASuK,GAAS9hB,GAChB,OAAI+T,MAAMF,QAAQ7T,GACTA,EAGY,iBAAVA,EACF,CAAC2hB,GAAU3hB,GAGb,CAACA,EACV,CAUA,SAAS+hB,GAAS/hB,GAChB,OAAO2gB,QACL3gB,GACmB,iBAAVA,GACP,SAAUA,GACY,iBAAfA,EAAM7C,MACb6C,EAAM7C,KAAKe,OAAS,EAE1B,CCnJO,SAAS8jB,GAAcC,EAAQxkB,GACpC,MAAMykB,EAASzkB,EAAQykB,QAAU,GAC3BC,EAAS1kB,EAAQ0kB,QAAU,GAC3BC,EAAe9e,OAAO6b,OAAO,CAAC,EAAG1hB,EAAQ2kB,cAEzCC,EAAW,GAEXC,EAAS,GACTC,EAAYH,EAAaG,UACzBC,EAAUJ,EAAaI,QAC7B,IAEIC,EAEAC,EAJAC,GAAU,EAMd,MAAMC,EAActf,OAAO6b,OAAO,CAAC,EAAGiD,EAAc,CAClDG,UAAWF,EACXQ,gBAAgB,IAEdL,IACFI,EAAYJ,QAAUF,GAExB,MAAMQ,EAqOR,SAAiBb,EAAQc,GAEvB,MAAMrK,EAAS,CACb1Y,MAAO,GACPgjB,MAAO,IAET,IAAIvM,GAAS,EACb,OAASA,EAAQwL,EAAO/jB,QAAQ,CAC9B,MAAM+kB,EAAQhB,EAAOxL,GAGrB,GAAiB,UAAbwM,EAAM,IAAkBF,EAAMtF,SAASwF,EAAM,GAAG9lB,MAAO,CACzD,MAAM+lB,EAASD,EAAM,GAAGE,YAAYF,EAAM,IAG1C,KAAOC,EAAOhlB,OAAS,IAAoB,IAAfglB,EAAO,IACjCA,EAAOE,QAET,MAAMpjB,EAAQqjB,GAAgBH,GAC9BxK,EAAOsK,MAAMvmB,KAAK,CAACic,EAAO1Y,MAAM9B,OAAQ+kB,EAAM,GAAG7kB,QACjDsa,EAAO1Y,OAASA,EAChB0Y,EAAOsK,MAAMvmB,KAAK,CAACic,EAAO1Y,MAAM9B,OAAQ+kB,EAAM,GAAGzJ,KACnD,CACF,CACA,OAAOd,CACT,CA9PqB4K,CAAQrB,EAAQ,CACjC,aAEA,kBAEA,yBAEA,yBAGA,wCACA,6CACA,wCACA,6CAEA,iBAEI/H,EAAS4I,EAAW9iB,MACpBA,EAAQkiB,EAAShI,EAASiI,EAC1BoB,EAAoB9lB,EAAQyD,YAAcuP,GAAMyJ,GACtD,GAAIqJ,IAAsB9lB,EAAQ+lB,WAChC,MAAM,IAAI/J,EACR,8BACAgK,EAAwB,GACxB,kEAGJ,IACEhB,EACEhlB,EAAQyD,aAAeqiB,EACnB9lB,EAAQrC,MAAMsoB,kBAAkB1jB,EAAO,EAAG4iB,GAC1CnlB,EAAQrC,MAAMmkB,MAAMvf,EAAO4iB,EACnC,CAAE,MAAOe,GACP,MAAMtM,EAAkCsM,EAClCtK,EAAQoK,EAAwBpM,EAAMrZ,KAC5CqZ,EAAM0C,QAAUlb,OAAOwY,EAAM0C,SAAS6J,QAAQ,gBAAiB,IAG/DvM,EAAMrZ,IAAMqb,EAAMwK,OAClBxM,EAAMyM,IAAM,CACVxK,KAAMD,EAAMC,KACZC,OAAQF,EAAME,OAAS,GAEzBmJ,EAAYrL,EACZsL,EACEtL,EAAM0M,UAAY7B,EAAOhkB,OAASgc,EAAOhc,QAEvB,yBAAlBmZ,EAAM0C,OACV,CACA,GAAI0I,GAAUhlB,EAAQyD,aAAeqiB,EACnC,GAAI9S,GAAMzQ,EAAMvB,MAAMgkB,EAAOjJ,IAAKxZ,EAAM9B,OAASikB,EAAOjkB,SACtDukB,EAAS,CACPtlB,KAAM,UACNiB,MAAO,EACPob,IAAK0I,EAAOhkB,OAASgc,EAAOhc,OAE5B8lB,KAAM,CACJ,CACE7mB,KAAM,sBACN+D,WAAYuhB,EACZrkB,MAAO,EACPob,IAAK0I,EAAOhkB,OAASgc,EAAOhc,SAGhC+lB,WAAY,SACZ5B,SAAU,QAEP,CACL,MAAMhJ,EAAQoK,EAAwBhB,EAAOjJ,KACvCnC,EAEJ,IAAI0B,MAAM,uCAGZ1B,EAAMrZ,IAAMqb,EAAMwK,OAClBxM,EAAMyM,IAAM,CACVxK,KAAMD,EAAMC,KACZC,OAAQF,EAAME,OAAS,GAEzBmJ,EAAYrL,EACZoL,OAASrK,CACX,CAEF,GAAIqK,EAAQ,CA6BV,GA3BAA,EAAOJ,SAAWA,EDxFf,SAAenC,EAAMgE,GAE1B,IAAIC,EAEAC,EAEmB,mBAAZF,EACTC,EAAQD,EACCA,GAA8B,iBAAZA,IACvBA,EAAQC,QAAOA,EAAQD,EAAQC,OAC/BD,EAAQE,QAAOA,EAAQF,EAAQE,QAWrC,SAASC,EAAMvkB,EAAMqU,EAAKsC,EAAO6N,GAK/B,OAJIvC,GAASjiB,KACXykB,EAAMC,YAAc,SAAiB1kB,EAAK3C,KAAQ,KAG7ConB,EAKP,SAASA,IAEP,MAAM7L,EAASyL,EAAQrC,GAASqC,EAAMrkB,EAAMqU,EAAKsC,EAAO6N,IAAY,GAEpE,GAAI5L,EAAO,KAAOkJ,GAChB,OAAOlJ,EAGT,GAAIA,EAAO,KAAOmJ,GAAM,CAEtB,IAAI4C,EAEJ,IAAKA,KAAQ3kB,EACX,GACE,GAAIkU,KAAKlU,EAAM2kB,IACf3kB,EAAK2kB,IACiB,iBAAf3kB,EAAK2kB,IAEH,SAATA,GAES,aAATA,EACA,CACA,MAAMC,EAAeJ,EAAQK,OAAO7kB,GAE9BE,EAAQF,EAAK2kB,GAEnB,GAAI1Q,MAAMF,QAAQ7T,GAAQ,CACxB,MAAM4kB,EAAsC,EAC5C,IAAIC,EAAS,EAEb,KAAOA,GAAU,GAAKA,EAASD,EAAM1mB,QAAQ,CAC3C,MAAM4mB,EAAWF,EAAMC,GAEvB,GAAI9C,GAAS+C,GAAW,CACtB,MAAMC,EAAYV,EAChBS,EACAL,EACAI,EACAH,EAJgBL,GAMlB,GAAIU,EAAU,KAAOnD,GAAM,OAAOmD,EAClCF,EAC0B,iBAAjBE,EAAU,GAAkBA,EAAU,GAAKF,EAAS,CAC/D,MACEA,GAEJ,CACF,MAAO,GAAI9C,GAAS/hB,GAAQ,CAC1B,MAAM+kB,EAAYV,EAAMrkB,EAAOykB,EAAM,KAAMC,EAAzBL,GAClB,GAAIU,EAAU,KAAOnD,GAAM,OAAOmD,CACpC,CACF,CAEJ,CAEA,OAAOX,EAAQtC,GAASsC,EAAMtkB,EAAMqU,EAAKsC,EAAO6N,IAAY5L,CAC9D,CACF,CA3EA2L,CAAMnE,EAAM,KAAM,KAAM,GAAxBmE,EA4EF,CCEIE,CAAM9B,GAAQ,CAACuC,EAAQC,EAAOxO,EAAO6N,KACnC,IAAI9nB,EAEF8nB,EAAQA,EAAQpmB,OAAS,GAEvBiT,EAAO8T,EAIS,4BAAhBD,EAAO7nB,MAAsCX,GAAW2U,IAErC,iBAAVsF,IAETja,EAAUA,EAAQ2U,GAClBA,EAAOsF,GAITja,EAAQ2U,GAAQ6T,EAAO9jB,YAEzBgkB,EAAYF,EAAM,IAIhBjR,MAAMF,QAAQ0O,GAChBA,EAAU9lB,QAAQ4lB,QACb,GAAyB,mBAAdE,EAChB,IAAK,MAAM4C,KAAW9C,EACpBE,EACmB,UAAjB4C,EAAQhoB,KACRgoB,EAAQnlB,MACRmlB,EAAQ/mB,MACR+mB,EAAQ3L,IACR2L,EAAQrB,IAAI1lB,MACZ+mB,EAAQrB,IAAItK,KAIlB,IAAK,MAAM4L,KAAS9C,EAGhB8C,EAAM5L,KAAO0I,EAAOhkB,QACpBknB,EAAMhnB,MAAQ8jB,EAAOhkB,QAAUgc,EAAOhc,SAIxCgnB,EAAYE,GACRrR,MAAMF,QAAQ2O,GAChBA,EAAQ/lB,KAAK2oB,GAKb5C,EAAQ4C,GAGd,CAGA,MAAO,CACL3C,SACApL,MAAOqL,EACPC,WASF,SAASuC,EAAYG,GACnB,MAAMC,EAAa7B,EAAwB4B,EAAYjnB,OACjDmnB,EAAW9B,EAAwB4B,EAAY7L,KAGrD6L,EAAYjnB,MAAQknB,EAAWzB,OAC/BwB,EAAY7L,IAAM+L,EAAS1B,OAC3BwB,EAAYvB,IAAM,CAChB1lB,MAAO,CACLkb,KAAMgM,EAAWhM,KACjBC,OAAQ+L,EAAW/L,OAAS,EAC5BsK,OAAQyB,EAAWzB,QAErBrK,IAAK,CACHF,KAAMiM,EAASjM,KACfC,OAAQgM,EAAShM,OAAS,EAC1BsK,OAAQ0B,EAAS1B,SAGrBwB,EAAYG,MAAQ,CAACH,EAAYjnB,MAAOinB,EAAY7L,IACtD,CASA,SAASiK,EAAwBgC,GAC/B,IAAIC,EAAeD,EAAcvD,EAAOhkB,OACpCwnB,EAAe,EACjBA,EAAe,EACNA,EAAexL,EAAOhc,SAC/BwnB,EAAexL,EAAOhc,QAExB,IAAImb,EAqER,SAAyB2J,EAAO2C,GAC9B,IAAIlP,EAAQ,EACZ,KAAOA,EAAQuM,EAAM9kB,QAAU8kB,EAAMvM,GAAO,IAAMkP,GAChDlP,GAAS,EAIX,GAAc,IAAVA,EACF,OAEF,MAAOmP,EAAcC,GAAgB7C,EAAMvM,EAAQ,GAC7CqP,EAAOH,EAAWC,EACxB,MAAO,CACLtM,KAAMuM,EAAavM,KACnBC,OAAQsM,EAAatM,OAASuM,EAC9BjC,OAAQgC,EAAahC,OAASiC,EAElC,CAtFgBC,CAAgBjD,EAAWE,MAAO0C,GAQ9C,OAPKrM,IACHA,EAAQ,CACNC,KAAM7b,EAAQW,MAAMkb,KACpBC,OAAQ9b,EAAQW,MAAMmb,OACtBsK,OAAQpmB,EAAQW,MAAMylB,SAGnBxK,CACT,CACF,CAMA,SAAS5I,GAAMzQ,GACb,MAAO,QAAQN,KACbM,EAEG4jB,QAAQ,oBAAqB,IAI7BA,QAAQ,4BAA6B,IAE5C,CAsEA,SAASP,GAAgBH,GACvB,IAAIzM,GAAS,EAEb,MAAMiC,EAAS,GAEf,IAAIsN,EACJ,OAASvP,EAAQyM,EAAOhlB,QAAQ,CAC9B,MAAM+nB,EAAQ/C,EAAOzM,GAErB,IAAIzW,EACJ,GAAqB,iBAAVimB,EACTjmB,EAAQimB,OAER,OAAQA,GACN,KAAM,EACJjmB,EAAQ,KACR,MAEF,KAAM,EACJA,EAAQ,KACR,MAEF,KAAM,EACJA,EAAQ,OACR,MAEF,KAAM,EACJA,EAAQ,KACR,MAIF,KAAM,EACJ,GAAIgmB,EAAO,SACXhmB,EAAQ,IACR,MAEF,QAGEA,EAAQnB,OAAOC,aAAamnB,GAGlCD,GAAmB,IAAXC,EACRvN,EAAOjc,KAAKuD,EACd,CACA,OAAO0Y,EAAO4C,KAAK,GACrB,CC9ZO,SAAS4K,GAAmBpmB,GACjC,MAAMqmB,EAAWrmB,GAAQ,CAAC,EACpBgkB,EAAMqC,EAASrC,KAAO,CAAC,EACvB0B,EAAQW,EAASX,OAAS,CAAC,EAAG,GAC9BY,EAActC,EAAI1lB,MACpBioB,GAAkBvC,EAAI1lB,MAAMmb,aAC5BnB,EACEkO,EAAYxC,EAAItK,IAAM6M,GAAkBvC,EAAItK,IAAID,aAAUnB,EAEhE,MAAO,CACLha,MAAO,CAELkb,KAAMwK,EAAI1lB,MAAQioB,GAAkBvC,EAAI1lB,MAAMkb,WAAQlB,EAEtDmB,YAAwBnB,IAAhBgO,OAA4BhO,EAAYgO,EAAc,EAC9DvC,OAAQwC,GAAkBb,EAAM,IAAMW,EAAS/nB,QAEjDob,IAAK,CAEHF,KAAMwK,EAAItK,IAAM6M,GAAkBvC,EAAItK,IAAIF,WAAQlB,EAElDmB,YAAsBnB,IAAdkO,OAA0BlO,EAAYkO,EAAY,EAC1DzC,OAAQwC,GAAkBb,EAAM,IAAMW,EAAS3M,MAGrD,CAOA,SAAS6M,GAAkBrmB,GACzB,MAAwB,iBAAVA,GAAsBA,GAAS,EAAIA,OAAQoY,CAC3D,CCAO,SAASmO,GACdC,EACAC,EACAtpB,EACAupB,EACAC,EACAvrB,EACAgnB,EACAwE,EACAC,EACArD,EACAsD,GAEA,MAAMC,EAAOxqB,KACPyqB,EAAazqB,KAAK0lB,OAAO/jB,OAAS,EACxC,IAEIonB,EAEA2B,EAJArR,EAAO,EAKX,OAYA,SAAe1S,GAMb,OALAsjB,EAAQrC,MAAMhnB,GACdqpB,EAAQrC,MAAMuC,GACdF,EAAQU,QAAQhkB,GAChBsjB,EAAQW,KAAKT,GACbpB,EAAayB,EAAKK,MACXC,CACT,EAYA,SAASA,EAAOnkB,GACd,GAAa,OAATA,EACF,MACE+jB,GACA,IAAIxN,EACF,uFACAsN,EAAKK,MACL,qDAIN,GAAI/F,GAAmBne,GAIrB,OAHAsjB,EAAQrC,MAAM,cACdqC,EAAQU,QAAQhkB,GAChBsjB,EAAQW,KAAK,cACNG,EAET,GAAa,MAATpkB,GAAyB,IAAT0S,EAAY,CAE9B,MAAMzV,EAAO/E,EACTmsB,GAAmBvT,KACjB+S,EACA3rB,EACAgnB,EACA4E,EACA1B,EACA9B,IAAc,EACdqD,IAAU,GAEZ,CACE1pB,KAAM,KACNslB,YAAQrK,GAEd,GAAkB,OAAdjY,EAAKhD,KAAe,CACtBqpB,EAAQrC,MAAMuC,GACdF,EAAQU,QAAQhkB,GAChBsjB,EAAQW,KAAKT,GACb,MAAMtB,EAAQoB,EAAQW,KAAKhqB,GAM3B,OALIypB,GAAazmB,EAAKsiB,QACpBnf,OAAO6b,OAAOiG,EAAO,CACnB3C,OAAQtiB,EAAKsiB,SAGVgE,CACT,CAIA,OAHAQ,EAAY9mB,EAAK4Z,QACjByM,EAAQrC,MAAMwC,GACdH,EAAQU,QAAQhkB,GACTskB,CACT,CAEA,OADAhB,EAAQrC,MAAMwC,GACPa,EAAOtkB,EAChB,CAYA,SAASskB,EAAOtkB,GACd,OACY,MAATA,GAAyB,IAAT0S,GACR,OAAT1S,GACAme,GAAmBne,IAEnBsjB,EAAQW,KAAKR,GACNU,EAAOnkB,KAIH,MAATA,GAAiB9H,EAED,MAAT8H,IACT0S,GAAQ,GAFRA,GAAQ,EAIV4Q,EAAQU,QAAQhkB,GACTskB,EACT,CAaA,SAASF,EAASpkB,GAChB,MAAMkkB,EAAML,EAAKK,MAGjB,GACEA,EAAI9N,OAASgM,EAAWhM,OACvBwN,GACDC,EAAKU,OAAOC,KAAKN,EAAI9N,MAIrB,MAAM,IAAIG,EACR,uFACAsN,EAAKK,MACL,qDAmBJ,OAAOC,EAAOnkB,EAChB,CACF,CAmBA,SAASqkB,GACPnsB,EACAgnB,EACA4E,EACA1B,EACA9B,EACAqD,GAGA,MAAMnO,EAASsJ,GAAczlB,KAAK0lB,OAAOxjB,MAAMuoB,GAAa,CAC1D5rB,QACAgnB,eACAhkB,MAAOknB,EACPpkB,YAAY,EACZsiB,aACAtB,OAAQ2E,EAAS,KAAO,GACxB1E,OAAQ0E,EAAS,KAAO,KAEpBpE,EAAS/J,EAAO+J,OAGtB,GAAIoE,GAAUpE,EAAQ,CAGpB,MAAMkF,EAAOlF,EAAOuB,KAAK,GAGzB,GACgB,wBAAd2D,EAAKxqB,MACoB,qBAAzBwqB,EAAKzmB,WAAW/D,KAEhB,MAAM,IAAIsc,EACR,eACEkO,EAAKxqB,KACL,uDACF+oB,GAAmByB,GAAMvpB,MACzB,iDAEG,GAAIupB,EAAKzmB,WAAW0mB,WAAW,GACpC,MAAM,IAAInO,EACR,wEACAyM,GAAmByB,EAAKzmB,WAAW0mB,WAAW,IAAIxpB,MAClD,mDAEG,GACLupB,EAAKzmB,WAAW0mB,WAAW,IACY,kBAAvCD,EAAKzmB,WAAW0mB,WAAW,GAAGzqB,KAE9B,MAAM,IAAIsc,EACR,eACEkO,EAAKzmB,WAAW0mB,WAAW,GAAGzqB,KAC9B,gDACF+oB,GAAmByB,EAAKzmB,WAAW0mB,WAAW,IAAIxpB,MAClD,gDAGN,CACA,OAAIsa,EAAOrB,MACF,CACLla,KAAM,MACN4c,QAAS,IAAIN,EACX,0CAA4Cf,EAAOrB,MAAM0C,QACzD,CACET,KAAMZ,EAAOrB,MAAMyM,IAAIxK,KACvBC,OAAQb,EAAOrB,MAAMyM,IAAIvK,OAAS,EAClCsK,OAAQnL,EAAOrB,MAAMrZ,KAEvB,6CAIC,CACLb,KAAM,KACNslB,SAEJ,CCvSO,SAASoF,GAAarB,EAASC,EAAItpB,EAAM2qB,GAC9C,MAAMC,EAAQD,EAAMA,EAAM,EAAIjJ,OAAOC,kBACrC,IAAIlJ,EAAO,EACX,OAGA,SAAe1S,GACb,GAAIqe,GAAcre,GAEhB,OADAsjB,EAAQrC,MAAMhnB,GACP+kB,EAAOhf,GAEhB,OAAOujB,EAAGvjB,EACZ,EAGA,SAASgf,EAAOhf,GACd,OAAIqe,GAAcre,IAAS0S,IAASmS,GAClCvB,EAAQU,QAAQhkB,GACTgf,IAETsE,EAAQW,KAAKhqB,GACNspB,EAAGvjB,GACZ,CACF,CCxBO,SAAS8kB,GAAcvqB,GAC5B,MAAMwqB,EAAWxqB,GAAW,CAAC,EACvBmpB,EAAYqB,EAASrB,UACrBxrB,EAAQ6sB,EAAS7sB,MAMjByrB,EAASoB,EAASpB,OACxB,IAEIzE,EAFAoB,EAAayE,EAASzE,WAM1B,GAHIA,UACFA,GAAa,GAEXpoB,EAAO,CACT,IAAKA,EAAMsoB,kBACT,MAAM,IAAI3K,MACR,mEAGJqJ,EAAe9e,OAAO6b,OACpB,CACE+I,YAAa,KACbjE,WAAY,UAEdgE,EAAS7F,aAEb,MAAO,GAAI6F,EAAS7F,cAAgB6F,EAASrB,UAC3C,MAAM,IAAI7N,MAAM,6DAElB,MAAO,CACLoP,KAAM,CACJ,IAAO,CACLC,SAsBN,SAAgC5B,EAASC,EAAI4B,GAC3C,MAAMtB,EAAOxqB,KACb,OAYA,SAAe2G,GAIb,OAaF,SAAgBA,GACd,OAAOqjB,GAAqBvS,KAC1B+S,EACAP,EACA8B,EACA,oBACA,0BACA,yBACAltB,EACAgnB,EACAwE,EACAC,EACArD,EAXK+C,CAYLrjB,EACJ,CA3BSmkB,CAAOnkB,EAChB,EAsCA,SAASolB,EAAMplB,GACb,OAAOqe,GAAcre,GACjB2kB,GAAarB,EAAShN,EAAK,aAA3BqO,CAAyC3kB,GACzCsW,EAAItW,EACV,CAYA,SAASsW,EAAItW,GACX,OAAgB,OAATA,GAAiBme,GAAmBne,GAAQujB,EAAGvjB,GAAQmlB,EAAInlB,EACpE,CACF,EAjGMqlB,UAAU,IAGdC,KAAM,CACJ,IAAO,CACLJ,SAyGN,SAAgC5B,EAASC,GACvC,MAAMM,EAAOxqB,KACb,OAaA,SAAe2G,GACb,OAAOqjB,GAAqBvS,KAC1B+S,EACAP,EACAC,EACA,oBACA,0BACA,yBACArrB,EACAgnB,EACAwE,EACAC,EACArD,GACA,EAZK+C,CAaLrjB,EACJ,CACF,IACF,CC1NO,MAAM9E,GACX,ysIACWqqB,GACX,0kFCOK,SAAS,GAAMvlB,GACpB,OAAO9E,GAAQsB,KAAKb,OAAOC,aAAaoE,GAC1C,CAWO,SAAS,GAAKA,GACnB,MAAMwlB,EAAY7pB,OAAOC,aAAaoE,GACtC,OAAO9E,GAAQsB,KAAKgpB,IAAcD,GAAO/oB,KAAKgpB,EAChD,CAUO,SAAS,GAAKtrB,GACnB,IAAIqZ,GAAS,EAEb,OAASA,EAAQrZ,EAAKc,QACpB,KAAMuY,EAAQ,GAAO,IAAOrZ,EAAKkB,WAAWmY,IAAS,OAAO,EAI9D,OAAOA,EAAQ,CACjB,CCUO,SAASkS,GACdnC,EACAC,EACA4B,EACAjtB,EACAgnB,EACAwE,EACAE,EACA8B,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,MAAMrD,EAAOxqB,KAEb,IAAI8tB,EAEAC,EACJ,OAYA,SAAepnB,GAKb,OAJAsjB,EAAQrC,MAAMyE,GACdpC,EAAQrC,MAAM0E,GACdrC,EAAQU,QAAQhkB,GAChBsjB,EAAQW,KAAK0B,GACN0B,CACT,EAYA,SAASA,EAAWrnB,GAGlB,OAAIoe,GAA0Bpe,GACrBmlB,EAAInlB,IAIbmnB,EAAcG,EACPC,GAAkBvnB,GAC3B,CAgBA,SAASsnB,EAAWtnB,GAElB,OAAa,KAATA,GACFsjB,EAAQrC,MAAM2E,GACdtC,EAAQU,QAAQhkB,GAChBsjB,EAAQW,KAAK2B,GACbuB,EAAcK,EACPD,IAII,KAATvnB,EACKynB,GAAOznB,GAIH,OAATA,GAAiB,GAAQA,IAC3BsjB,EAAQrC,MAAM6E,GACdxC,EAAQrC,MAAM8E,GACdzC,EAAQU,QAAQhkB,GACT0nB,QAETC,GACE3nB,EACA,cACA,oEACY,KAATA,EACG,0DACA,IAEV,CAcA,SAASwnB,EAAqBxnB,GAE5B,OAAa,KAATA,EACKynB,GAAOznB,GAIH,OAATA,GAAiB,GAAQA,IAC3BsjB,EAAQrC,MAAM6E,GACdxC,EAAQrC,MAAM8E,GACdzC,EAAQU,QAAQhkB,GACT0nB,QAETC,GACE3nB,EACA,cACA,oEACY,KAATA,GAAwB,KAATA,EACZ,4DACA,IAEV,CAYA,SAAS0nB,EAAY1nB,GAEnB,OAAa,KAATA,GAAyB,OAATA,GAAiB,GAAOA,IAC1CsjB,EAAQU,QAAQhkB,GACT0nB,GAKE,KAAT1nB,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,MAATA,GACAoe,GAA0Bpe,IAC1Bue,GAAkBve,IAElBsjB,EAAQW,KAAK8B,GACboB,EAAcS,EACPL,GAAkBvnB,SAE3B2nB,GACE3nB,EACA,UACA,8GACY,KAATA,EACG,sDACA,IAEV,CAcA,SAAS4nB,EAAiB5nB,GAExB,OAAa,KAATA,GACFsjB,EAAQrC,MAAM+E,GACd1C,EAAQU,QAAQhkB,GAChBsjB,EAAQW,KAAK+B,GACbmB,EAAcU,EACPN,IAII,KAATvnB,GACFsjB,EAAQrC,MAAMiF,GACd5C,EAAQU,QAAQhkB,GAChBsjB,EAAQW,KAAKiC,GACbiB,EAAcW,EACPP,IAKE,KAATvnB,GACS,KAATA,GACS,MAATA,GACU,OAATA,GAAiB,GAAQA,IAE1BsjB,EAAQW,KAAK6B,GACNiC,EAAgB/nB,SAEzB2nB,GACE3nB,EACA,aACA,mIAEJ,CAYA,SAAS6nB,EAAiB7nB,GAExB,GAAa,OAATA,GAAiB,GAAQA,GAG3B,OAFAsjB,EAAQrC,MAAMgF,GACd3C,EAAQU,QAAQhkB,GACTgoB,EAETL,GACE3nB,EACA,qBACA,mIAEJ,CAYA,SAASgoB,EAAWhoB,GAElB,OAAa,KAATA,GAAyB,OAATA,GAAiB,GAAOA,IAC1CsjB,EAAQU,QAAQhkB,GACTgoB,GAME,KAAThoB,GACS,KAATA,GACS,KAATA,GACS,MAATA,GACAoe,GAA0Bpe,IAC1Bue,GAAkBve,IAElBsjB,EAAQW,KAAKgC,GACbkB,EAAcc,EACPV,GAAkBvnB,SAE3B2nB,GACE3nB,EACA,iBACA,8GACY,KAATA,EACG,sDACA,IAEV,CAcA,SAASioB,EAAgBjoB,GAEvB,OAAa,KAATA,GACFsjB,EAAQrC,MAAM+E,GACd1C,EAAQU,QAAQhkB,GAChBsjB,EAAQW,KAAK+B,GACbmB,EAAcU,EACPN,IAKE,KAATvnB,GACS,KAATA,GACS,MAATA,GACU,OAATA,GAAiB,GAAQA,IAE1BsjB,EAAQW,KAAK6B,GACNiC,EAAgB/nB,SAEzB2nB,GACE3nB,EACA,oBACA,mIAEJ,CAYA,SAAS8nB,EAAgB9nB,GAEvB,GAAa,OAATA,GAAiB,GAAQA,GAG3B,OAFAsjB,EAAQrC,MAAMkF,GACd7C,EAAQU,QAAQhkB,GACTkoB,EAETP,GACE3nB,EACA,oBACA,oEACY,KAATA,GACS,OAATA,GAAiBA,EAAO,IAAMA,EAAO,GAClC,sDACA,IAEV,CAYA,SAASkoB,EAAUloB,GAEjB,OAAa,KAATA,GAAyB,OAATA,GAAiB,GAAOA,IAC1CsjB,EAAQU,QAAQhkB,GACTkoB,GAKE,KAATloB,GACS,KAATA,GACS,MAATA,GACAoe,GAA0Bpe,IAC1Bue,GAAkBve,IAElBsjB,EAAQW,KAAKkC,GACbgB,EAAcgB,EACPZ,GAAkBvnB,SAE3B2nB,GACE3nB,EACA,gBACA,6GAEJ,CAiBA,SAASmoB,EAAenoB,GAEtB,GACW,KAATA,GACS,KAATA,GACS,MAATA,GACU,OAATA,GAAiB,GAAQA,GAG1B,OADAsjB,EAAQW,KAAK6B,GACNiC,EAAgB/nB,GAEzB2nB,GACE3nB,EACA,mBACA,mIAEJ,CAkBA,SAAS+nB,EAAgB/nB,GAEvB,OAAa,KAATA,GACFsjB,EAAQrC,MAAM4E,GACdvC,EAAQU,QAAQhkB,GAChBsjB,EAAQW,KAAK4B,GACbsB,EAAcloB,GACPsoB,IAII,KAATvnB,EACKynB,GAAOznB,GAIH,MAATA,EACKqjB,GAAqBvS,KAC1B+S,EACAP,EACA8E,EACAhC,EACAC,EACAC,EACApuB,EACAgnB,EACAwE,GACA,GACA,EACAE,EAZKP,CAaLrjB,GAIS,OAATA,GAAiB,GAAQA,IAC3BsjB,EAAQrC,MAAMsF,GACdjD,EAAQrC,MAAMuF,GACdlD,EAAQrC,MAAMwF,GACdnD,EAAQU,QAAQhkB,GACTqoB,QAETV,GACE3nB,EACA,wBACA,mIAEJ,CAYA,SAASooB,EAAyBpoB,GAEhC,OADAmnB,EAAcY,EACPR,GAAkBvnB,EAC3B,CAgBA,SAASqoB,EAAqBroB,GAE5B,OAAa,KAATA,GAAyB,OAATA,GAAiB,GAAOA,IAC1CsjB,EAAQU,QAAQhkB,GACTqoB,GAKE,KAATroB,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,MAATA,GACAoe,GAA0Bpe,IAC1Bue,GAAkBve,IAElBsjB,EAAQW,KAAKwC,GACbU,EAAcmB,EACPf,GAAkBvnB,SAE3B2nB,GACE3nB,EACA,oBACA,mJAEJ,CAgBA,SAASsoB,EAA0BtoB,GAEjC,OAAa,KAATA,GACFsjB,EAAQrC,MAAMyF,GACdpD,EAAQU,QAAQhkB,GAChBsjB,EAAQW,KAAKyC,GACbS,EAAcoB,EACPhB,IAII,KAATvnB,GACFsjB,EAAQW,KAAKuC,GACblD,EAAQrC,MAAM2F,GACdtD,EAAQU,QAAQhkB,GAChBsjB,EAAQW,KAAK2C,GACbO,EAAcqB,GACPjB,IAKE,KAATvnB,GACS,KAATA,GACS,MAATA,GACAoe,GAA0Bpe,IAC1Bue,GAAkBve,IACR,OAATA,GAAiB,GAAQA,IAE1BsjB,EAAQW,KAAKuC,GACblD,EAAQW,KAAKsC,GACbY,EAAcY,EACPR,GAAkBvnB,SAE3B2nB,GACE3nB,EACA,uBACA,gIAEJ,CAYA,SAASuoB,EAAyBvoB,GAEhC,GAAa,OAATA,GAAiB,GAAQA,GAG3B,OAFAsjB,EAAQrC,MAAM0F,GACdrD,EAAQU,QAAQhkB,GACTyoB,EAETd,GACE3nB,EACA,8BACA,gIAEJ,CAcA,SAASyoB,EAAmBzoB,GAE1B,OAAa,KAATA,GAAyB,OAATA,GAAiB,GAAOA,IAC1CsjB,EAAQU,QAAQhkB,GACTyoB,GAKE,KAATzoB,GACS,KAATA,GACS,KAATA,GACS,MAATA,GACAoe,GAA0Bpe,IAC1Bue,GAAkBve,IAElBsjB,EAAQW,KAAK0C,GACbrD,EAAQW,KAAKuC,GACbW,EAAcuB,EACPnB,GAAkBvnB,SAE3B2nB,GACE3nB,EACA,0BACA,mJAEJ,CAcA,SAAS0oB,EAAwB1oB,GAE/B,OAAa,KAATA,GACFsjB,EAAQrC,MAAM2F,GACdtD,EAAQU,QAAQhkB,GAChBsjB,EAAQW,KAAK2C,GACbO,EAAcqB,GACPjB,IAKE,KAATvnB,GACS,KAATA,GACS,MAATA,GACU,OAATA,GAAiB,GAAQA,IAE1BsjB,EAAQW,KAAKsC,GACNwB,EAAgB/nB,SAEzB2nB,GACE3nB,EACA,6BACA,gIAEJ,CAcA,SAASwoB,GAAqBxoB,GAE5B,OAAa,KAATA,GAAwB,KAATA,GACjBsjB,EAAQrC,MAAM4F,GACdvD,EAAQrC,MAAM6F,GACdxD,EAAQU,QAAQhkB,GAChBsjB,EAAQW,KAAK6C,GACbM,EAASpnB,EACF2oB,IAII,MAAT3oB,EACKqjB,GAAqBvS,KAC1B+S,EACAP,EACAsF,GACA5B,EACAC,EACAC,EACAhvB,EACAgnB,EACAwE,GACA,GACA,EACAE,EAZKP,CAaLrjB,QAEJ2nB,GACE3nB,EACA,yBACA,4EACY,KAATA,EACG,qFACA,IAEV,CAYA,SAAS4oB,GAA8B5oB,GAGrC,OAFAsjB,EAAQW,KAAKsC,GACbY,EAAcY,EACPR,GAAkBvnB,EAC3B,CAYA,SAAS2oB,GAA0B3oB,GAQjC,OAPa,OAATA,GACF2nB,GACE3nB,EACA,qBACA,kCAAoCrE,OAAOktB,cAAczB,GAAU,KAGnEpnB,IAASonB,GACX9D,EAAQrC,MAAM6F,GACdxD,EAAQU,QAAQhkB,GAChBsjB,EAAQW,KAAK6C,GACbxD,EAAQW,KAAK4C,GACbvD,EAAQW,KAAKsC,GACba,OAASlS,EACTiS,EAAcY,EACPR,IAELpJ,GAAmBne,IACrBmnB,EAAcwB,GACPpB,GAAkBvnB,KAE3BsjB,EAAQrC,MAAM8F,GACP+B,GAAqB9oB,GAC9B,CAYA,SAAS8oB,GAAqB9oB,GAC5B,OAAa,OAATA,GAAiBA,IAASonB,GAAUjJ,GAAmBne,IACzDsjB,EAAQW,KAAK8C,GACN4B,GAA0B3oB,KAEnCsjB,EAAQU,QAAQhkB,GACT8oB,GACT,CAYA,SAAS7pB,GAAYe,GACnB,GAAa,KAATA,EACF,OAAOynB,GAAOznB,GAEhB2nB,GACE3nB,EACA,2BACA,sBACY,KAATA,GAAwB,KAATA,EACZ,4DACA,IAEV,CAYA,SAASynB,GAAOznB,GAKd,OAJAsjB,EAAQrC,MAAM0E,GACdrC,EAAQU,QAAQhkB,GAChBsjB,EAAQW,KAAK0B,GACbrC,EAAQW,KAAKyB,GACNnC,CACT,CAYA,SAASgE,GAAkBvnB,GACzB,OAAIme,GAAmBne,IACrBsjB,EAAQrC,MAAM,cACdqC,EAAQU,QAAQhkB,GAChBsjB,EAAQW,KAAK,cACN8E,IAEL1K,GAAcre,IAASue,GAAkBve,IAC3CsjB,EAAQrC,MAAM,gBACP+H,GAAmBhpB,IAErBmnB,EAAYnnB,EACrB,CAYA,SAASgpB,GAAmBhpB,GAC1B,OAAIme,GAAmBne,IACrBsjB,EAAQW,KAAK,gBACNsD,GAAkBvnB,IAEvBqe,GAAcre,IAASue,GAAkBve,IAC3CsjB,EAAQU,QAAQhkB,GACTgpB,KAET1F,EAAQW,KAAK,gBACNkD,EAAYnnB,GACrB,CAYA,SAAS+oB,GAAqB/oB,GAE5B,IAAK4jB,GAAaC,EAAKU,OAAOC,KAAKX,EAAKK,MAAM9N,MAC5C,MAAM,IAAIG,EACR,iIACAsN,EAAKK,MACL,8CAGJ,OAAOqD,GAAkBvnB,EAC3B,CASA,SAAS2nB,GAAM3nB,EAAMipB,EAAIzqB,GACvB,MAAM,IAAI+X,EACR,eACY,OAATvW,EACG,cACA,eACU,KAATA,EAAc,QAAUrE,OAAOktB,cAAc7oB,IAC9C,MAkBZ,SAA2BA,GACzB,MAAO,KAAOA,EAAKwQ,SAAS,IAAI0Y,cAAcC,SAAS,EAAG,IAC5D,CAnBYC,CAAkBppB,GAClB,KACJ,IACAipB,EACA,cACAzqB,EACFqlB,EAAKK,MACL,2CACY,OAATlkB,EAAgB,MAAQ,aAE/B,CACF,CC//BO,SAASjH,GAAQb,EAAOgnB,EAAcwE,GAC3C,MAAO,CACLwB,SAcF,SAAyB5B,EAASC,EAAI4B,GACpC,OAAOM,GAAW3U,KAChBzX,KACAiqB,EACAC,EACA4B,EACAjtB,EACAgnB,EACAwE,GACA,EACA,gBACA,sBACA,6BACA,iCACA,oBACA,2BACA,gCACA,0BACA,gCACA,yBACA,mCACA,yCACA,wCACA,yBACA,6BACA,oCACA,yCACA,kCACA,0CACA,qCACA,2CACA,0CACA,wCACA,8CACA,6CAEJ,EACF,CClDO,SAAS2F,GAAQnxB,EAAOgnB,EAAcwE,GAC3C,MAAO,CACLwB,SAeF,SAAyB5B,EAASC,EAAI4B,GACpC,MAAMtB,EAAOxqB,KACb,OAAO6B,EAYP,SAASA,EAAM8E,GAIb,OAaF,SAAgBA,GACd,OAAOylB,GAAW3U,KAChB+S,EACAP,EACA8B,EACAD,EACAjtB,EACAgnB,EACAwE,GACA,EACA,gBACA,sBACA,6BACA,iCACA,oBACA,2BACA,gCACA,0BACA,gCACA,yBACA,mCACA,yCACA,wCACA,yBACA,6BACA,oCACA,yCACA,kCACA,0CACA,qCACA,2CACA,0CACA,wCACA,8CACA,6CAjCK+B,CAkCLzlB,EACJ,CAjDSmkB,CAAOnkB,EAChB,CA4DA,SAASolB,EAAMplB,GACb,OAAOqe,GAAcre,GACjB2kB,GAAarB,EAAShN,EAAK,aAA3BqO,CAAyC3kB,GACzCsW,EAAItW,EACV,CAYA,SAASsW,EAAItW,GAEX,OAAgB,KAATA,EACH9E,EAAM8E,GACG,OAATA,GAAiBme,GAAmBne,GACpCujB,EA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GACTqoC,GAELlqB,GAAmBne,IACrBmnB,EAAcihB,EACPP,EAAiB7nC,IAEtBqe,GAAcre,IAChBsjB,EAAQU,QAAQhkB,GACTooC,GAEF9xB,EAAItW,EACb,CAYA,SAASqoC,EAAqBroC,GAE5B,OACW,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACA6d,EAAkB7d,IAElBsjB,EAAQU,QAAQhkB,GACTqoC,GAEFC,EAA0BtoC,EACnC,CAaA,SAASsoC,EAA0BtoC,GACjC,OAAa,KAATA,GACFsjB,EAAQU,QAAQhkB,GACTuoC,GAELpqB,GAAmBne,IACrBmnB,EAAcmhB,EACPT,EAAiB7nC,IAEtBqe,GAAcre,IAChBsjB,EAAQU,QAAQhkB,GACTsoC,GAEFF,EAAepoC,EACxB,CAaA,SAASuoC,EAA4BvoC,GACnC,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,EAEOmlB,EAAInlB,GAEA,KAATA,GAAwB,KAATA,GACjBsjB,EAAQU,QAAQhkB,GAChBonB,EAASpnB,EACFwoC,GAELrqB,GAAmBne,IACrBmnB,EAAcohB,EACPV,EAAiB7nC,IAEtBqe,GAAcre,IAChBsjB,EAAQU,QAAQhkB,GACTuoC,IAETjlB,EAAQU,QAAQhkB,GACTyoC,EACT,CAYA,SAASD,EAA4BxoC,GACnC,OAAIA,IAASonB,GACX9D,EAAQU,QAAQhkB,GAChBonB,OAASlS,EACFwzB,GAEI,OAAT1oC,EACKmlB,EAAInlB,GAETme,GAAmBne,IACrBmnB,EAAcqhB,EACPX,EAAiB7nC,KAE1BsjB,EAAQU,QAAQhkB,GACTwoC,EACT,CAYA,SAASC,EAA8BzoC,GACrC,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,EAEOmlB,EAAInlB,GAEA,KAATA,GAAwB,KAATA,GAAeoe,GAA0Bpe,GACnDooC,EAAepoC,IAExBsjB,EAAQU,QAAQhkB,GACTyoC,EACT,CAaA,SAASC,EAAiC1oC,GACxC,OAAa,KAATA,GAAwB,KAATA,GAAeoe,GAA0B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","sources":["webpack://side-trail-software-development/./node_modules/acorn-jsx/index.js","webpack://side-trail-software-development/./node_modules/acorn-jsx/xhtml.js","webpack://side-trail-software-development/./node_modules/extend/index.js","webpack://side-trail-software-development/./src/components/Card.tsx","webpack://side-trail-software-development/./src/components/Section.tsx","webpack://side-trail-software-development/./src/components/Testimonial.tsx","webpack://side-trail-software-development/./src/components/Carousel.tsx","webpack://side-trail-software-development/./src/utilities/HorizontalOrientation.tsx","webpack://side-trail-software-development/./src/components/ListCard.tsx","webpack://side-trail-software-development/./src/components/Button.tsx","webpack://side-trail-software-development/./node_modules/bail/index.js","webpack://side-trail-software-development/./node_modules/is-plain-obj/index.js","webpack://side-trail-software-development/./node_modules/trough/index.js","webpack://side-trail-software-development/./node_modules/unist-util-stringify-position/lib/index.js","webpack://side-trail-software-development/./node_modules/vfile-message/lib/index.js","webpack://side-trail-software-development/./node_modules/vfile/lib/minpath.browser.js","webpack://side-trail-software-development/./node_modules/vfile/lib/minproc.browser.js","webpack://side-trail-software-development/./node_modules/vfile/lib/minurl.shared.js","webpack://side-trail-software-development/./node_modules/vfile/lib/minurl.browser.js","webpack://side-trail-software-development/./node_modules/vfile/lib/index.js","webpack://side-trail-software-development/./node_modules/unified/lib/index.js","webpack://side-trail-software-development/./node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","webpack://side-trail-software-development/./node_modules/micromark-util-character/index.js","webpack://side-trail-software-development/./node_modules/estree-util-visit/lib/index.js","webpack://side-trail-software-development/./node_modules/micromark-util-events-to-acorn/index.js","webpack://side-trail-software-development/./node_modules/unist-util-position-from-estree/lib/index.js","webpack://side-trail-software-development/./node_modules/micromark-factory-mdx-expression/index.js","webpack://side-trail-software-development/./node_modules/micromark-factory-space/index.js","webpack://side-trail-software-development/./node_modules/micromark-extension-mdx-expression/lib/syntax.js","webpack://side-trail-software-development/./node_modules/estree-util-is-identifier-name/lib/regex.js","webpack://side-trail-software-development/./node_modules/estree-util-is-identifier-name/lib/index.js","webpack://side-trail-software-development/./node_modules/micromark-extension-mdx-jsx/lib/factory-tag.js","webpack://side-trail-software-development/./node_modules/micromark-extension-mdx-jsx/lib/jsx-text.js","webpack://side-trail-software-development/./node_modules/micromark-extension-mdx-jsx/lib/jsx-flow.js","webpack://side-trail-software-development/./node_modules/micromark-extension-mdx-jsx/lib/syntax.js","webpack://side-trail-software-development/./node_modules/micromark-extension-mdx-md/index.js","webpack://side-trail-software-development/./node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://side-trail-software-development/./node_modules/micromark-extension-mdxjs-esm/lib/syntax.js","webpack://side-trail-software-development/./node_modules/micromark-util-chunked/index.js","webpack://side-trail-software-development/./node_modules/micromark-util-combine-extensions/index.js","webpack://side-trail-software-development/./node_modules/mdast-util-mdx-expression/lib/index.js","webpack://side-trail-software-development/./node_modules/ccount/index.js","webpack://side-trail-software-development/./node_modules/character-entities-legacy/index.js","webpack://side-trail-software-development/./node_modules/character-reference-invalid/index.js","webpack://side-trail-software-development/./node_modules/is-decimal/index.js","webpack://side-trail-software-development/./node_modules/is-hexadecimal/index.js","webpack://side-trail-software-development/./node_modules/is-alphanumerical/index.js","webpack://side-trail-software-development/./node_modules/is-alphabetical/index.js","webpack://side-trail-software-development/./node_modules/decode-named-character-reference/index.dom.js","webpack://side-trail-software-development/./node_modules/parse-entities/lib/index.js","webpack://side-trail-software-development/./node_modules/stringify-entities/lib/core.js","webpack://side-trail-software-development/./node_modules/stringify-entities/lib/util/format-basic.js","webpack://side-trail-software-development/./node_modules/stringify-entities/lib/index.js","webpack://side-trail-software-development/./node_modules/mdast-util-to-markdown/lib/util/indent-lines.js","webpack://side-trail-software-development/./node_modules/mdast-util-to-markdown/lib/util/track.js","webpack://side-trail-software-development/./node_modules/mdast-util-mdx-jsx/lib/index.js","webpack://side-trail-software-development/./node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js","webpack://side-trail-software-development/./node_modules/mdast-util-mdxjs-esm/lib/index.js","webpack://side-trail-software-development/./node_modules/remark-mdx/index.js","webpack://side-trail-software-development/./node_modules/micromark-extension-mdxjs/index.js","webpack://side-trail-software-development/./node_modules/mdast-util-mdx/index.js","webpack://side-trail-software-development/./node_modules/mdast-util-to-string/lib/index.js","webpack://side-trail-software-development/./node_modules/micromark/lib/initialize/content.js","webpack://side-trail-software-development/./node_modules/micromark/lib/initialize/document.js","webpack://side-trail-software-development/./node_modules/micromark-util-subtokenize/index.js","webpack://side-trail-software-development/./node_modules/micromark-core-commonmark/lib/content.js","webpack://side-trail-software-development/./node_modules/micromark/lib/initialize/flow.js","webpack://side-trail-software-development/./node_modules/micromark/lib/initialize/text.js","webpack://side-trail-software-development/./node_modules/micromark-util-resolve-all/index.js","webpack://side-trail-software-development/./node_modules/micromark/lib/create-tokenizer.js","webpack://side-trail-software-development/./node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack://side-trail-software-development/./node_modules/micromark-core-commonmark/lib/list.js","webpack://side-trail-software-development/./node_modules/micromark-core-commonmark/lib/block-quote.js","webpack://side-trail-software-development/./node_modules/micromark-factory-destination/index.js","webpack://side-trail-software-development/./node_modules/micromark-factory-label/index.js","webpack://side-trail-software-development/./node_modules/micromark-factory-title/index.js","webpack://side-trail-software-development/./node_modules/micromark-factory-whitespace/index.js","webpack://side-trail-software-development/./node_modules/micromark-util-normalize-identifier/index.js","webpack://side-trail-software-development/./node_modules/micromark-core-commonmark/lib/definition.js","webpack://side-trail-software-development/./node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://side-trail-software-development/./node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://side-trail-software-development/./node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://side-trail-software-development/./node_modules/micromark-util-html-tag-name/index.js","webpack://side-trail-software-development/./node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://side-trail-software-development/./node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://side-trail-software-development/./node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://side-trail-software-development/./node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://side-trail-software-development/./node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://side-trail-software-development/./node_modules/micromark-core-commonmark/lib/label-end.js","webpack://side-trail-software-development/./node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://side-trail-software-development/./node_modules/micromark-util-classify-character/index.js","webpack://side-trail-software-development/./node_modules/micromark-core-commonmark/lib/attention.js","webpack://side-trail-software-development/./node_modules/micromark-core-commonmark/lib/autolink.js","webpack://side-trail-software-development/./node_modules/micromark-core-commonmark/lib/html-text.js","webpack://side-trail-software-development/./node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://side-trail-software-development/./node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://side-trail-software-development/./node_modules/micromark-core-commonmark/lib/code-text.js","webpack://side-trail-software-development/./node_modules/micromark/lib/constructs.js","webpack://side-trail-software-development/./node_modules/micromark/lib/preprocess.js","webpack://side-trail-software-development/./node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://side-trail-software-development/./node_modules/micromark-util-decode-string/index.js","webpack://side-trail-software-development/./node_modules/mdast-util-from-markdown/lib/index.js","webpack://side-trail-software-development/./node_modules/micromark/lib/postprocess.js","webpack://side-trail-software-development/./node_modules/micromark/lib/parse.js","webpack://side-trail-software-development/./node_modules/remark-parse/lib/index.js","webpack://side-trail-software-development/./node_modules/micromark-util-sanitize-uri/index.js","webpack://side-trail-software-development/./node_modules/unist-util-is/lib/index.js","webpack://side-trail-software-development/./node_modules/unist-util-visit-parents/lib/index.js","webpack://side-trail-software-development/./node_modules/unist-util-visit/lib/index.js","webpack://side-trail-software-development/./node_modules/unist-util-position/lib/index.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-definitions/lib/index.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/revert.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/list-item.js","webpack://side-trail-software-development/./node_modules/trim-lines/index.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/index.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/break.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/code.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/delete.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/footnote.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/heading.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/html.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/image.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/link.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/list.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/root.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/strong.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table-row.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/text.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/state.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/unist-util-generated/lib/index.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/index.js","webpack://side-trail-software-development/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/footer.js","webpack://side-trail-software-development/./node_modules/remark-rehype/lib/index.js","webpack://side-trail-software-development/./node_modules/estree-walker/src/walker.js","webpack://side-trail-software-development/./node_modules/estree-walker/src/sync.js","webpack://side-trail-software-development/./node_modules/estree-walker/src/index.js","webpack://side-trail-software-development/./node_modules/estree-util-build-jsx/lib/index.js","webpack://side-trail-software-development/./node_modules/@mdx-js/mdx/lib/util/estree-util-create.js","webpack://side-trail-software-development/./node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js","webpack://side-trail-software-development/./node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js","webpack://side-trail-software-development/./node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-build.js","webpack://side-trail-software-development/./node_modules/is-reference/src/index.js","webpack://side-trail-software-development/./node_modules/periscopic/src/index.js","webpack://side-trail-software-development/./node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js","webpack://side-trail-software-development/./node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js","webpack://side-trail-software-development/./node_modules/@mdx-js/mdx/lib/plugin/recma-document.js","webpack://side-trail-software-development/./node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js","webpack://side-trail-software-development/./node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js","webpack://side-trail-software-development/./node_modules/astring/dist/astring.mjs","webpack://side-trail-software-development/./node_modules/estree-util-to-js/lib/index.js","webpack://side-trail-software-development/./node_modules/estree-util-to-js/lib/jsx.js","webpack://side-trail-software-development/./node_modules/@mdx-js/mdx/lib/plugin/recma-stringify.js","webpack://side-trail-software-development/./node_modules/property-information/lib/util/schema.js","webpack://side-trail-software-development/./node_modules/property-information/lib/util/merge.js","webpack://side-trail-software-development/./node_modules/property-information/lib/normalize.js","webpack://side-trail-software-development/./node_modules/property-information/lib/util/info.js","webpack://side-trail-software-development/./node_modules/property-information/lib/util/types.js","webpack://side-trail-software-development/./node_modules/property-information/lib/util/defined-info.js","webpack://side-trail-software-development/./node_modules/property-information/lib/util/create.js","webpack://side-trail-software-development/./node_modules/property-information/lib/xlink.js","webpack://side-trail-software-development/./node_modules/property-information/lib/xml.js","webpack://side-trail-software-development/./node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://side-trail-software-development/./node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://side-trail-software-development/./node_modules/property-information/lib/xmlns.js","webpack://side-trail-software-development/./node_modules/property-information/lib/aria.js","webpack://side-trail-software-development/./node_modules/property-information/lib/html.js","webpack://side-trail-software-development/./node_modules/property-information/lib/svg.js","webpack://side-trail-software-development/./node_modules/property-information/index.js","webpack://side-trail-software-development/./node_modules/zwitch/index.js","webpack://side-trail-software-development/./node_modules/comma-separated-tokens/index.js","webpack://side-trail-software-development/./node_modules/property-information/lib/find.js","webpack://side-trail-software-development/./node_modules/property-information/lib/hast-to-react.js","webpack://side-trail-software-development/./node_modules/style-to-object/index.mjs","webpack://side-trail-software-development/./node_modules/hast-util-to-estree/lib/handlers/element.js","webpack://side-trail-software-development/./node_modules/estree-util-attach-comments/lib/index.js","webpack://side-trail-software-development/./node_modules/hast-util-to-estree/lib/handlers/mdx-expression.js","webpack://side-trail-software-development/./node_modules/hast-util-to-estree/lib/handlers/mdx-jsx-element.js","webpack://side-trail-software-development/./node_modules/hast-util-whitespace/index.js","webpack://side-trail-software-development/./node_modules/hast-util-to-estree/lib/handlers/index.js","webpack://side-trail-software-development/./node_modules/hast-util-to-estree/lib/handlers/comment.js","webpack://side-trail-software-development/./node_modules/space-separated-tokens/index.js","webpack://side-trail-software-development/./node_modules/hast-util-to-estree/lib/handlers/mdxjs-esm.js","webpack://side-trail-software-development/./node_modules/hast-util-to-estree/lib/handlers/text.js","webpack://side-trail-software-development/./node_modules/hast-util-to-estree/lib/handlers/root.js","webpack://side-trail-software-development/./node_modules/hast-util-to-estree/lib/state.js","webpack://side-trail-software-development/./node_modules/@mdx-js/mdx/lib/plugin/rehype-recma.js","webpack://side-trail-software-development/./node_modules/hast-util-to-estree/lib/index.js","webpack://side-trail-software-development/./node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js","webpack://side-trail-software-development/./node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js","webpack://side-trail-software-development/./node_modules/@mdx-js/mdx/lib/node-types.js","webpack://side-trail-software-development/./node_modules/@mdx-js/mdx/lib/condition.browser.js","webpack://side-trail-software-development/./node_modules/@mdx-js/mdx/lib/core.js","webpack://side-trail-software-development/./node_modules/@mdx-js/mdx/lib/util/extnames.js","webpack://side-trail-software-development/./node_modules/@mdx-js/mdx/lib/util/resolve-file-and-options.js","webpack://side-trail-software-development/./node_modules/@mdx-js/mdx/lib/compile.js","webpack://side-trail-software-development/./node_modules/@mdx-js/mdx/lib/run.js","webpack://side-trail-software-development/./node_modules/@mdx-js/mdx/lib/evaluate.js","webpack://side-trail-software-development/./node_modules/@mdx-js/mdx/lib/util/resolve-evaluate-options.js","webpack://side-trail-software-development/./src/components/MdxRenderer.tsx","webpack://side-trail-software-development/./src/pages/index.tsx","webpack://side-trail-software-development/./node_modules/inline-style-parser/index.js","webpack://side-trail-software-development/./node_modules/is-buffer/index.js","webpack://side-trail-software-development/./node_modules/markdown-extensions/index.js","webpack://side-trail-software-development/./node_modules/style-to-object/index.js"],"sourcesContent":["'use strict';\n\nconst XHTMLEntities = require('./xhtml');\n\nconst hexNumber = /^[\\da-fA-F]+$/;\nconst decimalNumber = /^\\d+$/;\n\n// The map to `acorn-jsx` tokens from `acorn` namespace objects.\nconst acornJsxMap = new WeakMap();\n\n// Get the original tokens for the given `acorn` namespace object.\nfunction getJsxTokens(acorn) {\n  acorn = acorn.Parser.acorn || acorn;\n  let acornJsx = acornJsxMap.get(acorn);\n  if (!acornJsx) {\n    const tt = acorn.tokTypes;\n    const TokContext = acorn.TokContext;\n    const TokenType = acorn.TokenType;\n    const tc_oTag = new TokContext('<tag', false);\n    const tc_cTag = new TokContext('</tag', false);\n    const tc_expr = new TokContext('<tag>...</tag>', true, true);\n    const tokContexts = {\n      tc_oTag: tc_oTag,\n      tc_cTag: tc_cTag,\n      tc_expr: tc_expr\n    };\n    const tokTypes = {\n      jsxName: new TokenType('jsxName'),\n      jsxText: new TokenType('jsxText', {beforeExpr: true}),\n      jsxTagStart: new TokenType('jsxTagStart', {startsExpr: true}),\n      jsxTagEnd: new TokenType('jsxTagEnd')\n    };\n\n    tokTypes.jsxTagStart.updateContext = function() {\n      this.context.push(tc_expr); // treat as beginning of JSX expression\n      this.context.push(tc_oTag); // start opening tag context\n      this.exprAllowed = false;\n    };\n    tokTypes.jsxTagEnd.updateContext = function(prevType) {\n      let out = this.context.pop();\n      if (out === tc_oTag && prevType === tt.slash || out === tc_cTag) {\n        this.context.pop();\n        this.exprAllowed = this.curContext() === tc_expr;\n      } else {\n        this.exprAllowed = true;\n      }\n    };\n\n    acornJsx = { tokContexts: tokContexts, tokTypes: tokTypes };\n    acornJsxMap.set(acorn, acornJsx);\n  }\n\n  return acornJsx;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(object) {\n  if (!object)\n    return object;\n\n  if (object.type === 'JSXIdentifier')\n    return object.name;\n\n  if (object.type === 'JSXNamespacedName')\n    return object.namespace.name + ':' + object.name.name;\n\n  if (object.type === 'JSXMemberExpression')\n    return getQualifiedJSXName(object.object) + '.' +\n    getQualifiedJSXName(object.property);\n}\n\nmodule.exports = function(options) {\n  options = options || {};\n  return function(Parser) {\n    return plugin({\n      allowNamespaces: options.allowNamespaces !== false,\n      allowNamespacedObjects: !!options.allowNamespacedObjects\n    }, Parser);\n  };\n};\n\n// This is `tokTypes` of the peer dep.\n// This can be different instances from the actual `tokTypes` this plugin uses.\nObject.defineProperty(module.exports, \"tokTypes\", {\n  get: function get_tokTypes() {\n    return getJsxTokens(require(\"acorn\")).tokTypes;\n  },\n  configurable: true,\n  enumerable: true\n});\n\nfunction plugin(options, Parser) {\n  const acorn = Parser.acorn || require(\"acorn\");\n  const acornJsx = getJsxTokens(acorn);\n  const tt = acorn.tokTypes;\n  const tok = acornJsx.tokTypes;\n  const tokContexts = acorn.tokContexts;\n  const tc_oTag = acornJsx.tokContexts.tc_oTag;\n  const tc_cTag = acornJsx.tokContexts.tc_cTag;\n  const tc_expr = acornJsx.tokContexts.tc_expr;\n  const isNewLine = acorn.isNewLine;\n  const isIdentifierStart = acorn.isIdentifierStart;\n  const isIdentifierChar = acorn.isIdentifierChar;\n\n  return class extends Parser {\n    // Expose actual `tokTypes` and `tokContexts` to other plugins.\n    static get acornJsx() {\n      return acornJsx;\n    }\n\n    // Reads inline JSX contents token.\n    jsx_readToken() {\n      let out = '', chunkStart = this.pos;\n      for (;;) {\n        if (this.pos >= this.input.length)\n          this.raise(this.start, 'Unterminated JSX contents');\n        let ch = this.input.charCodeAt(this.pos);\n\n        switch (ch) {\n        case 60: // '<'\n        case 123: // '{'\n          if (this.pos === this.start) {\n            if (ch === 60 && this.exprAllowed) {\n              ++this.pos;\n              return this.finishToken(tok.jsxTagStart);\n            }\n            return this.getTokenFromCode(ch);\n          }\n          out += this.input.slice(chunkStart, this.pos);\n          return this.finishToken(tok.jsxText, out);\n\n        case 38: // '&'\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readEntity();\n          chunkStart = this.pos;\n          break;\n\n        case 62: // '>'\n        case 125: // '}'\n          this.raise(\n            this.pos,\n            \"Unexpected token `\" + this.input[this.pos] + \"`. Did you mean `\" +\n              (ch === 62 ? \"&gt;\" : \"&rbrace;\") + \"` or \" + \"`{\\\"\" + this.input[this.pos] + \"\\\"}\" + \"`?\"\n          );\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.pos);\n            out += this.jsx_readNewLine(true);\n            chunkStart = this.pos;\n          } else {\n            ++this.pos;\n          }\n        }\n      }\n    }\n\n    jsx_readNewLine(normalizeCRLF) {\n      let ch = this.input.charCodeAt(this.pos);\n      let out;\n      ++this.pos;\n      if (ch === 13 && this.input.charCodeAt(this.pos) === 10) {\n        ++this.pos;\n        out = normalizeCRLF ? '\\n' : '\\r\\n';\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n\n      return out;\n    }\n\n    jsx_readString(quote) {\n      let out = '', chunkStart = ++this.pos;\n      for (;;) {\n        if (this.pos >= this.input.length)\n          this.raise(this.start, 'Unterminated string constant');\n        let ch = this.input.charCodeAt(this.pos);\n        if (ch === quote) break;\n        if (ch === 38) { // '&'\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readEntity();\n          chunkStart = this.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readNewLine(false);\n          chunkStart = this.pos;\n        } else {\n          ++this.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsx_readEntity() {\n      let str = '', count = 0, entity;\n      let ch = this.input[this.pos];\n      if (ch !== '&')\n        this.raise(this.pos, 'Entity must start with an ampersand');\n      let startPos = ++this.pos;\n      while (this.pos < this.input.length && count++ < 10) {\n        ch = this.input[this.pos++];\n        if (ch === ';') {\n          if (str[0] === '#') {\n            if (str[1] === 'x') {\n              str = str.substr(2);\n              if (hexNumber.test(str))\n                entity = String.fromCharCode(parseInt(str, 16));\n            } else {\n              str = str.substr(1);\n              if (decimalNumber.test(str))\n                entity = String.fromCharCode(parseInt(str, 10));\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.pos = startPos;\n        return '&';\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can't contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsx_readWord() {\n      let ch, start = this.pos;\n      do {\n        ch = this.input.charCodeAt(++this.pos);\n      } while (isIdentifierChar(ch) || ch === 45); // '-'\n      return this.finishToken(tok.jsxName, this.input.slice(start, this.pos));\n    }\n\n    // Parse next token as JSX identifier\n\n    jsx_parseIdentifier() {\n      let node = this.startNode();\n      if (this.type === tok.jsxName)\n        node.name = this.value;\n      else if (this.type.keyword)\n        node.name = this.type.keyword;\n      else\n        this.unexpected();\n      this.next();\n      return this.finishNode(node, 'JSXIdentifier');\n    }\n\n    // Parse namespaced identifier.\n\n    jsx_parseNamespacedName() {\n      let startPos = this.start, startLoc = this.startLoc;\n      let name = this.jsx_parseIdentifier();\n      if (!options.allowNamespaces || !this.eat(tt.colon)) return name;\n      var node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsx_parseIdentifier();\n      return this.finishNode(node, 'JSXNamespacedName');\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsx_parseElementName() {\n      if (this.type === tok.jsxTagEnd) return '';\n      let startPos = this.start, startLoc = this.startLoc;\n      let node = this.jsx_parseNamespacedName();\n      if (this.type === tt.dot && node.type === 'JSXNamespacedName' && !options.allowNamespacedObjects) {\n        this.unexpected();\n      }\n      while (this.eat(tt.dot)) {\n        let newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsx_parseIdentifier();\n        node = this.finishNode(newNode, 'JSXMemberExpression');\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsx_parseAttributeValue() {\n      switch (this.type) {\n      case tt.braceL:\n        let node = this.jsx_parseExpressionContainer();\n        if (node.expression.type === 'JSXEmptyExpression')\n          this.raise(node.start, 'JSX attributes must only be assigned a non-empty expression');\n        return node;\n\n      case tok.jsxTagStart:\n      case tt.string:\n        return this.parseExprAtom();\n\n      default:\n        this.raise(this.start, 'JSX value should be either an expression or a quoted JSX text');\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsx_parseEmptyExpression() {\n      let node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);\n      return this.finishNodeAt(node, 'JSXEmptyExpression', this.start, this.startLoc);\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsx_parseExpressionContainer() {\n      let node = this.startNode();\n      this.next();\n      node.expression = this.type === tt.braceR\n        ? this.jsx_parseEmptyExpression()\n        : this.parseExpression();\n      this.expect(tt.braceR);\n      return this.finishNode(node, 'JSXExpressionContainer');\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsx_parseAttribute() {\n      let node = this.startNode();\n      if (this.eat(tt.braceL)) {\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssign();\n        this.expect(tt.braceR);\n        return this.finishNode(node, 'JSXSpreadAttribute');\n      }\n      node.name = this.jsx_parseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsx_parseAttributeValue() : null;\n      return this.finishNode(node, 'JSXAttribute');\n    }\n\n    // Parses JSX opening tag starting after '<'.\n\n    jsx_parseOpeningElementAt(startPos, startLoc) {\n      let node = this.startNodeAt(startPos, startLoc);\n      node.attributes = [];\n      let nodeName = this.jsx_parseElementName();\n      if (nodeName) node.name = nodeName;\n      while (this.type !== tt.slash && this.type !== tok.jsxTagEnd)\n        node.attributes.push(this.jsx_parseAttribute());\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tok.jsxTagEnd);\n      return this.finishNode(node, nodeName ? 'JSXOpeningElement' : 'JSXOpeningFragment');\n    }\n\n    // Parses JSX closing tag starting after '</'.\n\n    jsx_parseClosingElementAt(startPos, startLoc) {\n      let node = this.startNodeAt(startPos, startLoc);\n      let nodeName = this.jsx_parseElementName();\n      if (nodeName) node.name = nodeName;\n      this.expect(tok.jsxTagEnd);\n      return this.finishNode(node, nodeName ? 'JSXClosingElement' : 'JSXClosingFragment');\n    }\n\n    // Parses entire JSX element, including it's opening tag\n    // (starting after '<'), attributes, contents and closing tag.\n\n    jsx_parseElementAt(startPos, startLoc) {\n      let node = this.startNodeAt(startPos, startLoc);\n      let children = [];\n      let openingElement = this.jsx_parseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.type) {\n          case tok.jsxTagStart:\n            startPos = this.start; startLoc = this.startLoc;\n            this.next();\n            if (this.eat(tt.slash)) {\n              closingElement = this.jsx_parseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n            children.push(this.jsx_parseElementAt(startPos, startLoc));\n            break;\n\n          case tok.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case tt.braceL:\n            children.push(this.jsx_parseExpressionContainer());\n            break;\n\n          default:\n            this.unexpected();\n          }\n        }\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(\n            closingElement.start,\n            'Expected corresponding JSX closing tag for <' + getQualifiedJSXName(openingElement.name) + '>');\n        }\n      }\n      let fragmentOrElement = openingElement.name ? 'Element' : 'Fragment';\n\n      node['opening' + fragmentOrElement] = openingElement;\n      node['closing' + fragmentOrElement] = closingElement;\n      node.children = children;\n      if (this.type === tt.relational && this.value === \"<\") {\n        this.raise(this.start, \"Adjacent JSX elements must be wrapped in an enclosing tag\");\n      }\n      return this.finishNode(node, 'JSX' + fragmentOrElement);\n    }\n\n    // Parse JSX text\n\n    jsx_parseText() {\n      let node = this.parseLiteral(this.value);\n      node.type = \"JSXText\";\n      return node;\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsx_parseElement() {\n      let startPos = this.start, startLoc = this.startLoc;\n      this.next();\n      return this.jsx_parseElementAt(startPos, startLoc);\n    }\n\n    parseExprAtom(refShortHandDefaultPos) {\n      if (this.type === tok.jsxText)\n        return this.jsx_parseText();\n      else if (this.type === tok.jsxTagStart)\n        return this.jsx_parseElement();\n      else\n        return super.parseExprAtom(refShortHandDefaultPos);\n    }\n\n    readToken(code) {\n      let context = this.curContext();\n\n      if (context === tc_expr) return this.jsx_readToken();\n\n      if (context === tc_oTag || context === tc_cTag) {\n        if (isIdentifierStart(code)) return this.jsx_readWord();\n\n        if (code == 62) {\n          ++this.pos;\n          return this.finishToken(tok.jsxTagEnd);\n        }\n\n        if ((code === 34 || code === 39) && context == tc_oTag)\n          return this.jsx_readString(code);\n      }\n\n      if (code === 60 && this.exprAllowed && this.input.charCodeAt(this.pos + 1) !== 33) {\n        ++this.pos;\n        return this.finishToken(tok.jsxTagStart);\n      }\n      return super.readToken(code);\n    }\n\n    updateContext(prevType) {\n      if (this.type == tt.braceL) {\n        var curContext = this.curContext();\n        if (curContext == tc_oTag) this.context.push(tokContexts.b_expr);\n        else if (curContext == tc_expr) this.context.push(tokContexts.b_tmpl);\n        else super.updateContext(prevType);\n        this.exprAllowed = true;\n      } else if (this.type === tt.slash && prevType === tok.jsxTagStart) {\n        this.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n        this.context.push(tc_cTag); // reconsider as closing tag context\n        this.exprAllowed = false;\n      } else {\n        return super.updateContext(prevType);\n      }\n    }\n  };\n}\n","module.exports = {\n  quot: '\\u0022',\n  amp: '&',\n  apos: '\\u0027',\n  lt: '<',\n  gt: '>',\n  nbsp: '\\u00A0',\n  iexcl: '\\u00A1',\n  cent: '\\u00A2',\n  pound: '\\u00A3',\n  curren: '\\u00A4',\n  yen: '\\u00A5',\n  brvbar: '\\u00A6',\n  sect: '\\u00A7',\n  uml: '\\u00A8',\n  copy: '\\u00A9',\n  ordf: '\\u00AA',\n  laquo: '\\u00AB',\n  not: '\\u00AC',\n  shy: '\\u00AD',\n  reg: '\\u00AE',\n  macr: '\\u00AF',\n  deg: '\\u00B0',\n  plusmn: '\\u00B1',\n  sup2: '\\u00B2',\n  sup3: '\\u00B3',\n  acute: '\\u00B4',\n  micro: '\\u00B5',\n  para: '\\u00B6',\n  middot: '\\u00B7',\n  cedil: '\\u00B8',\n  sup1: '\\u00B9',\n  ordm: '\\u00BA',\n  raquo: '\\u00BB',\n  frac14: '\\u00BC',\n  frac12: '\\u00BD',\n  frac34: '\\u00BE',\n  iquest: '\\u00BF',\n  Agrave: '\\u00C0',\n  Aacute: '\\u00C1',\n  Acirc: '\\u00C2',\n  Atilde: '\\u00C3',\n  Auml: '\\u00C4',\n  Aring: '\\u00C5',\n  AElig: '\\u00C6',\n  Ccedil: '\\u00C7',\n  Egrave: '\\u00C8',\n  Eacute: '\\u00C9',\n  Ecirc: '\\u00CA',\n  Euml: '\\u00CB',\n  Igrave: '\\u00CC',\n  Iacute: '\\u00CD',\n  Icirc: '\\u00CE',\n  Iuml: '\\u00CF',\n  ETH: '\\u00D0',\n  Ntilde: '\\u00D1',\n  Ograve: '\\u00D2',\n  Oacute: '\\u00D3',\n  Ocirc: '\\u00D4',\n  Otilde: '\\u00D5',\n  Ouml: '\\u00D6',\n  times: '\\u00D7',\n  Oslash: '\\u00D8',\n  Ugrave: '\\u00D9',\n  Uacute: '\\u00DA',\n  Ucirc: '\\u00DB',\n  Uuml: '\\u00DC',\n  Yacute: '\\u00DD',\n  THORN: '\\u00DE',\n  szlig: '\\u00DF',\n  agrave: '\\u00E0',\n  aacute: '\\u00E1',\n  acirc: '\\u00E2',\n  atilde: '\\u00E3',\n  auml: '\\u00E4',\n  aring: '\\u00E5',\n  aelig: '\\u00E6',\n  ccedil: '\\u00E7',\n  egrave: '\\u00E8',\n  eacute: '\\u00E9',\n  ecirc: '\\u00EA',\n  euml: '\\u00EB',\n  igrave: '\\u00EC',\n  iacute: '\\u00ED',\n  icirc: '\\u00EE',\n  iuml: '\\u00EF',\n  eth: '\\u00F0',\n  ntilde: '\\u00F1',\n  ograve: '\\u00F2',\n  oacute: '\\u00F3',\n  ocirc: '\\u00F4',\n  otilde: '\\u00F5',\n  ouml: '\\u00F6',\n  divide: '\\u00F7',\n  oslash: '\\u00F8',\n  ugrave: '\\u00F9',\n  uacute: '\\u00FA',\n  ucirc: '\\u00FB',\n  uuml: '\\u00FC',\n  yacute: '\\u00FD',\n  thorn: '\\u00FE',\n  yuml: '\\u00FF',\n  OElig: '\\u0152',\n  oelig: '\\u0153',\n  Scaron: '\\u0160',\n  scaron: '\\u0161',\n  Yuml: '\\u0178',\n  fnof: '\\u0192',\n  circ: '\\u02C6',\n  tilde: '\\u02DC',\n  Alpha: '\\u0391',\n  Beta: '\\u0392',\n  Gamma: '\\u0393',\n  Delta: '\\u0394',\n  Epsilon: '\\u0395',\n  Zeta: '\\u0396',\n  Eta: '\\u0397',\n  Theta: '\\u0398',\n  Iota: '\\u0399',\n  Kappa: '\\u039A',\n  Lambda: '\\u039B',\n  Mu: '\\u039C',\n  Nu: '\\u039D',\n  Xi: '\\u039E',\n  Omicron: '\\u039F',\n  Pi: '\\u03A0',\n  Rho: '\\u03A1',\n  Sigma: '\\u03A3',\n  Tau: '\\u03A4',\n  Upsilon: '\\u03A5',\n  Phi: '\\u03A6',\n  Chi: '\\u03A7',\n  Psi: '\\u03A8',\n  Omega: '\\u03A9',\n  alpha: '\\u03B1',\n  beta: '\\u03B2',\n  gamma: '\\u03B3',\n  delta: '\\u03B4',\n  epsilon: '\\u03B5',\n  zeta: '\\u03B6',\n  eta: '\\u03B7',\n  theta: '\\u03B8',\n  iota: '\\u03B9',\n  kappa: '\\u03BA',\n  lambda: '\\u03BB',\n  mu: '\\u03BC',\n  nu: '\\u03BD',\n  xi: '\\u03BE',\n  omicron: '\\u03BF',\n  pi: '\\u03C0',\n  rho: '\\u03C1',\n  sigmaf: '\\u03C2',\n  sigma: '\\u03C3',\n  tau: '\\u03C4',\n  upsilon: '\\u03C5',\n  phi: '\\u03C6',\n  chi: '\\u03C7',\n  psi: '\\u03C8',\n  omega: '\\u03C9',\n  thetasym: '\\u03D1',\n  upsih: '\\u03D2',\n  piv: '\\u03D6',\n  ensp: '\\u2002',\n  emsp: '\\u2003',\n  thinsp: '\\u2009',\n  zwnj: '\\u200C',\n  zwj: '\\u200D',\n  lrm: '\\u200E',\n  rlm: '\\u200F',\n  ndash: '\\u2013',\n  mdash: '\\u2014',\n  lsquo: '\\u2018',\n  rsquo: '\\u2019',\n  sbquo: '\\u201A',\n  ldquo: '\\u201C',\n  rdquo: '\\u201D',\n  bdquo: '\\u201E',\n  dagger: '\\u2020',\n  Dagger: '\\u2021',\n  bull: '\\u2022',\n  hellip: '\\u2026',\n  permil: '\\u2030',\n  prime: '\\u2032',\n  Prime: '\\u2033',\n  lsaquo: '\\u2039',\n  rsaquo: '\\u203A',\n  oline: '\\u203E',\n  frasl: '\\u2044',\n  euro: '\\u20AC',\n  image: '\\u2111',\n  weierp: '\\u2118',\n  real: '\\u211C',\n  trade: '\\u2122',\n  alefsym: '\\u2135',\n  larr: '\\u2190',\n  uarr: '\\u2191',\n  rarr: '\\u2192',\n  darr: '\\u2193',\n  harr: '\\u2194',\n  crarr: '\\u21B5',\n  lArr: '\\u21D0',\n  uArr: '\\u21D1',\n  rArr: '\\u21D2',\n  dArr: '\\u21D3',\n  hArr: '\\u21D4',\n  forall: '\\u2200',\n  part: '\\u2202',\n  exist: '\\u2203',\n  empty: '\\u2205',\n  nabla: '\\u2207',\n  isin: '\\u2208',\n  notin: '\\u2209',\n  ni: '\\u220B',\n  prod: '\\u220F',\n  sum: '\\u2211',\n  minus: '\\u2212',\n  lowast: '\\u2217',\n  radic: '\\u221A',\n  prop: '\\u221D',\n  infin: '\\u221E',\n  ang: '\\u2220',\n  and: '\\u2227',\n  or: '\\u2228',\n  cap: '\\u2229',\n  cup: '\\u222A',\n  'int': '\\u222B',\n  there4: '\\u2234',\n  sim: '\\u223C',\n  cong: '\\u2245',\n  asymp: '\\u2248',\n  ne: '\\u2260',\n  equiv: '\\u2261',\n  le: '\\u2264',\n  ge: '\\u2265',\n  sub: '\\u2282',\n  sup: '\\u2283',\n  nsub: '\\u2284',\n  sube: '\\u2286',\n  supe: '\\u2287',\n  oplus: '\\u2295',\n  otimes: '\\u2297',\n  perp: '\\u22A5',\n  sdot: '\\u22C5',\n  lceil: '\\u2308',\n  rceil: '\\u2309',\n  lfloor: '\\u230A',\n  rfloor: '\\u230B',\n  lang: '\\u2329',\n  rang: '\\u232A',\n  loz: '\\u25CA',\n  spades: '\\u2660',\n  clubs: '\\u2663',\n  hearts: '\\u2665',\n  diams: '\\u2666'\n};\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","import * as React from \"react\"\n\ninterface CardProperties {\n  children?: React.ReactElement | React.ReactElement[]\n}\n\nconst Card = ({children}: CardProperties) => {\n  return (\n    <div className=\"p-4 space-y-4 rounded-xl drop-shadow-lg bg-zinc-100\">\n      {children}\n    </div>\n  )\n}\n\nexport default Card","import * as React from 'react'\n\nexport interface SectionProperties {\n  title: string\n  subtitle?: string\n  description?: string\n  className?: string\n  children: React.ReactElement | React.ReactElement[]\n}\n\nconst Section = ({title, subtitle, description, className, children}: SectionProperties) => {\n  return (\n    <div className={\"py-12 space-y-6 3xl:space-y-8 \" + className}>\n      { subtitle\n        ? <p className=\"text-base 3xl:text-lg text-center text-zinc-400\">{subtitle}</p>\n        : \"\"\n      }\n      <p className=\"text-center text-4xl 3xl:text-5xl\">\n        {title}\n      </p>\n      <div className=\"w-3/5 3xl:w-1/2 m-auto space-y-8\">\n        { description\n          ? <p className=\"pb-2 3xl:pb-4 text-base 3xl:text-lg text-center text-zinc-400\">{description}</p>\n          : \"\"\n        }\n        {children}\n      </div>\n    </div>\n  )\n}\n\nexport default Section","import * as React from 'react'\nimport { StaticImage } from 'gatsby-plugin-image'\nimport {\n  FaQuoteLeft as LeftQuote,\n  FaQuoteRight as RightQuote,\n} from \"react-icons/fa6\"\n\ninterface TestimonialProperties {\n  image?: React.ReactElement<typeof StaticImage>\n  contact: string\n  company?: string\n  children: React.ReactElement | string\n}\n\nconst Testimonial = ({image, contact, company, children}: TestimonialProperties) => {\n  return (\n    <div className=\"p-4 space-y-4 w-full col-span-2\">\n      { image\n          ? <div className=\"w-fit m-auto rounded-2xl overflow-clip\">{image}</div>\n          : \"\"\n      }\n      <div className=\"grid\">\n        <div className=\"col-start-1 col-end-1 row-start-1 row-end-1 text-zinc-200\">\n          <div className=\"flex h-full justify-between items-center\">\n            <LeftQuote size={80}/>\n            <RightQuote size={80}/>\n          </div>\n        </div>\n        <div className=\"col-start-1 col-end-1 row-start-1 row-end-1 space-y-4 text-center text-base 3xl:text-xl\">\n          {children}\n        </div>\n      </div>\n      <div className=\"italic text-center text-base 3xl:text-lg text-gray-400\">\n        {contact} {company ? `- ${company} ` : \"\"}\n      </div>\n    </div>\n  )\n}\n\nexport default Testimonial","import * as React from 'react'\nimport {\n  TbSquareRoundedChevronLeftFilled as LeftArrow,\n  TbSquareRoundedChevronRightFilled as RightArrow,\n} from \"react-icons/tb\"\nimport Card from './Card'\n\ninterface ItemProperties {\n  children: React.ReactElement\n}\n\nconst Item = ({children}: ItemProperties) => {\n  return (\n    <div className=\"w-full\">\n      {children}\n    </div>\n  )\n}\n\ninterface CarouselProperties {\n  children: React.ReactElement<typeof Item>[]\n}\n\nconst Carousel = ({children}: CarouselProperties) => {\n  const [currentIndex, setCurrentIndex] = React.useState(0);\n\n  const previousSlide = () => setCurrentIndex(currentIndex === 0 ? children.length - 1 : currentIndex - 1)\n  const nextSlide = () => setCurrentIndex(currentIndex === children.length - 1 ? 0 : currentIndex + 1)\n\n  return (\n    <Card>\n      <div className=\"flex\">\n        <button onClick={previousSlide} className=\"text-zinc-600\">\n          <LeftArrow size={36}/>\n        </button>\n        <div className=\"overflow-hidden relative\">\n          <div\n            className=\"flex transition ease-out duration-500\"\n            style={{\n              transform: `translateX(-${currentIndex * 100}%)`\n            }}\n          >\n            {\n              children.map((child, index) => {\n                return (\n                  <div key={index} className=\"w-full flex-shrink-0\">\n                    {child}\n                  </div>\n                )\n              })\n            }\n          </div>\n        <div className=\"w-full pb-4 flex justify-center gap-2\">\n            {\n              children.map((_, index) => {\n                const style = index === currentIndex\n                  ? \"w-6 3xl:w-8 bg-zinc-600\"\n                  : \"w-3 3xl:w-4 bg-zinc-300\"\n                return <button\n                  key={index}\n                  onClick={() => setCurrentIndex(index)}\n                  disabled={index === currentIndex}\n                  className={`h-3 3xl:h-4 rounded-full ${style}`}\n                />\n              })\n            }\n          </div>\n        </div>\n        <button onClick={nextSlide} className=\"text-zinc-600\">\n          <RightArrow size={36}/>\n        </button>\n      </div>\n    </Card>\n  )\n}\n\nCarousel.Item = Item\n\nexport default Carousel\n","export enum HorizontalOrientation {\n  Left,\n  Right\n}","import { StaticImage } from \"gatsby-plugin-image\"\nimport * as React from \"react\"\nimport Card from \"./Card\"\nimport { HorizontalOrientation } from \"../utilities/HorizontalOrientation\"\n\nexport interface ListCardProperties {\n  title: string\n  children: React.ReactElement<typeof Item>[]\n}\n\nconst ListCard = ({title, children}: ListCardProperties) => {\n  return (\n    <Card>\n      <p className=\"text-center text-3xl 3xl:text-4xl\">\n        {title}\n      </p>\n      <div>\n        {children}\n      </div>\n    </Card>\n  )\n}\n\ninterface ItemProperties {\n  image: React.ReactElement\n  imageOrientation: HorizontalOrientation\n  children: React.ReactElement[] | string[]\n}\n\nconst Item = ({image, imageOrientation, children}: ItemProperties) => {\n  return (\n    <div className=\"flex flex-row space-x-4\">\n      { imageOrientation === HorizontalOrientation.Left\n          ? <div>{image}</div>\n          : \"\"\n      }\n      <div className=\"flex flex-col justify-center gap-4\">\n        {children}\n      </div>\n      { imageOrientation === HorizontalOrientation.Right\n          ? <div>{image}</div>\n          : \"\"\n      }\n    </div>\n  )\n}\n\nListCard.Item = Item\n\nexport default ListCard\n","import * as React from \"react\"\n\ninterface ButtonProperties {\n  label: string\n  onClick?: React.MouseEventHandler\n}\n\nconst Button = ({label, onClick}: ButtonProperties) => {\n  return (\n    <button\n      onClick={onClick}\n      className=\"w-36 3xl:w-48 transition ease-in-out p-3 3xl:p-4 bg-zinc-300 hover:bg-lion hover:font-extrabold rounded-full text-base 3xl:text-lg\"\n    >\n      {label}\n    </button>\n  )\n}\n\nexport default Button","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('estree-jsx').Node} Node\n */\n\n/**\n * @typedef {CONTINUE | SKIP | EXIT} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed), when moving in an array.\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n */\n\n/**\n * @callback Visitor\n *   Handle a node.\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node`, the `Visitor` should\n *   return a new `Index` to specify the sibling to traverse after `node` is\n *   traversed.\n *   Adding or removing next siblings of `node` is handled as expected without\n *   needing to return a new `Index`.\n * @param {Node} node\n *   Found node.\n * @param {string | null} key\n *   Field at which `node` lives in its parent (or where a list of nodes lives).\n * @param {number | null} index\n *   Index where `node` lives if `parent[key]` is an array.\n * @param {Array<Node>} ancestors\n *   Ancestors of `node`.\n * @returns {Action | Index | ActionTuple | null | undefined | void}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @typedef Visitors\n *   Handle nodes when entering (preorder) and leaving (postorder).\n * @property {Visitor | null | undefined} [enter]\n *   Handle nodes when entering (preorder).\n * @property {Visitor | null | undefined} [leave]\n *   Handle nodes when leaving (postorder).\n */\n\nimport {color} from './color.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = Symbol('continue')\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = Symbol('exit')\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = Symbol('skip')\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) and/or *postorder* (**LRN**).\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor(s) when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * @param {Node} tree\n *   Tree to traverse\n * @param {Visitor | Visitors | null | undefined} [visitor]\n *   Handle each node.\n * @returns {void}\n *   Nothing.\n */\nexport function visit(tree, visitor) {\n  /** @type {Visitor | undefined} */\n  let enter\n  /** @type {Visitor | undefined} */\n  let leave\n\n  if (typeof visitor === 'function') {\n    enter = visitor\n  } else if (visitor && typeof visitor === 'object') {\n    if (visitor.enter) enter = visitor.enter\n    if (visitor.leave) leave = visitor.leave\n  }\n\n  build(tree, null, null, [])()\n\n  /**\n   * @param {Node} node\n   * @param {string | null} key\n   * @param {number | null} index\n   * @param {Array<Node>} parents\n   */\n  function build(node, key, index, parents) {\n    if (nodelike(node)) {\n      visit.displayName = 'node (' + color(node.type) + ')'\n    }\n\n    return visit\n\n    /**\n     * @returns {ActionTuple}\n     */\n    function visit() {\n      /** @type {ActionTuple} */\n      const result = enter ? toResult(enter(node, key, index, parents)) : []\n\n      if (result[0] === EXIT) {\n        return result\n      }\n\n      if (result[0] !== SKIP) {\n        /** @type {keyof node} */\n        let cKey\n\n        for (cKey in node) {\n          if (\n            own.call(node, cKey) &&\n            node[cKey] &&\n            typeof node[cKey] === 'object' &&\n            // @ts-expect-error: custom esast extension.\n            cKey !== 'data' &&\n            // @ts-expect-error: custom esast extension.\n            cKey !== 'position'\n          ) {\n            const grandparents = parents.concat(node)\n            /** @type {unknown} */\n            const value = node[cKey]\n\n            if (Array.isArray(value)) {\n              const nodes = /** @type {Array<unknown>} */ (value)\n              let cIndex = 0\n\n              while (cIndex > -1 && cIndex < nodes.length) {\n                const subvalue = nodes[cIndex]\n\n                if (nodelike(subvalue)) {\n                  const subresult = build(\n                    subvalue,\n                    cKey,\n                    cIndex,\n                    grandparents\n                  )()\n                  if (subresult[0] === EXIT) return subresult\n                  cIndex =\n                    typeof subresult[1] === 'number' ? subresult[1] : cIndex + 1\n                } else {\n                  cIndex++\n                }\n              }\n            } else if (nodelike(value)) {\n              const subresult = build(value, cKey, null, grandparents)()\n              if (subresult[0] === EXIT) return subresult\n            }\n          }\n        }\n      }\n\n      return leave ? toResult(leave(node, key, index, parents)) : result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {Action | Index | ActionTuple | null | undefined | void} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n\n/**\n * Check if something looks like a node.\n *\n * @param {unknown} value\n *   Anything.\n * @returns {value is Node}\n *   Whether `value` looks like a node.\n */\nfunction nodelike(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'type' in value &&\n      typeof value.type === 'string' &&\n      value.type.length > 0\n  )\n}\n","/**\n * @typedef {import('acorn').Comment} Comment\n * @typedef {import('acorn').Node} AcornNode\n * @typedef {import('acorn').Options} AcornOptions\n * @typedef {import('acorn').Token} Token\n * @typedef {import('estree').Node} EstreeNode\n * @typedef {import('estree').Program} Program\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} MicromarkPoint\n * @typedef {import('unist').Point} UnistPoint\n */\n\n/**\n * @typedef Acorn\n *   Acorn-like interface.\n * @property {import('acorn').parse} parse\n *   Parse a program.\n * @property {import('acorn').parseExpressionAt} parseExpressionAt\n *   Parse an expression.\n *\n * @typedef AcornLoc\n * @property {number} line\n * @property {number} column\n *\n * @typedef AcornErrorFields\n * @property {number} raisedAt\n * @property {number} pos\n * @property {AcornLoc} loc\n *\n * @typedef {Error & AcornErrorFields} AcornError\n *\n * @typedef Options\n *   Configuration.\n * @property {Acorn} acorn\n *   Typically `acorn`, object with `parse` and `parseExpressionAt` fields.\n * @property {AcornOptions | null | undefined} [acornOptions]\n *   Configuration for `acorn`.\n * @property {MicromarkPoint | null | undefined} [start]\n *   Place where events start.\n * @property {string | null | undefined} [prefix='']\n *   Text to place before events.\n * @property {string | null | undefined} [suffix='']\n *   Text to place after events.\n * @property {boolean | null | undefined} [expression=false]\n *   Whether this is a program or expression.\n * @property {boolean | null | undefined} [allowEmpty=false]\n *   Whether an empty expression is allowed (programs are always allowed to\n *   be empty).\n *\n * @typedef Result\n *   Result.\n * @property {Program | undefined} estree\n *   Program.\n * @property {AcornError | undefined} error\n *   Error if unparseable\n * @property {boolean} swallow\n *   Whether the error, if there is one, can be swallowed and more JavaScript\n *   could be valid.\n *\n * @typedef {[number, MicromarkPoint]} Stop\n *\n * @typedef Collection\n * @property {string} value\n * @property {Array<Stop>} stops\n */\n\nimport {visit} from 'estree-util-visit'\nimport {VFileMessage} from 'vfile-message'\n\n/**\n * Parse a list of micromark events with acorn.\n *\n * @param {Array<Event>} events\n *   Events.\n * @param {Options} options\n *   Configuration.\n * @returns {Result}\n *   Result.\n */\n// eslint-disable-next-line complexity\nexport function eventsToAcorn(events, options) {\n  const prefix = options.prefix || ''\n  const suffix = options.suffix || ''\n  const acornOptions = Object.assign({}, options.acornOptions)\n  /** @type {Array<Comment>} */\n  const comments = []\n  /** @type {Array<Token>} */\n  const tokens = []\n  const onComment = acornOptions.onComment\n  const onToken = acornOptions.onToken\n  let swallow = false\n  /** @type {AcornNode | undefined} */\n  let estree\n  /** @type {AcornError | undefined} */\n  let exception\n  /** @type {AcornOptions} */\n  const acornConfig = Object.assign({}, acornOptions, {\n    onComment: comments,\n    preserveParens: true\n  })\n  if (onToken) {\n    acornConfig.onToken = tokens\n  }\n  const collection = collect(events, [\n    'lineEnding',\n    // To do: these should be passed by users in parameters.\n    'expressionChunk',\n    // From tests.\n    'mdxFlowExpressionChunk',\n    // Flow chunk.\n    'mdxTextExpressionChunk',\n    // Text chunk.\n    // JSX:\n    'mdxJsxTextTagExpressionAttributeValue',\n    'mdxJsxTextTagAttributeValueExpressionValue',\n    'mdxJsxFlowTagExpressionAttributeValue',\n    'mdxJsxFlowTagAttributeValueExpressionValue',\n    // ESM:\n    'mdxjsEsmData'\n  ])\n  const source = collection.value\n  const value = prefix + source + suffix\n  const isEmptyExpression = options.expression && empty(source)\n  if (isEmptyExpression && !options.allowEmpty) {\n    throw new VFileMessage(\n      'Unexpected empty expression',\n      parseOffsetToUnistPoint(0),\n      'micromark-extension-mdx-expression:unexpected-empty-expression'\n    )\n  }\n  try {\n    estree =\n      options.expression && !isEmptyExpression\n        ? options.acorn.parseExpressionAt(value, 0, acornConfig)\n        : options.acorn.parse(value, acornConfig)\n  } catch (error_) {\n    const error = /** @type {AcornError} */ error_\n    const point = parseOffsetToUnistPoint(error.pos)\n    error.message = String(error.message).replace(/ \\(\\d+:\\d+\\)$/, '')\n    // Always defined in our unist points that come from micromark.\n\n    error.pos = point.offset\n    error.loc = {\n      line: point.line,\n      column: point.column - 1\n    }\n    exception = error\n    swallow =\n      error.raisedAt >= prefix.length + source.length ||\n      // Broken comments are raised at their start, not their end.\n      error.message === 'Unterminated comment'\n  }\n  if (estree && options.expression && !isEmptyExpression) {\n    if (empty(value.slice(estree.end, value.length - suffix.length))) {\n      estree = {\n        type: 'Program',\n        start: 0,\n        end: prefix.length + source.length,\n        // @ts-expect-error: It’s good.\n        body: [\n          {\n            type: 'ExpressionStatement',\n            expression: estree,\n            start: 0,\n            end: prefix.length + source.length\n          }\n        ],\n        sourceType: 'module',\n        comments: []\n      }\n    } else {\n      const point = parseOffsetToUnistPoint(estree.end)\n      const error =\n        /** @type {AcornError} */\n        new Error('Unexpected content after expression')\n      // Always defined in our unist points that come from micromark.\n\n      error.pos = point.offset\n      error.loc = {\n        line: point.line,\n        column: point.column - 1\n      }\n      exception = error\n      estree = undefined\n    }\n  }\n  if (estree) {\n    // @ts-expect-error: acorn *does* allow comments\n    estree.comments = comments\n\n    // @ts-expect-error: acorn looks enough like estree.\n    visit(estree, (esnode, field, index, parents) => {\n      let context =\n        /** @type {AcornNode | Array<AcornNode>} */\n        parents[parents.length - 1]\n      /** @type {string | number | null} */\n      let prop = field\n\n      // Remove non-standard `ParenthesizedExpression`.\n      // @ts-expect-error: included in acorn.\n      if (esnode.type === 'ParenthesizedExpression' && context && prop) {\n        /* c8 ignore next 5 */\n        if (typeof index === 'number') {\n          // @ts-expect-error: indexable.\n          context = context[prop]\n          prop = index\n        }\n\n        // @ts-expect-error: indexable.\n        context[prop] = esnode.expression\n      }\n      fixPosition(esnode)\n    })\n\n    // Comment positions are fixed by `visit` because they’re in the tree.\n    if (Array.isArray(onComment)) {\n      onComment.push(...comments)\n    } else if (typeof onComment === 'function') {\n      for (const comment of comments) {\n        onComment(\n          comment.type === 'Block',\n          comment.value,\n          comment.start,\n          comment.end,\n          comment.loc.start,\n          comment.loc.end\n        )\n      }\n    }\n    for (const token of tokens) {\n      // Ignore tokens that ends in prefix or start in suffix:\n      if (\n        token.end <= prefix.length ||\n        token.start - prefix.length >= source.length\n      ) {\n        continue\n      }\n      fixPosition(token)\n      if (Array.isArray(onToken)) {\n        onToken.push(token)\n      } else {\n        // `tokens` are not added if `onToken` is not defined, so it must be a\n        // function.\n\n        onToken(token)\n      }\n    }\n  }\n\n  // @ts-expect-error: It’s a program now.\n  return {\n    estree,\n    error: exception,\n    swallow\n  }\n\n  /**\n   * Update the position of a node.\n   *\n   * @param {AcornNode | EstreeNode | Token} nodeOrToken\n   * @returns {void}\n   */\n  function fixPosition(nodeOrToken) {\n    const pointStart = parseOffsetToUnistPoint(nodeOrToken.start)\n    const pointEnd = parseOffsetToUnistPoint(nodeOrToken.end)\n    // Always defined in our unist points that come from micromark.\n\n    nodeOrToken.start = pointStart.offset\n    nodeOrToken.end = pointEnd.offset\n    nodeOrToken.loc = {\n      start: {\n        line: pointStart.line,\n        column: pointStart.column - 1,\n        offset: pointStart.offset\n      },\n      end: {\n        line: pointEnd.line,\n        column: pointEnd.column - 1,\n        offset: pointEnd.offset\n      }\n    }\n    nodeOrToken.range = [nodeOrToken.start, nodeOrToken.end]\n  }\n\n  /**\n   * Turn an arbitrary offset into the parsed value, into a point in the source\n   * value.\n   *\n   * @param {number} acornOffset\n   * @returns {UnistPoint}\n   */\n  function parseOffsetToUnistPoint(acornOffset) {\n    let sourceOffset = acornOffset - prefix.length\n    if (sourceOffset < 0) {\n      sourceOffset = 0\n    } else if (sourceOffset > source.length) {\n      sourceOffset = source.length\n    }\n    let point = relativeToPoint(collection.stops, sourceOffset)\n    if (!point) {\n      point = {\n        line: options.start.line,\n        column: options.start.column,\n        offset: options.start.offset\n      }\n    }\n    return point\n  }\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return /^\\s*$/.test(\n    value\n      // Multiline comments.\n      .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '')\n      // Line comments.\n      // EOF instead of EOL is specifically not allowed, because that would\n      // mean the closing brace is on the commented-out line\n      .replace(/\\/\\/[^\\r\\n]*(\\r\\n|\\n|\\r)/g, '')\n  )\n}\n\n// Port from <https://github.com/wooorm/markdown-rs/blob/e692ab0/src/util/mdx_collect.rs#L15>.\n/**\n * @param {Array<Event>} events\n * @param {Array<string>} names\n * @returns {Collection}\n */\nfunction collect(events, names) {\n  /** @type {Collection} */\n  const result = {\n    value: '',\n    stops: []\n  }\n  let index = -1\n  while (++index < events.length) {\n    const event = events[index]\n\n    // Assume void.\n    if (event[0] === 'enter' && names.includes(event[1].type)) {\n      const chunks = event[2].sliceStream(event[1])\n\n      // Drop virtual spaces.\n      while (chunks.length > 0 && chunks[0] === -1) {\n        chunks.shift()\n      }\n      const value = serializeChunks(chunks)\n      result.stops.push([result.value.length, event[1].start])\n      result.value += value\n      result.stops.push([result.value.length, event[1].end])\n    }\n  }\n  return result\n}\n\n// Port from <https://github.com/wooorm/markdown-rs/blob/e692ab0/src/util/location.rs#L91>.\n/**\n * Turn a relative offset into an absolute offset.\n *\n * @param {Array<Stop>} stops\n * @param {number} relative\n * @returns {UnistPoint | undefined}\n */\nfunction relativeToPoint(stops, relative) {\n  let index = 0\n  while (index < stops.length && stops[index][0] <= relative) {\n    index += 1\n  }\n\n  // There are no points: that only occurs if there was an empty string.\n  if (index === 0) {\n    return undefined\n  }\n  const [stopRelative, stopAbsolute] = stops[index - 1]\n  const rest = relative - stopRelative\n  return {\n    line: stopAbsolute.line,\n    column: stopAbsolute.column + rest,\n    offset: stopAbsolute.offset + rest\n  }\n}\n\n// Copy from <https://github.com/micromark/micromark/blob/ce3593a/packages/micromark/dev/lib/create-tokenizer.js#L595>\n// To do: expose that?\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @returns {string}\n */\nfunction serializeChunks(chunks) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = '\\t'\n          break\n        }\n\n        /* c8 ignore next 6 */\n        case -1: {\n          if (atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          // eslint-disable-next-line unicorn/prefer-code-point\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('unist').Position} Position\n *\n * @typedef {[number, number]} RangeLike\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n *\n * @typedef LocLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {LocLike | null | undefined} [loc]\n * @property {RangeLike | null | undefined} [range]\n * @property {number | null | undefined} [start]\n * @property {number | null | undefined} [end]\n */\n\n/**\n * Turn an estree `node` into a unist `position`.\n *\n * @param {NodeLike | null | undefined} [node]\n *   estree node.\n * @returns {Position}\n *   unist position.\n */\nexport function positionFromEstree(node) {\n  const nodeLike = node || {}\n  const loc = nodeLike.loc || {}\n  const range = nodeLike.range || [0, 0]\n  const startColumn = loc.start\n    ? numberOrUndefined(loc.start.column)\n    : undefined\n  const endColumn = loc.end ? numberOrUndefined(loc.end.column) : undefined\n\n  return {\n    start: {\n      // @ts-expect-error: return no point / no position next major.\n      line: loc.start ? numberOrUndefined(loc.start.line) : undefined,\n      // @ts-expect-error: return no point / no position next major.\n      column: startColumn === undefined ? undefined : startColumn + 1,\n      offset: numberOrUndefined(range[0] || nodeLike.start)\n    },\n    end: {\n      // @ts-expect-error: return no point / no position next major.\n      line: loc.end ? numberOrUndefined(loc.end.line) : undefined,\n      // @ts-expect-error: return no point / no position next major.\n      column: endColumn === undefined ? undefined : endColumn + 1,\n      offset: numberOrUndefined(range[1] || nodeLike.end)\n    }\n  }\n}\n\n/**\n *\n * @param {number | null | undefined} value\n * @returns {number | undefined}\n */\nfunction numberOrUndefined(value) {\n  return typeof value === 'number' && value > -1 ? value : undefined\n}\n","/**\n * @typedef {import('estree').Program} Program\n * @typedef {import('micromark-util-events-to-acorn').Acorn} Acorn\n * @typedef {import('micromark-util-events-to-acorn').AcornOptions} AcornOptions\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @typedef MdxSignalOk\n *   Good result.\n * @property {'ok'} type\n *   Type.\n * @property {Program | undefined} estree\n *   Value.\n *\n * @typedef MdxSignalNok\n *   Bad result.\n * @property {'nok'} type\n *   Type.\n * @property {VFileMessage} message\n *   Value.\n *\n * @typedef {MdxSignalOk | MdxSignalNok} MdxSignal\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {eventsToAcorn} from 'micromark-util-events-to-acorn'\nimport {positionFromEstree} from 'unist-util-position-from-estree'\nimport {VFileMessage} from 'vfile-message'\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful\n * @param {TokenType} type\n *   Token type for whole (`{}`).\n * @param {TokenType} markerType\n *   Token type for the markers (`{`, `}`).\n * @param {TokenType} chunkType\n *   Token type for the value (`1`).\n * @param {Acorn | null | undefined} [acorn]\n *   Object with `acorn.parse` and `acorn.parseExpressionAt`.\n * @param {AcornOptions | null | undefined} [acornOptions]\n *   Configuration for acorn.\n * @param {boolean | null | undefined} [addResult=false]\n *   Add `estree` to token.\n * @param {boolean | null | undefined} [spread=false]\n *   Support a spread (`{...a}`) only.\n * @param {boolean | null | undefined} [allowEmpty=false]\n *   Support an empty expression.\n * @param {boolean | null | undefined} [allowLazy=false]\n *   Support lazy continuation of an expression.\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryMdxExpression(\n  effects,\n  ok,\n  type,\n  markerType,\n  chunkType,\n  acorn,\n  acornOptions,\n  addResult,\n  spread,\n  allowEmpty,\n  allowLazy\n) {\n  const self = this\n  const eventStart = this.events.length + 3 // Add main and marker token\n  let size = 0\n  /** @type {Point} */\n  let pointStart\n  /** @type {Error} */\n  let lastCrash\n  return start\n\n  /**\n   * Start of an MDX expression.\n   *\n   * ```markdown\n   * > | a {Math.PI} c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    pointStart = self.now()\n    return before\n  }\n\n  /**\n   * Before data.\n   *\n   * ```markdown\n   * > | a {Math.PI} c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    if (code === null) {\n      throw (\n        lastCrash ||\n        new VFileMessage(\n          'Unexpected end of file in expression, expected a corresponding closing brace for `{`',\n          self.now(),\n          'micromark-extension-mdx-expression:unexpected-eof'\n        )\n      )\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return eolAfter\n    }\n    if (code === 125 && size === 0) {\n      /** @type {MdxSignal} */\n      const next = acorn\n        ? mdxExpressionParse.call(\n            self,\n            acorn,\n            acornOptions,\n            eventStart,\n            pointStart,\n            allowEmpty || false,\n            spread || false\n          )\n        : {\n            type: 'ok',\n            estree: undefined\n          }\n      if (next.type === 'ok') {\n        effects.enter(markerType)\n        effects.consume(code)\n        effects.exit(markerType)\n        const token = effects.exit(type)\n        if (addResult && next.estree) {\n          Object.assign(token, {\n            estree: next.estree\n          })\n        }\n        return ok\n      }\n      lastCrash = next.message\n      effects.enter(chunkType)\n      effects.consume(code)\n      return inside\n    }\n    effects.enter(chunkType)\n    return inside(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | a {Math.PI} c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (\n      (code === 125 && size === 0) ||\n      code === null ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit(chunkType)\n      return before(code)\n    }\n\n    // Don’t count if gnostic.\n    if (code === 123 && !acorn) {\n      size += 1\n    } else if (code === 125) {\n      size -= 1\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /**\n   * After eol.\n   *\n   * ```markdown\n   *   | a {b +\n   * > | c} d\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function eolAfter(code) {\n    const now = self.now()\n\n    // Lazy continuation in a flow expression (or flow tag) is a syntax error.\n    if (\n      now.line !== pointStart.line &&\n      !allowLazy &&\n      self.parser.lazy[now.line]\n    ) {\n      // `markdown-rs` uses:\n      // ``Unexpected lazy line in expression in container, expected line to be prefixed with `>` when in a block quote, whitespace when in a list, etc``.\n      throw new VFileMessage(\n        'Unexpected end of file in expression, expected a corresponding closing brace for `{`',\n        self.now(),\n        'micromark-extension-mdx-expression:unexpected-eof'\n      )\n    }\n\n    // Idea: investigate if we’d need to use more complex stripping.\n    // Take this example:\n    //\n    // ```markdown\n    // >  aaa <b c={`\n    // >      d\n    // >  `} /> eee\n    // ```\n    //\n    // The block quote takes one space from each line, the paragraph doesn’t.\n    // The intent above is *perhaps* for the split to be as `>␠␠|␠␠␠␠|d`,\n    // Currently, we *don’t* do anything at all, it’s `>␠|␠␠␠␠␠|d` instead.\n    //\n    // Note: we used to have some handling here, and `markdown-rs` still does,\n    // which should be removed.\n    return before(code)\n  }\n}\n\n/**\n * Mix of `markdown-rs`’s `parse_expression` and `MdxExpressionParse`\n * functionality, to wrap our `eventsToAcorn`.\n *\n * In the future, the plan is to realise the rust way, which allows arbitrary\n * parsers.\n *\n * @this {TokenizeContext}\n * @param {Acorn} acorn\n * @param {AcornOptions | null | undefined} acornOptions\n * @param {number} eventStart\n * @param {Point} pointStart\n * @param {boolean} allowEmpty\n * @param {boolean} spread\n * @returns {MdxSignal}\n */\n// eslint-disable-next-line max-params\nfunction mdxExpressionParse(\n  acorn,\n  acornOptions,\n  eventStart,\n  pointStart,\n  allowEmpty,\n  spread\n) {\n  // Gnostic mode: parse w/ acorn.\n  const result = eventsToAcorn(this.events.slice(eventStart), {\n    acorn,\n    acornOptions,\n    start: pointStart,\n    expression: true,\n    allowEmpty,\n    prefix: spread ? '({' : '',\n    suffix: spread ? '})' : ''\n  })\n  const estree = result.estree\n\n  // Get the spread value.\n  if (spread && estree) {\n    // Should always be the case as we wrap in `d={}`\n\n    const head = estree.body[0]\n    // Can occur in some complex attributes.\n    /* c8 ignore next 11 */\n    if (\n      head.type !== 'ExpressionStatement' ||\n      head.expression.type !== 'ObjectExpression'\n    ) {\n      throw new VFileMessage(\n        'Unexpected `' +\n          head.type +\n          '` in code: expected an object spread (`{...spread}`)',\n        positionFromEstree(head).start,\n        'micromark-extension-mdx-expression:non-spread'\n      )\n    } else if (head.expression.properties[1]) {\n      throw new VFileMessage(\n        'Unexpected extra content in spread: only a single spread is supported',\n        positionFromEstree(head.expression.properties[1]).start,\n        'micromark-extension-mdx-expression:spread-extra'\n      )\n    } else if (\n      head.expression.properties[0] &&\n      head.expression.properties[0].type !== 'SpreadElement'\n    ) {\n      throw new VFileMessage(\n        'Unexpected `' +\n          head.expression.properties[0].type +\n          '` in code: only spread elements are supported',\n        positionFromEstree(head.expression.properties[0]).start,\n        'micromark-extension-mdx-expression:non-spread'\n      )\n    }\n  }\n  if (result.error) {\n    return {\n      type: 'nok',\n      message: new VFileMessage(\n        'Could not parse expression with acorn: ' + result.error.message,\n        {\n          line: result.error.loc.line,\n          column: result.error.loc.column + 1,\n          offset: result.error.pos\n        },\n        'micromark-extension-mdx-expression:acorn'\n      )\n    }\n  }\n  return {\n    type: 'ok',\n    estree\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-events-to-acorn').Acorn} Acorn\n * @typedef {import('micromark-util-events-to-acorn').AcornOptions} AcornOptions\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {Acorn | null | undefined} [acorn]\n *   Acorn parser to use (optional).\n * @property {AcornOptions | null | undefined} [acornOptions]\n *   Configuration for acorn (default: `{ecmaVersion: 2020, locations: true,\n *   sourceType: 'module'}`).\n *\n *   All fields except `locations` can be set.\n * @property {boolean | null | undefined} [addResult=false]\n *   Whether to add `estree` fields to tokens with results from acorn.\n * @property {boolean | null | undefined} [spread=false]\n *   Undocumented option to parse only a spread (used by\n *   `micromark-extension-mdx-jsx` to parse spread attributes).\n * @property {boolean | null | undefined} [allowEmpty=true]\n *   Undocumented option to disallow empty attributes (used by\n *   `micromark-extension-mdx-jsx` to prohobit empty attribute values).\n */\n\nimport {factoryMdxExpression} from 'micromark-factory-mdx-expression'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Create an extension for `micromark` to enable MDX expression syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable MDX\n *   expression syntax.\n */\nexport function mdxExpression(options) {\n  const options_ = options || {}\n  const addResult = options_.addResult\n  const acorn = options_.acorn\n  // Hidden: `micromark-extension-mdx-jsx` supports expressions in tags,\n  // and one of them is only “spread” elements.\n  // It also has expressions that are not allowed to be empty (`<x y={}/>`).\n  // Instead of duplicating code there, this are two small hidden feature here\n  // to test that behavior.\n  const spread = options_.spread\n  let allowEmpty = options_.allowEmpty\n  /** @type {AcornOptions} */\n  let acornOptions\n  if (allowEmpty === null || allowEmpty === undefined) {\n    allowEmpty = true\n  }\n  if (acorn) {\n    if (!acorn.parseExpressionAt) {\n      throw new Error(\n        'Expected a proper `acorn` instance passed in as `options.acorn`'\n      )\n    }\n    acornOptions = Object.assign(\n      {\n        ecmaVersion: 2020,\n        sourceType: 'module'\n      },\n      options_.acornOptions\n    )\n  } else if (options_.acornOptions || options_.addResult) {\n    throw new Error('Expected an `acorn` instance passed in as `options.acorn`')\n  }\n  return {\n    flow: {\n      [123]: {\n        tokenize: tokenizeFlowExpression,\n        concrete: true\n      }\n    },\n    text: {\n      [123]: {\n        tokenize: tokenizeTextExpression\n      }\n    }\n  }\n\n  /**\n   * MDX expression (flow).\n   *\n   * ```markdown\n   * > | {Math.PI}\n   *     ^^^^^^^^^\n   * ```\n   *\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeFlowExpression(effects, ok, nok) {\n    const self = this\n    return start\n\n    /**\n     * Start of an MDX expression (flow).\n     *\n     * ```markdown\n     * > | {Math.PI}\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // To do: in `markdown-rs`, constructs need to parse the indent themselves.\n      // This should also be introduced in `micromark-js`.\n\n      return before(code)\n    }\n\n    /**\n     * After optional whitespace, before expression.\n     *\n     * ```markdown\n     * > | {Math.PI}\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function before(code) {\n      return factoryMdxExpression.call(\n        self,\n        effects,\n        after,\n        'mdxFlowExpression',\n        'mdxFlowExpressionMarker',\n        'mdxFlowExpressionChunk',\n        acorn,\n        acornOptions,\n        addResult,\n        spread,\n        allowEmpty\n      )(code)\n    }\n\n    /**\n     * After expression.\n     *\n     * ```markdown\n     * > | {Math.PI}\n     *              ^\n     * ```\n     *\n     * @type {State}\n     */\n    function after(code) {\n      return markdownSpace(code)\n        ? factorySpace(effects, end, 'whitespace')(code)\n        : end(code)\n    }\n\n    /**\n     * After expression, after optional whitespace.\n     *\n     * ```markdown\n     * > | {Math.PI}␠␊\n     *               ^\n     * ```\n     *\n     * @type {State}\n     */\n    function end(code) {\n      return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n    }\n  }\n\n  /**\n   * MDX expression (text).\n   *\n   * ```markdown\n   * > | a {Math.PI} c.\n   *       ^^^^^^^^^\n   * ```\n   *\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeTextExpression(effects, ok) {\n    const self = this\n    return start\n\n    /**\n     * Start of an MDX expression (text).\n     *\n     * ```markdown\n     * > | a {Math.PI} c.\n     *       ^\n     * ```\n     *\n     *\n     * @type {State}\n     */\n    function start(code) {\n      return factoryMdxExpression.call(\n        self,\n        effects,\n        ok,\n        'mdxTextExpression',\n        'mdxTextExpressionMarker',\n        'mdxTextExpressionChunk',\n        acorn,\n        acornOptions,\n        addResult,\n        spread,\n        allowEmpty,\n        true\n      )(code)\n    }\n  }\n}\n","// This module is generated by `build.js`.\nexport const start =\n  /[$A-Z_a-z\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u0870-\\u0887\\u0889-\\u088E\\u08A0-\\u08C9\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u1711\\u171F-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4C\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7CA\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7D9\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/\nexport const cont =\n  /[\\d\\u00B7\\u0300-\\u036F\\u0387\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u0669\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u06F0-\\u06F9\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07C0-\\u07C9\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u0898-\\u089F\\u08CA-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096F\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09E6-\\u09EF\\u09FE\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A66-\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AE6-\\u0AEF\\u0AFA-\\u0AFF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B55-\\u0B57\\u0B62\\u0B63\\u0B66-\\u0B6F\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C04\\u0C3C\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0CE6-\\u0CEF\\u0CF3\\u0D00-\\u0D03\\u0D3B\\u0D3C\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D66-\\u0D6F\\u0D81-\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0E50-\\u0E59\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECE\\u0ED0-\\u0ED9\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1040-\\u1049\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F-\\u109D\\u135D-\\u135F\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u180F-\\u1819\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u194F\\u19D0-\\u19DA\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AB0-\\u1ABD\\u1ABF-\\u1ACE\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BB0-\\u1BB9\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1C40-\\u1C49\\u1C50-\\u1C59\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF4\\u1CF7-\\u1CF9\\u1DC0-\\u1DFF\\u200C\\u200D\\u203F\\u2040\\u2054\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA620-\\uA629\\uA66F\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA82C\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F1\\uA8FF-\\uA909\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9D0-\\uA9D9\\uA9E5\\uA9F0-\\uA9F9\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA50-\\uAA59\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF10-\\uFF19\\uFF3F]/\n","import {start as startRe, cont as contRe} from './regex.js'\n\n/**\n * Checks if the given character code can start an identifier.\n *\n * @param {number} code\n *   Character code to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// To do: support astrals.\nexport function start(code) {\n  return startRe.test(String.fromCharCode(code))\n}\n\n/**\n * Checks if the given character code can continue an identifier.\n *\n * @param {number} code\n *   Character code to check.\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// To do: support astrals.\nexport function cont(code) {\n  const character = String.fromCharCode(code)\n  return startRe.test(character) || contRe.test(character)\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name) {\n  let index = -1\n\n  while (++index < name.length) {\n    if (!(index ? cont : start)(name.charCodeAt(index))) return false\n  }\n\n  // `false` if `name` is empty.\n  return index > 0\n}\n","/**\n * @typedef {import('micromark-factory-mdx-expression').Acorn} Acorn\n * @typedef {import('micromark-factory-mdx-expression').AcornOptions} AcornOptions\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {start as idStart, cont as idCont} from 'estree-util-is-identifier-name'\nimport {factoryMdxExpression} from 'micromark-factory-mdx-expression'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace,\n  unicodeWhitespace\n} from 'micromark-util-character'\nimport {VFileMessage} from 'vfile-message'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {Acorn | undefined} acorn\n * @param {AcornOptions | undefined} acornOptions\n * @param {boolean | undefined} addResult\n * @param {boolean | undefined} allowLazy\n * @param {TokenType} tagType\n * @param {TokenType} tagMarkerType\n * @param {TokenType} tagClosingMarkerType\n * @param {TokenType} tagSelfClosingMarker\n * @param {TokenType} tagNameType\n * @param {TokenType} tagNamePrimaryType\n * @param {TokenType} tagNameMemberMarkerType\n * @param {TokenType} tagNameMemberType\n * @param {TokenType} tagNamePrefixMarkerType\n * @param {TokenType} tagNameLocalType\n * @param {TokenType} tagExpressionAttributeType\n * @param {TokenType} tagExpressionAttributeMarkerType\n * @param {TokenType} tagExpressionAttributeValueType\n * @param {TokenType} tagAttributeType\n * @param {TokenType} tagAttributeNameType\n * @param {TokenType} tagAttributeNamePrimaryType\n * @param {TokenType} tagAttributeNamePrefixMarkerType\n * @param {TokenType} tagAttributeNameLocalType\n * @param {TokenType} tagAttributeInitializerMarkerType\n * @param {TokenType} tagAttributeValueLiteralType\n * @param {TokenType} tagAttributeValueLiteralMarkerType\n * @param {TokenType} tagAttributeValueLiteralValueType\n * @param {TokenType} tagAttributeValueExpressionType\n * @param {TokenType} tagAttributeValueExpressionMarkerType\n * @param {TokenType} tagAttributeValueExpressionValueType\n */\n// eslint-disable-next-line max-params\nexport function factoryTag(\n  effects,\n  ok,\n  nok,\n  acorn,\n  acornOptions,\n  addResult,\n  allowLazy,\n  tagType,\n  tagMarkerType,\n  tagClosingMarkerType,\n  tagSelfClosingMarker,\n  tagNameType,\n  tagNamePrimaryType,\n  tagNameMemberMarkerType,\n  tagNameMemberType,\n  tagNamePrefixMarkerType,\n  tagNameLocalType,\n  tagExpressionAttributeType,\n  tagExpressionAttributeMarkerType,\n  tagExpressionAttributeValueType,\n  tagAttributeType,\n  tagAttributeNameType,\n  tagAttributeNamePrimaryType,\n  tagAttributeNamePrefixMarkerType,\n  tagAttributeNameLocalType,\n  tagAttributeInitializerMarkerType,\n  tagAttributeValueLiteralType,\n  tagAttributeValueLiteralMarkerType,\n  tagAttributeValueLiteralValueType,\n  tagAttributeValueExpressionType,\n  tagAttributeValueExpressionMarkerType,\n  tagAttributeValueExpressionValueType\n) {\n  const self = this\n  /** @type {State} */\n  let returnState\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  return start\n\n  /**\n   * Start of MDX: JSX.\n   *\n   * ```markdown\n   * > | a <B /> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(tagType)\n    effects.enter(tagMarkerType)\n    effects.consume(code)\n    effects.exit(tagMarkerType)\n    return startAfter\n  }\n\n  /**\n   * After `<`.\n   *\n   * ```markdown\n   * > | a <B /> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function startAfter(code) {\n    // Deviate from JSX, which allows arbitrary whitespace.\n    // See: <https://github.com/micromark/micromark-extension-mdx-jsx/issues/7>.\n    if (markdownLineEndingOrSpace(code)) {\n      return nok(code)\n    }\n\n    // Any other ES whitespace does not get this treatment.\n    returnState = nameBefore\n    return esWhitespaceStart(code)\n  }\n\n  /**\n   * Before name, self slash, or end of tag for fragments.\n   *\n   * ```markdown\n   * > | a <B> c\n   *        ^\n   * > | a </B> c\n   *        ^\n   * > | a <> b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function nameBefore(code) {\n    // Closing tag.\n    if (code === 47) {\n      effects.enter(tagClosingMarkerType)\n      effects.consume(code)\n      effects.exit(tagClosingMarkerType)\n      returnState = closingTagNameBefore\n      return esWhitespaceStart\n    }\n\n    // Fragment opening tag.\n    if (code === 62) {\n      return tagEnd(code)\n    }\n\n    // Start of a name.\n    if (code !== null && idStart(code)) {\n      effects.enter(tagNameType)\n      effects.enter(tagNamePrimaryType)\n      effects.consume(code)\n      return primaryName\n    }\n    crash(\n      code,\n      'before name',\n      'a character that can start a name, such as a letter, `$`, or `_`' +\n        (code === 33\n          ? ' (note: to create a comment in MDX, use `{/* text */}`)'\n          : '')\n    )\n  }\n\n  /**\n   * Before name of closing tag or end of closing fragment tag.\n   *\n   * ```markdown\n   * > | a </> b\n   *         ^\n   * > | a </B> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function closingTagNameBefore(code) {\n    // Fragment closing tag.\n    if (code === 62) {\n      return tagEnd(code)\n    }\n\n    // Start of a closing tag name.\n    if (code !== null && idStart(code)) {\n      effects.enter(tagNameType)\n      effects.enter(tagNamePrimaryType)\n      effects.consume(code)\n      return primaryName\n    }\n    crash(\n      code,\n      'before name',\n      'a character that can start a name, such as a letter, `$`, or `_`' +\n        (code === 42 || code === 47\n          ? ' (note: JS comments in JSX tags are not supported in MDX)'\n          : '')\n    )\n  }\n\n  /**\n   * In primary name.\n   *\n   * ```markdown\n   * > | a <Bc> d\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function primaryName(code) {\n    // Continuation of name: remain.\n    if (code === 45 || (code !== null && idCont(code))) {\n      effects.consume(code)\n      return primaryName\n    }\n\n    // End of name.\n    if (\n      code === 46 ||\n      code === 47 ||\n      code === 58 ||\n      code === 62 ||\n      code === 123 ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      effects.exit(tagNamePrimaryType)\n      returnState = primaryNameAfter\n      return esWhitespaceStart(code)\n    }\n    crash(\n      code,\n      'in name',\n      'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag' +\n        (code === 64\n          ? ' (note: to create a link in MDX, use `[text](url)`)'\n          : '')\n    )\n  }\n\n  /**\n   * After primary name.\n   *\n   * ```markdown\n   * > | a <b.c> d\n   *         ^\n   * > | a <b:c> d\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function primaryNameAfter(code) {\n    // Start of a member name.\n    if (code === 46) {\n      effects.enter(tagNameMemberMarkerType)\n      effects.consume(code)\n      effects.exit(tagNameMemberMarkerType)\n      returnState = memberNameBefore\n      return esWhitespaceStart\n    }\n\n    // Start of a local name.\n    if (code === 58) {\n      effects.enter(tagNamePrefixMarkerType)\n      effects.consume(code)\n      effects.exit(tagNamePrefixMarkerType)\n      returnState = localNameBefore\n      return esWhitespaceStart\n    }\n\n    // End of name.\n    if (\n      code === 47 ||\n      code === 62 ||\n      code === 123 ||\n      (code !== null && idStart(code))\n    ) {\n      effects.exit(tagNameType)\n      return attributeBefore(code)\n    }\n    crash(\n      code,\n      'after name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * Before member name.\n   *\n   * ```markdown\n   * > | a <b.c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function memberNameBefore(code) {\n    // Start of a member name.\n    if (code !== null && idStart(code)) {\n      effects.enter(tagNameMemberType)\n      effects.consume(code)\n      return memberName\n    }\n    crash(\n      code,\n      'before member name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * In member name.\n   *\n   * ```markdown\n   * > | a <b.cd> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function memberName(code) {\n    // Continuation of name: remain.\n    if (code === 45 || (code !== null && idCont(code))) {\n      effects.consume(code)\n      return memberName\n    }\n\n    // End of name.\n    // Note: no `:` allowed here.\n    if (\n      code === 46 ||\n      code === 47 ||\n      code === 62 ||\n      code === 123 ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      effects.exit(tagNameMemberType)\n      returnState = memberNameAfter\n      return esWhitespaceStart(code)\n    }\n    crash(\n      code,\n      'in member name',\n      'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag' +\n        (code === 64\n          ? ' (note: to create a link in MDX, use `[text](url)`)'\n          : '')\n    )\n  }\n\n  /**\n   * After member name.\n   *\n   * ```markdown\n   * > | a <b.c> d\n   *           ^\n   * > | a <b.c.d> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function memberNameAfter(code) {\n    // Start another member name.\n    if (code === 46) {\n      effects.enter(tagNameMemberMarkerType)\n      effects.consume(code)\n      effects.exit(tagNameMemberMarkerType)\n      returnState = memberNameBefore\n      return esWhitespaceStart\n    }\n\n    // End of name.\n    if (\n      code === 47 ||\n      code === 62 ||\n      code === 123 ||\n      (code !== null && idStart(code))\n    ) {\n      effects.exit(tagNameType)\n      return attributeBefore(code)\n    }\n    crash(\n      code,\n      'after member name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * Local member name.\n   *\n   * ```markdown\n   * > | a <b:c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function localNameBefore(code) {\n    // Start of a local name.\n    if (code !== null && idStart(code)) {\n      effects.enter(tagNameLocalType)\n      effects.consume(code)\n      return localName\n    }\n    crash(\n      code,\n      'before local name',\n      'a character that can start a name, such as a letter, `$`, or `_`' +\n        (code === 43 ||\n        (code !== null && code > 46 && code < 58) /* `/` - `9` */\n          ? ' (note: to create a link in MDX, use `[text](url)`)'\n          : '')\n    )\n  }\n\n  /**\n   * In local name.\n   *\n   * ```markdown\n   * > | a <b:cd> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function localName(code) {\n    // Continuation of name: remain.\n    if (code === 45 || (code !== null && idCont(code))) {\n      effects.consume(code)\n      return localName\n    }\n\n    // End of local name (note that we don’t expect another colon, or a member).\n    if (\n      code === 47 ||\n      code === 62 ||\n      code === 123 ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      effects.exit(tagNameLocalType)\n      returnState = localNameAfter\n      return esWhitespaceStart(code)\n    }\n    crash(\n      code,\n      'in local name',\n      'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * After local name.\n   *\n   * This is like as `primary_name_after`, but we don’t expect colons or\n   * periods.\n   *\n   * ```markdown\n   * > | a <b.c> d\n   *           ^\n   * > | a <b.c.d> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function localNameAfter(code) {\n    // End of name.\n    if (\n      code === 47 ||\n      code === 62 ||\n      code === 123 ||\n      (code !== null && idStart(code))\n    ) {\n      effects.exit(tagNameType)\n      return attributeBefore(code)\n    }\n    crash(\n      code,\n      'after local name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * Before attribute.\n   *\n   * ```markdown\n   * > | a <b /> c\n   *          ^\n   * > | a <b > c\n   *          ^\n   * > | a <b {...c}> d\n   *          ^\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeBefore(code) {\n    // Self-closing.\n    if (code === 47) {\n      effects.enter(tagSelfClosingMarker)\n      effects.consume(code)\n      effects.exit(tagSelfClosingMarker)\n      returnState = selfClosing\n      return esWhitespaceStart\n    }\n\n    // End of tag.\n    if (code === 62) {\n      return tagEnd(code)\n    }\n\n    // Attribute expression.\n    if (code === 123) {\n      return factoryMdxExpression.call(\n        self,\n        effects,\n        attributeExpressionAfter,\n        tagExpressionAttributeType,\n        tagExpressionAttributeMarkerType,\n        tagExpressionAttributeValueType,\n        acorn,\n        acornOptions,\n        addResult,\n        true,\n        false,\n        allowLazy\n      )(code)\n    }\n\n    // Start of an attribute name.\n    if (code !== null && idStart(code)) {\n      effects.enter(tagAttributeType)\n      effects.enter(tagAttributeNameType)\n      effects.enter(tagAttributeNamePrimaryType)\n      effects.consume(code)\n      return attributePrimaryName\n    }\n    crash(\n      code,\n      'before attribute name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * After attribute expression.\n   *\n   * ```markdown\n   * > | a <b {c} d/> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeExpressionAfter(code) {\n    returnState = attributeBefore\n    return esWhitespaceStart(code)\n  }\n\n  /**\n   * In primary attribute name.\n   *\n   * ```markdown\n   * > | a <b cd/> e\n   *           ^\n   * > | a <b c:d> e\n   *           ^\n   * > | a <b c=d> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributePrimaryName(code) {\n    // Continuation of name: remain.\n    if (code === 45 || (code !== null && idCont(code))) {\n      effects.consume(code)\n      return attributePrimaryName\n    }\n\n    // End of attribute name or tag.\n    if (\n      code === 47 ||\n      code === 58 ||\n      code === 61 ||\n      code === 62 ||\n      code === 123 ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      effects.exit(tagAttributeNamePrimaryType)\n      returnState = attributePrimaryNameAfter\n      return esWhitespaceStart(code)\n    }\n    crash(\n      code,\n      'in attribute name',\n      'an attribute name character such as letters, digits, `$`, or `_`; `=` to initialize a value; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * After primary attribute name.\n   *\n   * ```markdown\n   * > | a <b c/> d\n   *           ^\n   * > | a <b c:d> e\n   *           ^\n   * > | a <b c=d> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributePrimaryNameAfter(code) {\n    // Start of a local name.\n    if (code === 58) {\n      effects.enter(tagAttributeNamePrefixMarkerType)\n      effects.consume(code)\n      effects.exit(tagAttributeNamePrefixMarkerType)\n      returnState = attributeLocalNameBefore\n      return esWhitespaceStart\n    }\n\n    // Initializer: start of an attribute value.\n    if (code === 61) {\n      effects.exit(tagAttributeNameType)\n      effects.enter(tagAttributeInitializerMarkerType)\n      effects.consume(code)\n      effects.exit(tagAttributeInitializerMarkerType)\n      returnState = attributeValueBefore\n      return esWhitespaceStart\n    }\n\n    // End of tag / new attribute.\n    if (\n      code === 47 ||\n      code === 62 ||\n      code === 123 ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      (code !== null && idStart(code))\n    ) {\n      effects.exit(tagAttributeNameType)\n      effects.exit(tagAttributeType)\n      returnState = attributeBefore\n      return esWhitespaceStart(code)\n    }\n    crash(\n      code,\n      'after attribute name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag'\n    )\n  }\n\n  /**\n   * Before local attribute name.\n   *\n   * ```markdown\n   * > | a <b c:d/> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeLocalNameBefore(code) {\n    // Start of a local name.\n    if (code !== null && idStart(code)) {\n      effects.enter(tagAttributeNameLocalType)\n      effects.consume(code)\n      return attributeLocalName\n    }\n    crash(\n      code,\n      'before local attribute name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag'\n    )\n  }\n\n  /**\n   * In local attribute name.\n   *\n   * ```markdown\n   * > | a <b c:de/> f\n   *             ^\n   * > | a <b c:d=e/> f\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeLocalName(code) {\n    // Continuation of name: remain.\n    if (code === 45 || (code !== null && idCont(code))) {\n      effects.consume(code)\n      return attributeLocalName\n    }\n\n    // End of local name (note that we don’t expect another colon).\n    if (\n      code === 47 ||\n      code === 61 ||\n      code === 62 ||\n      code === 123 ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      effects.exit(tagAttributeNameLocalType)\n      effects.exit(tagAttributeNameType)\n      returnState = attributeLocalNameAfter\n      return esWhitespaceStart(code)\n    }\n    crash(\n      code,\n      'in local attribute name',\n      'an attribute name character such as letters, digits, `$`, or `_`; `=` to initialize a value; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /**\n   * After local attribute name.\n   *\n   * ```markdown\n   * > | a <b c:d/> f\n   *             ^\n   * > | a <b c:d=e/> f\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeLocalNameAfter(code) {\n    // Start of an attribute value.\n    if (code === 61) {\n      effects.enter(tagAttributeInitializerMarkerType)\n      effects.consume(code)\n      effects.exit(tagAttributeInitializerMarkerType)\n      returnState = attributeValueBefore\n      return esWhitespaceStart\n    }\n\n    // End of name.\n    if (\n      code === 47 ||\n      code === 62 ||\n      code === 123 ||\n      (code !== null && idStart(code))\n    ) {\n      effects.exit(tagAttributeType)\n      return attributeBefore(code)\n    }\n    crash(\n      code,\n      'after local attribute name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag'\n    )\n  }\n\n  /**\n   * After `=`, before value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"/> e\n   *            ^\n   * > | a <b c={d}/> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeValueBefore(code) {\n    // Start of double- or single quoted value.\n    if (code === 34 || code === 39) {\n      effects.enter(tagAttributeValueLiteralType)\n      effects.enter(tagAttributeValueLiteralMarkerType)\n      effects.consume(code)\n      effects.exit(tagAttributeValueLiteralMarkerType)\n      marker = code\n      return attributeValueQuotedStart\n    }\n\n    // Attribute value expression.\n    if (code === 123) {\n      return factoryMdxExpression.call(\n        self,\n        effects,\n        attributeValueExpressionAfter,\n        tagAttributeValueExpressionType,\n        tagAttributeValueExpressionMarkerType,\n        tagAttributeValueExpressionValueType,\n        acorn,\n        acornOptions,\n        addResult,\n        false,\n        false,\n        allowLazy\n      )(code)\n    }\n    crash(\n      code,\n      'before attribute value',\n      'a character that can start an attribute value, such as `\"`, `\\'`, or `{`' +\n        (code === 60\n          ? ' (note: to use an element or fragment as a prop value in MDX, use `{<element />}`)'\n          : '')\n    )\n  }\n\n  /**\n   * After attribute value expression.\n   *\n   * ```markdown\n   * > | a <b c={d} e/> f\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeValueExpressionAfter(code) {\n    effects.exit(tagAttributeType)\n    returnState = attributeBefore\n    return esWhitespaceStart(code)\n  }\n\n  /**\n   * Before quoted literal attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"/> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeValueQuotedStart(code) {\n    if (code === null) {\n      crash(\n        code,\n        'in attribute value',\n        'a corresponding closing quote `' + String.fromCodePoint(marker) + '`'\n      )\n    }\n    if (code === marker) {\n      effects.enter(tagAttributeValueLiteralMarkerType)\n      effects.consume(code)\n      effects.exit(tagAttributeValueLiteralMarkerType)\n      effects.exit(tagAttributeValueLiteralType)\n      effects.exit(tagAttributeType)\n      marker = undefined\n      returnState = attributeBefore\n      return esWhitespaceStart\n    }\n    if (markdownLineEnding(code)) {\n      returnState = attributeValueQuotedStart\n      return esWhitespaceStart(code)\n    }\n    effects.enter(tagAttributeValueLiteralValueType)\n    return attributeValueQuoted(code)\n  }\n\n  /**\n   * In quoted literal attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"/> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function attributeValueQuoted(code) {\n    if (code === null || code === marker || markdownLineEnding(code)) {\n      effects.exit(tagAttributeValueLiteralValueType)\n      return attributeValueQuotedStart(code)\n    }\n    effects.consume(code)\n    return attributeValueQuoted\n  }\n\n  /**\n   * After self-closing slash.\n   *\n   * ```markdown\n   * > | a <b/> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function selfClosing(code) {\n    if (code === 62) {\n      return tagEnd(code)\n    }\n    crash(\n      code,\n      'after self-closing slash',\n      '`>` to end the tag' +\n        (code === 42 || code === 47\n          ? ' (note: JS comments in JSX tags are not supported in MDX)'\n          : '')\n    )\n  }\n\n  /**\n   * At final `>`.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagEnd(code) {\n    effects.enter(tagMarkerType)\n    effects.consume(code)\n    effects.exit(tagMarkerType)\n    effects.exit(tagType)\n    return ok\n  }\n\n  /**\n   * Before optional ECMAScript whitespace.\n   *\n   * ```markdown\n   * > | a <a b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function esWhitespaceStart(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return esWhitespaceEolAfter\n    }\n    if (markdownSpace(code) || unicodeWhitespace(code)) {\n      effects.enter('esWhitespace')\n      return esWhitespaceInside(code)\n    }\n    return returnState(code)\n  }\n\n  /**\n   * In ECMAScript whitespace.\n   *\n   * ```markdown\n   * > | a <a  b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function esWhitespaceInside(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('esWhitespace')\n      return esWhitespaceStart(code)\n    }\n    if (markdownSpace(code) || unicodeWhitespace(code)) {\n      effects.consume(code)\n      return esWhitespaceInside\n    }\n    effects.exit('esWhitespace')\n    return returnState(code)\n  }\n\n  /**\n   * After eol in whitespace.\n   *\n   * ```markdown\n   * > | a <a\\nb> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function esWhitespaceEolAfter(code) {\n    // Lazy continuation in a flow tag is a syntax error.\n    if (!allowLazy && self.parser.lazy[self.now().line]) {\n      throw new VFileMessage(\n        'Unexpected lazy line in container, expected line to be prefixed with `>` when in a block quote, whitespace when in a list, etc',\n        self.now(),\n        'micromark-extension-mdx-jsx:unexpected-eof'\n      )\n    }\n    return esWhitespaceStart(code)\n  }\n\n  /**\n   * Crash at a nonconforming character.\n   *\n   * @param {Code} code\n   * @param {string} at\n   * @param {string} expect\n   */\n  function crash(code, at, expect) {\n    throw new VFileMessage(\n      'Unexpected ' +\n        (code === null\n          ? 'end of file'\n          : 'character `' +\n            (code === 96 ? '` ` `' : String.fromCodePoint(code)) +\n            '` (' +\n            serializeCharCode(code) +\n            ')') +\n        ' ' +\n        at +\n        ', expected ' +\n        expect,\n      self.now(),\n      'micromark-extension-mdx-jsx:unexpected-' +\n        (code === null ? 'eof' : 'character')\n    )\n  }\n}\n\n/**\n * @param {NonNullable<Code>} code\n * @returns {string}\n */\nfunction serializeCharCode(code) {\n  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0')\n}\n","/**\n * @typedef {import('micromark-factory-mdx-expression').Acorn} Acorn\n * @typedef {import('micromark-factory-mdx-expression').AcornOptions} AcornOptions\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryTag} from './factory-tag.js'\n\n/**\n * Parse JSX (text).\n *\n * @param {Acorn | undefined} acorn\n *   Acorn parser to use (optional).\n * @param {AcornOptions | undefined} acornOptions\n *   Configuration for acorn.\n * @param {boolean | undefined} addResult\n *   Whether to add `estree` fields to tokens with results from acorn.\n * @returns {Construct}\n *   Construct.\n */\nexport function jsxText(acorn, acornOptions, addResult) {\n  return {\n    tokenize: tokenizeJsxText\n  }\n\n  /**\n   * MDX JSX (text).\n   *\n   * ```markdown\n   * > | a <b />.\n   *       ^^^^^\n   * ```\n   *\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeJsxText(effects, ok, nok) {\n    return factoryTag.call(\n      this,\n      effects,\n      ok,\n      nok,\n      acorn,\n      acornOptions,\n      addResult,\n      true,\n      'mdxJsxTextTag',\n      'mdxJsxTextTagMarker',\n      'mdxJsxTextTagClosingMarker',\n      'mdxJsxTextTagSelfClosingMarker',\n      'mdxJsxTextTagName',\n      'mdxJsxTextTagNamePrimary',\n      'mdxJsxTextTagNameMemberMarker',\n      'mdxJsxTextTagNameMember',\n      'mdxJsxTextTagNamePrefixMarker',\n      'mdxJsxTextTagNameLocal',\n      'mdxJsxTextTagExpressionAttribute',\n      'mdxJsxTextTagExpressionAttributeMarker',\n      'mdxJsxTextTagExpressionAttributeValue',\n      'mdxJsxTextTagAttribute',\n      'mdxJsxTextTagAttributeName',\n      'mdxJsxTextTagAttributeNamePrimary',\n      'mdxJsxTextTagAttributeNamePrefixMarker',\n      'mdxJsxTextTagAttributeNameLocal',\n      'mdxJsxTextTagAttributeInitializerMarker',\n      'mdxJsxTextTagAttributeValueLiteral',\n      'mdxJsxTextTagAttributeValueLiteralMarker',\n      'mdxJsxTextTagAttributeValueLiteralValue',\n      'mdxJsxTextTagAttributeValueExpression',\n      'mdxJsxTextTagAttributeValueExpressionMarker',\n      'mdxJsxTextTagAttributeValueExpressionValue'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-factory-mdx-expression').Acorn} Acorn\n * @typedef {import('micromark-factory-mdx-expression').AcornOptions} AcornOptions\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTag} from './factory-tag.js'\n\n/**\n * Parse JSX (flow).\n *\n * @param {Acorn | undefined} acorn\n *   Acorn parser to use (optional).\n * @param {AcornOptions | undefined} acornOptions\n *   Configuration for acorn.\n * @param {boolean | undefined} addResult\n *   Whether to add `estree` fields to tokens with results from acorn.\n * @returns {Construct}\n *   Construct.\n */\nexport function jsxFlow(acorn, acornOptions, addResult) {\n  return {\n    tokenize: tokenizeJsxFlow,\n    concrete: true\n  }\n\n  /**\n   * MDX JSX (flow).\n   *\n   * ```markdown\n   * > | <A />\n   *     ^^^^^\n   * ```\n   *\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeJsxFlow(effects, ok, nok) {\n    const self = this\n    return start\n\n    /**\n     * Start of MDX: JSX (flow).\n     *\n     * ```markdown\n     * > | <A />\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // To do: in `markdown-rs`, constructs need to parse the indent themselves.\n      // This should also be introduced in `micromark-js`.\n\n      return before(code)\n    }\n\n    /**\n     * After optional whitespace, before of MDX JSX (flow).\n     *\n     * ```markdown\n     * > | <A />\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function before(code) {\n      return factoryTag.call(\n        self,\n        effects,\n        after,\n        nok,\n        acorn,\n        acornOptions,\n        addResult,\n        false,\n        'mdxJsxFlowTag',\n        'mdxJsxFlowTagMarker',\n        'mdxJsxFlowTagClosingMarker',\n        'mdxJsxFlowTagSelfClosingMarker',\n        'mdxJsxFlowTagName',\n        'mdxJsxFlowTagNamePrimary',\n        'mdxJsxFlowTagNameMemberMarker',\n        'mdxJsxFlowTagNameMember',\n        'mdxJsxFlowTagNamePrefixMarker',\n        'mdxJsxFlowTagNameLocal',\n        'mdxJsxFlowTagExpressionAttribute',\n        'mdxJsxFlowTagExpressionAttributeMarker',\n        'mdxJsxFlowTagExpressionAttributeValue',\n        'mdxJsxFlowTagAttribute',\n        'mdxJsxFlowTagAttributeName',\n        'mdxJsxFlowTagAttributeNamePrimary',\n        'mdxJsxFlowTagAttributeNamePrefixMarker',\n        'mdxJsxFlowTagAttributeNameLocal',\n        'mdxJsxFlowTagAttributeInitializerMarker',\n        'mdxJsxFlowTagAttributeValueLiteral',\n        'mdxJsxFlowTagAttributeValueLiteralMarker',\n        'mdxJsxFlowTagAttributeValueLiteralValue',\n        'mdxJsxFlowTagAttributeValueExpression',\n        'mdxJsxFlowTagAttributeValueExpressionMarker',\n        'mdxJsxFlowTagAttributeValueExpressionValue'\n      )(code)\n    }\n\n    /**\n     * After an MDX JSX (flow) tag.\n     *\n     * ```markdown\n     * > | <A>\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function after(code) {\n      return markdownSpace(code)\n        ? factorySpace(effects, end, 'whitespace')(code)\n        : end(code)\n    }\n\n    /**\n     * After an MDX JSX (flow) tag, after optional whitespace.\n     *\n     * ```markdown\n     * > | <A> <B>\n     *         ^\n     * ```\n     *\n     * @type {State}\n     */\n    function end(code) {\n      // Another tag.\n      return code === 60\n        ? start(code)\n        : code === null || markdownLineEnding(code)\n        ? ok(code)\n        : nok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-factory-mdx-expression').Acorn} Acorn\n * @typedef {import('micromark-factory-mdx-expression').AcornOptions} AcornOptions\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {Acorn | null | undefined} [acorn]\n *   Acorn parser to use (optional).\n * @property {AcornOptions | null | undefined} [acornOptions]\n *   Configuration for acorn (default: `{ecmaVersion: 2020, locations: true,\n *   sourceType: 'module'}`).\n *\n *   All fields except `locations` can be set.\n * @property {boolean | null | undefined} [addResult=false]\n *   Whether to add `estree` fields to tokens with results from acorn.\n */\n\nimport {jsxText} from './jsx-text.js'\nimport {jsxFlow} from './jsx-flow.js'\n\n/**\n * Create an extension for `micromark` to enable MDX JSX syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable MDX\n *   JSX syntax.\n */\nexport function mdxJsx(options) {\n  const settings = options || {}\n  const acorn = settings.acorn\n  /** @type {AcornOptions | undefined} */\n  let acornOptions\n  if (acorn) {\n    if (!acorn.parse || !acorn.parseExpressionAt) {\n      throw new Error(\n        'Expected a proper `acorn` instance passed in as `options.acorn`'\n      )\n    }\n    acornOptions = Object.assign(\n      {\n        ecmaVersion: 2020,\n        sourceType: 'module'\n      },\n      settings.acornOptions,\n      {\n        locations: true\n      }\n    )\n  } else if (settings.acornOptions || settings.addResult) {\n    throw new Error('Expected an `acorn` instance passed in as `options.acorn`')\n  }\n  return {\n    flow: {\n      [60]: jsxFlow(\n        acorn || undefined,\n        acornOptions,\n        settings.addResult || false\n      )\n    },\n    text: {\n      [60]: jsxText(\n        acorn || undefined,\n        acornOptions,\n        settings.addResult || false\n      )\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\n// To do: next major: expose functions.\n\n/**\n * Extension for `micromark` that can be passed in `extensions` to disable\n * some CommonMark syntax (code (indented), autolinks, and HTML (flow and\n * text)) for MDX.\n *\n * @type {Extension}\n */\nexport const mdxMd = {\n  disable: {null: ['autolink', 'codeIndented', 'htmlFlow', 'htmlText']}\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-events-to-acorn').Acorn} Acorn\n * @typedef {import('micromark-util-events-to-acorn').AcornOptions} AcornOptions\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef Options\n *   Configuration (required).\n * @property {Acorn} acorn\n *   Acorn parser to use (required).\n * @property {AcornOptions | null | undefined} [acornOptions]\n *   Configuration for acorn (default: `{ecmaVersion: 2020, locations: true,\n *   sourceType: 'module'}`).\n *   all fields except `locations` can be set\n * @property {boolean | null | undefined} [addResult=false]\n *   Whether to add `estree` fields to tokens with results from acorn.\n */\n\nimport {blankLine} from 'micromark-core-commonmark'\nimport {asciiAlpha, markdownLineEnding} from 'micromark-util-character'\nimport {eventsToAcorn} from 'micromark-util-events-to-acorn'\nimport {positionFromEstree} from 'unist-util-position-from-estree'\nimport {VFileMessage} from 'vfile-message'\nconst blankLineBefore = {\n  tokenize: tokenizeNextBlank,\n  partial: true\n}\nconst allowedAcornTypes = new Set([\n  'ExportAllDeclaration',\n  'ExportDefaultDeclaration',\n  'ExportNamedDeclaration',\n  'ImportDeclaration'\n])\n\n/**\n * Create an extension for `micromark` to enable MDX ESM syntax.\n *\n * @param {Options} options\n *   Configuration (required).\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable MDX\n *   ESM syntax.\n */\nexport function mdxjsEsm(options) {\n  const exportImportConstruct = {\n    tokenize: tokenizeExportImport,\n    concrete: true\n  }\n  if (!options || !options.acorn || !options.acorn.parse) {\n    throw new Error('Expected an `acorn` instance passed in as `options.acorn`')\n  }\n  const acorn = options.acorn\n  const acornOptions = Object.assign(\n    {\n      ecmaVersion: 2020,\n      sourceType: 'module'\n    },\n    options.acornOptions\n  )\n  return {\n    flow: {\n      [101]: exportImportConstruct,\n      [105]: exportImportConstruct\n    }\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeExportImport(effects, ok, nok) {\n    const self = this\n    /** @type {Array<string>} */\n    const definedModuleSpecifiers =\n      self.parser.definedModuleSpecifiers ||\n      (self.parser.definedModuleSpecifiers = [])\n    const eventStart = this.events.length + 1 // Add the main `mdxjsEsm` token\n    let buffer = ''\n    return self.interrupt ? nok : start\n\n    /**\n     * Start of MDX ESM.\n     *\n     * ```markdown\n     * > | import a from 'b'\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Only at the start of a line, not at whitespace or in a container.\n      if (self.now().column > 1) return nok(code)\n      effects.enter('mdxjsEsm')\n      effects.enter('mdxjsEsmData')\n      effects.consume(code)\n      // eslint-disable-next-line unicorn/prefer-code-point\n      buffer += String.fromCharCode(code)\n      return word\n    }\n\n    /**\n     * In keyword.\n     *\n     * ```markdown\n     * > | import a from 'b'\n     *     ^^^^^^\n     * ```\n     *\n     * @type {State}\n     */\n    function word(code) {\n      if (asciiAlpha(code)) {\n        effects.consume(code)\n        // @ts-expect-error: definitely a number.\n        // eslint-disable-next-line unicorn/prefer-code-point\n        buffer += String.fromCharCode(code)\n        return word\n      }\n      if ((buffer === 'import' || buffer === 'export') && code === 32) {\n        effects.consume(code)\n        return inside\n      }\n      return nok(code)\n    }\n\n    /**\n     * In data.\n     *\n     * ```markdown\n     * > | import a from 'b'\n     *           ^\n     * ```\n     *\n     * @type {State}\n     */\n    function inside(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('mdxjsEsmData')\n        return lineStart(code)\n      }\n      effects.consume(code)\n      return inside\n    }\n\n    /**\n     * At line ending.\n     *\n     * ```markdown\n     * > | import a from 'b'\n     *                      ^\n     *   | export {a}\n     * ```\n     *\n     * @type {State}\n     */\n    function lineStart(code) {\n      if (code === null) {\n        return atEnd(code)\n      }\n      if (markdownLineEnding(code)) {\n        return effects.check(blankLineBefore, atEnd, continuationStart)(code)\n      }\n      effects.enter('mdxjsEsmData')\n      return inside(code)\n    }\n\n    /**\n     * At line ending that continues.\n     *\n     * ```markdown\n     * > | import a from 'b'\n     *                      ^\n     *   | export {a}\n     * ```\n     *\n     * @type {State}\n     */\n    function continuationStart(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n\n    /**\n     * At end of line (blank or eof).\n     *\n     * ```markdown\n     * > | import a from 'b'\n     *                      ^\n     * ```\n     *\n     * @type {State}\n     */\n    function atEnd(code) {\n      const result = eventsToAcorn(self.events.slice(eventStart), {\n        acorn,\n        acornOptions,\n        prefix:\n          definedModuleSpecifiers.length > 0\n            ? 'var ' + definedModuleSpecifiers.join(',') + '\\n'\n            : ''\n      })\n      if (result.error) {\n        // There’s an error, which could be solved with more content, and there\n        // is more content.\n        if (code !== null && result.swallow) {\n          return continuationStart(code)\n        }\n        throw new VFileMessage(\n          'Could not parse import/exports with acorn: ' + String(result.error),\n          {\n            line: result.error.loc.line,\n            column: result.error.loc.column + 1,\n            offset: result.error.pos\n          },\n          'micromark-extension-mdxjs-esm:acorn'\n        )\n      }\n      // Remove the `VariableDeclaration`.\n      if (definedModuleSpecifiers.length > 0) {\n        const declaration = result.estree.body.shift()\n      }\n      let index = -1\n      while (++index < result.estree.body.length) {\n        const node = result.estree.body[index]\n        if (!allowedAcornTypes.has(node.type)) {\n          throw new VFileMessage(\n            'Unexpected `' +\n              node.type +\n              '` in code: only import/exports are supported',\n            positionFromEstree(node),\n            'micromark-extension-mdxjs-esm:non-esm'\n          )\n        }\n\n        // Otherwise, when we’re not interrupting (hacky, because `interrupt` is\n        // used to parse containers and “sniff” if this is ESM), collect all the\n        // local values that are imported.\n        if (node.type === 'ImportDeclaration' && !self.interrupt) {\n          let index = -1\n          while (++index < node.specifiers.length) {\n            const specifier = node.specifiers[index]\n            definedModuleSpecifiers.push(specifier.local.name)\n          }\n        }\n      }\n      Object.assign(\n        effects.exit('mdxjsEsm'),\n        options.addResult\n          ? {\n              estree: result.estree\n            }\n          : undefined\n      )\n      return ok(code)\n    }\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @typedef {import('estree-jsx').Program} Program\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n *\n * @typedef {import('../index.js').MdxFlowExpression} MdxFlowExpression\n * @typedef {import('../index.js').MdxTextExpression} MdxTextExpression\n */\n\n/**\n * Extension for `mdast-util-from-markdown` to enable MDX expressions.\n *\n * When using the syntax extension with `addResult`, nodes will have a\n * `data.estree` field set to an ESTree `Program` node.\n *\n * @type {FromMarkdownExtension}\n */\nexport const mdxExpressionFromMarkdown = {\n  enter: {\n    mdxFlowExpression: enterMdxFlowExpression,\n    mdxTextExpression: enterMdxTextExpression\n  },\n  exit: {\n    mdxFlowExpression: exitMdxExpression,\n    mdxFlowExpressionChunk: exitMdxExpressionData,\n    mdxTextExpression: exitMdxExpression,\n    mdxTextExpressionChunk: exitMdxExpressionData\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable MDX ESM.\n *\n * @type {ToMarkdownExtension}\n */\nexport const mdxExpressionToMarkdown = {\n  handlers: {\n    mdxFlowExpression: handleMdxExpression,\n    mdxTextExpression: handleMdxExpression\n  },\n  unsafe: [\n    {character: '{', inConstruct: ['phrasing']},\n    {atBreak: true, character: '{'}\n  ]\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterMdxFlowExpression(token) {\n  this.enter({type: 'mdxFlowExpression', value: ''}, token)\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterMdxTextExpression(token) {\n  this.enter({type: 'mdxTextExpression', value: ''}, token)\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitMdxExpression(token) {\n  const value = this.resume()\n  /** @type {Program | undefined} */\n  // @ts-expect-error: estree.\n  const estree = token.estree\n  const node = /** @type {MdxFlowExpression | MdxTextExpression} */ (\n    this.exit(token)\n  )\n  node.value = value\n\n  if (estree) {\n    node.data = {estree}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitMdxExpressionData(token) {\n  this.config.enter.data.call(this, token)\n  this.config.exit.data.call(this, token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {MdxFlowExpression | MdxTextExpression} node\n */\nfunction handleMdxExpression(node) {\n  const value = node.value || ''\n  return '{' + value + '}'\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * List of legacy HTML named character references that don’t need a trailing semicolon.\n *\n * @type {Array<string>}\n */\nexport const characterEntitiesLegacy = [\n  'AElig',\n  'AMP',\n  'Aacute',\n  'Acirc',\n  'Agrave',\n  'Aring',\n  'Atilde',\n  'Auml',\n  'COPY',\n  'Ccedil',\n  'ETH',\n  'Eacute',\n  'Ecirc',\n  'Egrave',\n  'Euml',\n  'GT',\n  'Iacute',\n  'Icirc',\n  'Igrave',\n  'Iuml',\n  'LT',\n  'Ntilde',\n  'Oacute',\n  'Ocirc',\n  'Ograve',\n  'Oslash',\n  'Otilde',\n  'Ouml',\n  'QUOT',\n  'REG',\n  'THORN',\n  'Uacute',\n  'Ucirc',\n  'Ugrave',\n  'Uuml',\n  'Yacute',\n  'aacute',\n  'acirc',\n  'acute',\n  'aelig',\n  'agrave',\n  'amp',\n  'aring',\n  'atilde',\n  'auml',\n  'brvbar',\n  'ccedil',\n  'cedil',\n  'cent',\n  'copy',\n  'curren',\n  'deg',\n  'divide',\n  'eacute',\n  'ecirc',\n  'egrave',\n  'eth',\n  'euml',\n  'frac12',\n  'frac14',\n  'frac34',\n  'gt',\n  'iacute',\n  'icirc',\n  'iexcl',\n  'igrave',\n  'iquest',\n  'iuml',\n  'laquo',\n  'lt',\n  'macr',\n  'micro',\n  'middot',\n  'nbsp',\n  'not',\n  'ntilde',\n  'oacute',\n  'ocirc',\n  'ograve',\n  'ordf',\n  'ordm',\n  'oslash',\n  'otilde',\n  'ouml',\n  'para',\n  'plusmn',\n  'pound',\n  'quot',\n  'raquo',\n  'reg',\n  'sect',\n  'shy',\n  'sup1',\n  'sup2',\n  'sup3',\n  'szlig',\n  'thorn',\n  'times',\n  'uacute',\n  'ucirc',\n  'ugrave',\n  'uml',\n  'uuml',\n  'yacute',\n  'yen',\n  'yuml'\n]\n","/**\n * Map of invalid numeric character references to their replacements, according to HTML.\n *\n * @type {Record<number, string>}\n */\nexport const characterReferenceInvalid = {\n  0: '�',\n  128: '€',\n  130: '‚',\n  131: 'ƒ',\n  132: '„',\n  133: '…',\n  134: '†',\n  135: '‡',\n  136: 'ˆ',\n  137: '‰',\n  138: 'Š',\n  139: '‹',\n  140: 'Œ',\n  142: 'Ž',\n  145: '‘',\n  146: '’',\n  147: '“',\n  148: '”',\n  149: '•',\n  150: '–',\n  151: '—',\n  152: '˜',\n  153: '™',\n  154: 'š',\n  155: '›',\n  156: 'œ',\n  158: 'ž',\n  159: 'Ÿ'\n}\n","/**\n * Check if the given character code, or the character code at the first\n * character, is decimal.\n *\n * @param {string|number} character\n * @returns {boolean} Whether `character` is a decimal\n */\nexport function isDecimal(character) {\n  const code =\n    typeof character === 'string' ? character.charCodeAt(0) : character\n\n  return code >= 48 && code <= 57 /* 0-9 */\n}\n","/**\n * Check if the given character code, or the character code at the first\n * character, is hexadecimal.\n *\n * @param {string|number} character\n * @returns {boolean} Whether `character` is hexadecimal\n */\nexport function isHexadecimal(character) {\n  const code =\n    typeof character === 'string' ? character.charCodeAt(0) : character\n\n  return (\n    (code >= 97 /* a */ && code <= 102) /* z */ ||\n    (code >= 65 /* A */ && code <= 70) /* Z */ ||\n    (code >= 48 /* A */ && code <= 57) /* Z */\n  )\n}\n","import {isAlphabetical} from 'is-alphabetical'\nimport {isDecimal} from 'is-decimal'\n\n/**\n * Check if the given character code, or the character code at the first\n * character, is alphanumerical.\n *\n * @param {string|number} character\n * @returns {boolean} Whether `character` is alphanumerical.\n */\nexport function isAlphanumerical(character) {\n  return isAlphabetical(character) || isDecimal(character)\n}\n","/**\n * Check if the given character code, or the character code at the first\n * character, is alphabetical.\n *\n * @param {string|number} character\n * @returns {boolean} Whether `character` is alphabetical.\n */\nexport function isAlphabetical(character) {\n  const code =\n    typeof character === 'string' ? character.charCodeAt(0) : character\n\n  return (\n    (code >= 97 && code <= 122) /* a-z */ ||\n    (code >= 65 && code <= 90) /* A-Z */\n  )\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\nimport {characterEntitiesLegacy} from 'character-entities-legacy'\nimport {characterReferenceInvalid} from 'character-reference-invalid'\nimport {isDecimal} from 'is-decimal'\nimport {isHexadecimal} from 'is-hexadecimal'\nimport {isAlphanumerical} from 'is-alphanumerical'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\n\nconst fromCharCode = String.fromCharCode\n\n// Warning messages.\nconst messages = [\n  '',\n  /* 1: Non terminated (named) */\n  'Named character references must be terminated by a semicolon',\n  /* 2: Non terminated (numeric) */\n  'Numeric character references must be terminated by a semicolon',\n  /* 3: Empty (named) */\n  'Named character references cannot be empty',\n  /* 4: Empty (numeric) */\n  'Numeric character references cannot be empty',\n  /* 5: Unknown (named) */\n  'Named character references must be known',\n  /* 6: Disallowed (numeric) */\n  'Numeric character references cannot be disallowed',\n  /* 7: Prohibited (numeric) */\n  'Numeric character references cannot be outside the permissible Unicode range'\n]\n\n/**\n * Parse HTML character references.\n *\n * @param {string} value\n * @param {import('../index.js').Options} [options={}]\n */\nexport function parseEntities(value, options = {}) {\n  const additional =\n    typeof options.additional === 'string'\n      ? options.additional.charCodeAt(0)\n      : options.additional\n  /** @type {Array<string>} */\n  const result = []\n  let index = 0\n  let lines = -1\n  let queue = ''\n  /** @type {Point|undefined} */\n  let point\n  /** @type {Array<number>|undefined} */\n  let indent\n\n  if (options.position) {\n    if ('start' in options.position || 'indent' in options.position) {\n      // @ts-expect-error: points don’t have indent.\n      indent = options.position.indent\n      // @ts-expect-error: points don’t have indent.\n      point = options.position.start\n    } else {\n      point = options.position\n    }\n  }\n\n  let line = (point ? point.line : 0) || 1\n  let column = (point ? point.column : 0) || 1\n\n  // Cache the current point.\n  let previous = now()\n  /** @type {number|undefined} */\n  let character\n\n  // Ensure the algorithm walks over the first character (inclusive).\n  index--\n\n  while (++index <= value.length) {\n    // If the previous character was a newline.\n    if (character === 10 /* `\\n` */) {\n      column = (indent ? indent[lines] : 0) || 1\n    }\n\n    character = value.charCodeAt(index)\n\n    if (character === 38 /* `&` */) {\n      const following = value.charCodeAt(index + 1)\n\n      // The behavior depends on the identity of the next character.\n      if (\n        following === 9 /* `\\t` */ ||\n        following === 10 /* `\\n` */ ||\n        following === 12 /* `\\f` */ ||\n        following === 32 /* ` ` */ ||\n        following === 38 /* `&` */ ||\n        following === 60 /* `<` */ ||\n        Number.isNaN(following) ||\n        (additional && following === additional)\n      ) {\n        // Not a character reference.\n        // No characters are consumed, and nothing is returned.\n        // This is not an error, either.\n        queue += fromCharCode(character)\n        column++\n        continue\n      }\n\n      const start = index + 1\n      let begin = start\n      let end = start\n      /** @type {string} */\n      let type\n\n      if (following === 35 /* `#` */) {\n        // Numerical reference.\n        end = ++begin\n\n        // The behavior further depends on the next character.\n        const following = value.charCodeAt(end)\n\n        if (following === 88 /* `X` */ || following === 120 /* `x` */) {\n          // ASCII hexadecimal digits.\n          type = 'hexadecimal'\n          end = ++begin\n        } else {\n          // ASCII decimal digits.\n          type = 'decimal'\n        }\n      } else {\n        // Named reference.\n        type = 'named'\n      }\n\n      let characterReferenceCharacters = ''\n      let characterReference = ''\n      let characters = ''\n      // Each type of character reference accepts different characters.\n      // This test is used to detect whether a reference has ended (as the semicolon\n      // is not strictly needed).\n      const test =\n        type === 'named'\n          ? isAlphanumerical\n          : type === 'decimal'\n          ? isDecimal\n          : isHexadecimal\n\n      end--\n\n      while (++end <= value.length) {\n        const following = value.charCodeAt(end)\n\n        if (!test(following)) {\n          break\n        }\n\n        characters += fromCharCode(following)\n\n        // Check if we can match a legacy named reference.\n        // If so, we cache that as the last viable named reference.\n        // This ensures we do not need to walk backwards later.\n        if (type === 'named' && characterEntitiesLegacy.includes(characters)) {\n          characterReferenceCharacters = characters\n          // @ts-expect-error: always able to decode.\n          characterReference = decodeNamedCharacterReference(characters)\n        }\n      }\n\n      let terminated = value.charCodeAt(end) === 59 /* `;` */\n\n      if (terminated) {\n        end++\n\n        const namedReference =\n          type === 'named' ? decodeNamedCharacterReference(characters) : false\n\n        if (namedReference) {\n          characterReferenceCharacters = characters\n          characterReference = namedReference\n        }\n      }\n\n      let diff = 1 + end - start\n      let reference = ''\n\n      if (!terminated && options.nonTerminated === false) {\n        // Empty.\n      } else if (!characters) {\n        // An empty (possible) reference is valid, unless it’s numeric (thus an\n        // ampersand followed by an octothorp).\n        if (type !== 'named') {\n          warning(4 /* Empty (numeric) */, diff)\n        }\n      } else if (type === 'named') {\n        // An ampersand followed by anything unknown, and not terminated, is\n        // invalid.\n        if (terminated && !characterReference) {\n          warning(5 /* Unknown (named) */, 1)\n        } else {\n          // If there’s something after an named reference which is not known,\n          // cap the reference.\n          if (characterReferenceCharacters !== characters) {\n            end = begin + characterReferenceCharacters.length\n            diff = 1 + end - begin\n            terminated = false\n          }\n\n          // If the reference is not terminated, warn.\n          if (!terminated) {\n            const reason = characterReferenceCharacters\n              ? 1 /* Non terminated (named) */\n              : 3 /* Empty (named) */\n\n            if (options.attribute) {\n              const following = value.charCodeAt(end)\n\n              if (following === 61 /* `=` */) {\n                warning(reason, diff)\n                characterReference = ''\n              } else if (isAlphanumerical(following)) {\n                characterReference = ''\n              } else {\n                warning(reason, diff)\n              }\n            } else {\n              warning(reason, diff)\n            }\n          }\n        }\n\n        reference = characterReference\n      } else {\n        if (!terminated) {\n          // All nonterminated numeric references are not rendered, and emit a\n          // warning.\n          warning(2 /* Non terminated (numeric) */, diff)\n        }\n\n        // When terminated and numerical, parse as either hexadecimal or\n        // decimal.\n        let referenceCode = Number.parseInt(\n          characters,\n          type === 'hexadecimal' ? 16 : 10\n        )\n\n        // Emit a warning when the parsed number is prohibited, and replace with\n        // replacement character.\n        if (prohibited(referenceCode)) {\n          warning(7 /* Prohibited (numeric) */, diff)\n          reference = fromCharCode(65533 /* `�` */)\n        } else if (referenceCode in characterReferenceInvalid) {\n          // Emit a warning when the parsed number is disallowed, and replace by\n          // an alternative.\n          warning(6 /* Disallowed (numeric) */, diff)\n          reference = characterReferenceInvalid[referenceCode]\n        } else {\n          // Parse the number.\n          let output = ''\n\n          // Emit a warning when the parsed number should not be used.\n          if (disallowed(referenceCode)) {\n            warning(6 /* Disallowed (numeric) */, diff)\n          }\n\n          // Serialize the number.\n          if (referenceCode > 0xffff) {\n            referenceCode -= 0x10000\n            output += fromCharCode((referenceCode >>> (10 & 0x3ff)) | 0xd800)\n            referenceCode = 0xdc00 | (referenceCode & 0x3ff)\n          }\n\n          reference = output + fromCharCode(referenceCode)\n        }\n      }\n\n      // Found it!\n      // First eat the queued characters as normal text, then eat a reference.\n      if (reference) {\n        flush()\n\n        previous = now()\n        index = end - 1\n        column += end - start + 1\n        result.push(reference)\n        const next = now()\n        next.offset++\n\n        if (options.reference) {\n          options.reference.call(\n            options.referenceContext,\n            reference,\n            {start: previous, end: next},\n            value.slice(start - 1, end)\n          )\n        }\n\n        previous = next\n      } else {\n        // If we could not find a reference, queue the checked characters (as\n        // normal characters), and move the pointer to their end.\n        // This is possible because we can be certain neither newlines nor\n        // ampersands are included.\n        characters = value.slice(start - 1, end)\n        queue += characters\n        column += characters.length\n        index = end - 1\n      }\n    } else {\n      // Handle anything other than an ampersand, including newlines and EOF.\n      if (character === 10 /* `\\n` */) {\n        line++\n        lines++\n        column = 0\n      }\n\n      if (Number.isNaN(character)) {\n        flush()\n      } else {\n        queue += fromCharCode(character)\n        column++\n      }\n    }\n  }\n\n  // Return the reduced nodes.\n  return result.join('')\n\n  // Get current position.\n  function now() {\n    return {\n      line,\n      column,\n      offset: index + ((point ? point.offset : 0) || 0)\n    }\n  }\n\n  /**\n   * Handle the warning.\n   *\n   * @param {1|2|3|4|5|6|7} code\n   * @param {number} offset\n   */\n  function warning(code, offset) {\n    /** @type {ReturnType<now>} */\n    let position\n\n    if (options.warning) {\n      position = now()\n      position.column += offset\n      position.offset += offset\n\n      options.warning.call(\n        options.warningContext,\n        messages[code],\n        position,\n        code\n      )\n    }\n  }\n\n  /**\n   * Flush `queue` (normal text).\n   * Macro invoked before each reference and at the end of `value`.\n   * Does nothing when `queue` is empty.\n   */\n  function flush() {\n    if (queue) {\n      result.push(queue)\n\n      if (options.text) {\n        options.text.call(options.textContext, queue, {\n          start: previous,\n          end: now()\n        })\n      }\n\n      queue = ''\n    }\n  }\n}\n\n/**\n * Check if `character` is outside the permissible unicode range.\n *\n * @param {number} code\n * @returns {boolean}\n */\nfunction prohibited(code) {\n  return (code >= 0xd800 && code <= 0xdfff) || code > 0x10ffff\n}\n\n/**\n * Check if `character` is disallowed.\n *\n * @param {number} code\n * @returns {boolean}\n */\nfunction disallowed(code) {\n  return (\n    (code >= 0x0001 && code <= 0x0008) ||\n    code === 0x000b ||\n    (code >= 0x000d && code <= 0x001f) ||\n    (code >= 0x007f && code <= 0x009f) ||\n    (code >= 0xfdd0 && code <= 0xfdef) ||\n    (code & 0xffff) === 0xffff ||\n    (code & 0xffff) === 0xfffe\n  )\n}\n","/**\n * @typedef CoreOptions\n * @property {Array<string>} [subset=[]]\n *   Whether to only escape the given subset of characters.\n * @property {boolean} [escapeOnly=false]\n *   Whether to only escape possibly dangerous characters.\n *   Those characters are `\"`, `&`, `'`, `<`, `>`, and `` ` ``.\n *\n * @typedef FormatOptions\n * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format\n *   Format strategy.\n *\n * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions\n */\n\n/**\n * Encode certain characters in `value`.\n *\n * @param {string} value\n * @param {CoreWithFormatOptions} options\n * @returns {string}\n */\nexport function core(value, options) {\n  value = value.replace(\n    options.subset ? charactersToExpression(options.subset) : /[\"&'<>`]/g,\n    basic\n  )\n\n  if (options.subset || options.escapeOnly) {\n    return value\n  }\n\n  return (\n    value\n      // Surrogate pairs.\n      .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, surrogate)\n      // BMP control characters (C0 except for LF, CR, SP; DEL; and some more\n      // non-ASCII ones).\n      .replace(\n        // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape\n        /[\\x01-\\t\\v\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g,\n        basic\n      )\n  )\n\n  /**\n   * @param {string} pair\n   * @param {number} index\n   * @param {string} all\n   */\n  function surrogate(pair, index, all) {\n    return options.format(\n      (pair.charCodeAt(0) - 0xd800) * 0x400 +\n        pair.charCodeAt(1) -\n        0xdc00 +\n        0x10000,\n      all.charCodeAt(index + 2),\n      options\n    )\n  }\n\n  /**\n   * @param {string} character\n   * @param {number} index\n   * @param {string} all\n   */\n  function basic(character, index, all) {\n    return options.format(\n      character.charCodeAt(0),\n      all.charCodeAt(index + 1),\n      options\n    )\n  }\n}\n\n/**\n * @param {Array<string>} subset\n * @returns {RegExp}\n */\nfunction charactersToExpression(subset) {\n  /** @type {Array<string>} */\n  const groups = []\n  let index = -1\n\n  while (++index < subset.length) {\n    groups.push(subset[index].replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&'))\n  }\n\n  return new RegExp('(?:' + groups.join('|') + ')', 'g')\n}\n","/**\n * The smallest way to encode a character.\n *\n * @param {number} code\n * @returns {string}\n */\nexport function formatBasic(code) {\n  return '&#x' + code.toString(16).toUpperCase() + ';'\n}\n","/**\n * @typedef {import('./core.js').CoreOptions & import('./util/format-smart.js').FormatSmartOptions} Options\n * @typedef {import('./core.js').CoreOptions} LightOptions\n */\n\nimport {core} from './core.js'\nimport {formatSmart} from './util/format-smart.js'\nimport {formatBasic} from './util/format-basic.js'\n\n/**\n * Encode special characters in `value`.\n *\n * @param {string} value\n *   Value to encode.\n * @param {Options} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nexport function stringifyEntities(value, options) {\n  return core(value, Object.assign({format: formatSmart}, options))\n}\n\n/**\n * Encode special characters in `value` as hexadecimals.\n *\n * @param {string} value\n *   Value to encode.\n * @param {LightOptions} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nexport function stringifyEntitiesLight(value, options) {\n  return core(value, Object.assign({format: formatBasic}, options))\n}\n","/**\n * @typedef {import('../types.js').IndentLines} IndentLines\n */\n\nconst eol = /\\r?\\n|\\r/g\n\n/**\n * @type {IndentLines}\n */\nexport function indentLines(value, map) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  let line = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = eol.exec(value))) {\n    one(value.slice(start, match.index))\n    result.push(match[0])\n    start = match.index + match[0].length\n    line++\n  }\n\n  one(value.slice(start))\n\n  return result.join('')\n\n  /**\n   * @param {string} value\n   */\n  function one(value) {\n    result.push(map(value, line, !value))\n  }\n}\n","/**\n * @typedef {import('../types.js').CreateTracker} CreateTracker\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\n * @typedef {import('../types.js').TrackMove} TrackMove\n * @typedef {import('../types.js').TrackShift} TrackShift\n */\n\n/**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */\nexport function track(config) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = config || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */\n  function move(input) {\n    // eslint-disable-next-line unicorn/prefer-default-parameters\n    const value = input || ''\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @typedef {import('estree-jsx').Program} Program\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Token} Token\n * @typedef {import('mdast-util-from-markdown').OnEnterError} OnEnterError\n * @typedef {import('mdast-util-from-markdown').OnExitError} OnExitError\n *\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Tracker} Tracker\n *\n * @typedef {import('../index.js').MdxJsxAttributeValueExpression} MdxJsxAttributeValueExpression\n * @typedef {import('../index.js').MdxJsxAttribute} MdxJsxAttribute\n * @typedef {import('../index.js').MdxJsxExpressionAttribute} MdxJsxExpressionAttribute\n * @typedef {import('../index.js').MdxJsxFlowElement} MdxJsxFlowElement\n * @typedef {import('../index.js').MdxJsxTextElement} MdxJsxTextElement\n */\n\n/**\n * @typedef Tag\n *   Single tag.\n * @property {string | undefined} name\n *   Name of tag, or `undefined` for fragment.\n *\n *   > 👉 **Note**: `null` is used in the AST for fragments, as it serializes in\n *   > JSON.\n * @property {Array<MdxJsxAttribute | MdxJsxExpressionAttribute>} attributes\n *   Attributes.\n * @property {boolean} close\n *   Whether the tag is closing (`</x>`).\n * @property {boolean} selfClosing\n *   Whether the tag is self-closing (`<x/>`).\n * @property {Token['start']} start\n *   Start point.\n * @property {Token['start']} end\n *   End point.\n *\n * @typedef ToMarkdownOptions\n *   Configuration.\n * @property {'\"' | \"'\" | null | undefined} [quote='\"']\n *   Preferred quote to use around attribute values.\n * @property {boolean | null | undefined} [quoteSmart=false]\n *   Use the other quote if that results in less bytes.\n * @property {boolean | null | undefined} [tightSelfClosing=false]\n *   Do not use an extra space when closing self-closing elements: `<img/>`\n *   instead of `<img />`.\n * @property {number | null | undefined} [printWidth=Infinity]\n *   Try and wrap syntax at this width.\n *\n *   When set to a finite number (say, `80`), the formatter will print\n *   attributes on separate lines when a tag doesn’t fit on one line.\n *   The normal behavior is to print attributes with spaces between them\n *   instead of line endings.\n */\n\nimport {ccount} from 'ccount'\nimport {parseEntities} from 'parse-entities'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nimport {VFileMessage} from 'vfile-message'\nimport {stringifyEntitiesLight} from 'stringify-entities'\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {indentLines} from 'mdast-util-to-markdown/lib/util/indent-lines.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: use `state`, use utilities from state, rename `safeOptions` to `info`.\n\nconst indent = '  '\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable MDX JSX.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable MDX JSX.\n *\n *   When using the syntax extension with `addResult`, nodes will have a\n *   `data.estree` field set to an ESTree `Program` node.\n */\nexport function mdxJsxFromMarkdown() {\n  return {\n    canContainEols: ['mdxJsxTextElement'],\n    enter: {\n      mdxJsxFlowTag: enterMdxJsxTag,\n      mdxJsxFlowTagClosingMarker: enterMdxJsxTagClosingMarker,\n      mdxJsxFlowTagAttribute: enterMdxJsxTagAttribute,\n      mdxJsxFlowTagExpressionAttribute: enterMdxJsxTagExpressionAttribute,\n      mdxJsxFlowTagAttributeValueLiteral: buffer,\n      mdxJsxFlowTagAttributeValueExpression: buffer,\n      mdxJsxFlowTagSelfClosingMarker: enterMdxJsxTagSelfClosingMarker,\n\n      mdxJsxTextTag: enterMdxJsxTag,\n      mdxJsxTextTagClosingMarker: enterMdxJsxTagClosingMarker,\n      mdxJsxTextTagAttribute: enterMdxJsxTagAttribute,\n      mdxJsxTextTagExpressionAttribute: enterMdxJsxTagExpressionAttribute,\n      mdxJsxTextTagAttributeValueLiteral: buffer,\n      mdxJsxTextTagAttributeValueExpression: buffer,\n      mdxJsxTextTagSelfClosingMarker: enterMdxJsxTagSelfClosingMarker\n    },\n    exit: {\n      mdxJsxFlowTagClosingMarker: exitMdxJsxTagClosingMarker,\n      mdxJsxFlowTagNamePrimary: exitMdxJsxTagNamePrimary,\n      mdxJsxFlowTagNameMember: exitMdxJsxTagNameMember,\n      mdxJsxFlowTagNameLocal: exitMdxJsxTagNameLocal,\n      mdxJsxFlowTagExpressionAttribute: exitMdxJsxTagExpressionAttribute,\n      mdxJsxFlowTagExpressionAttributeValue: data,\n      mdxJsxFlowTagAttributeNamePrimary: exitMdxJsxTagAttributeNamePrimary,\n      mdxJsxFlowTagAttributeNameLocal: exitMdxJsxTagAttributeNameLocal,\n      mdxJsxFlowTagAttributeValueLiteral: exitMdxJsxTagAttributeValueLiteral,\n      mdxJsxFlowTagAttributeValueLiteralValue: data,\n      mdxJsxFlowTagAttributeValueExpression:\n        exitMdxJsxTagAttributeValueExpression,\n      mdxJsxFlowTagAttributeValueExpressionValue: data,\n      mdxJsxFlowTagSelfClosingMarker: exitMdxJsxTagSelfClosingMarker,\n      mdxJsxFlowTag: exitMdxJsxTag,\n\n      mdxJsxTextTagClosingMarker: exitMdxJsxTagClosingMarker,\n      mdxJsxTextTagNamePrimary: exitMdxJsxTagNamePrimary,\n      mdxJsxTextTagNameMember: exitMdxJsxTagNameMember,\n      mdxJsxTextTagNameLocal: exitMdxJsxTagNameLocal,\n      mdxJsxTextTagExpressionAttribute: exitMdxJsxTagExpressionAttribute,\n      mdxJsxTextTagExpressionAttributeValue: data,\n      mdxJsxTextTagAttributeNamePrimary: exitMdxJsxTagAttributeNamePrimary,\n      mdxJsxTextTagAttributeNameLocal: exitMdxJsxTagAttributeNameLocal,\n      mdxJsxTextTagAttributeValueLiteral: exitMdxJsxTagAttributeValueLiteral,\n      mdxJsxTextTagAttributeValueLiteralValue: data,\n      mdxJsxTextTagAttributeValueExpression:\n        exitMdxJsxTagAttributeValueExpression,\n      mdxJsxTextTagAttributeValueExpressionValue: data,\n      mdxJsxTextTagSelfClosingMarker: exitMdxJsxTagSelfClosingMarker,\n      mdxJsxTextTag: exitMdxJsxTag\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function buffer() {\n    this.buffer()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function data(token) {\n    this.config.enter.data.call(this, token)\n    this.config.exit.data.call(this, token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMdxJsxTag(token) {\n    /** @type {Tag} */\n    const tag = {\n      name: undefined,\n      attributes: [],\n      close: false,\n      selfClosing: false,\n      start: token.start,\n      end: token.end\n    }\n    if (!this.getData('mdxJsxTagStack')) this.setData('mdxJsxTagStack', [])\n    this.setData('mdxJsxTag', tag)\n    this.buffer()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMdxJsxTagClosingMarker(token) {\n    const stack = /** @type {Array<Tag>} */ (this.getData('mdxJsxTagStack'))\n\n    if (stack.length === 0) {\n      throw new VFileMessage(\n        'Unexpected closing slash `/` in tag, expected an open tag first',\n        {start: token.start, end: token.end},\n        'mdast-util-mdx-jsx:unexpected-closing-slash'\n      )\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMdxJsxTagAnyAttribute(token) {\n    const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n\n    if (tag.close) {\n      throw new VFileMessage(\n        'Unexpected attribute in closing tag, expected the end of the tag',\n        {start: token.start, end: token.end},\n        'mdast-util-mdx-jsx:unexpected-attribute'\n      )\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMdxJsxTagSelfClosingMarker(token) {\n    const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n\n    if (tag.close) {\n      throw new VFileMessage(\n        'Unexpected self-closing slash `/` in closing tag, expected the end of the tag',\n        {start: token.start, end: token.end},\n        'mdast-util-mdx-jsx:unexpected-self-closing-slash'\n      )\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagClosingMarker() {\n    const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n    tag.close = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagNamePrimary(token) {\n    const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n    tag.name = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagNameMember(token) {\n    const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n    tag.name += '.' + this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagNameLocal(token) {\n    const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n    tag.name += ':' + this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMdxJsxTagAttribute(token) {\n    const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n    enterMdxJsxTagAnyAttribute.call(this, token)\n    tag.attributes.push({type: 'mdxJsxAttribute', name: '', value: null})\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMdxJsxTagExpressionAttribute(token) {\n    const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n    enterMdxJsxTagAnyAttribute.call(this, token)\n    tag.attributes.push({type: 'mdxJsxExpressionAttribute', value: ''})\n    this.buffer()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagExpressionAttribute(token) {\n    const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n    const tail = /** @type {MdxJsxExpressionAttribute} */ (\n      tag.attributes[tag.attributes.length - 1]\n    )\n    /** @type {Program | undefined} */\n    // @ts-expect-error: custom.\n    const estree = token.estree\n\n    tail.value = this.resume()\n\n    if (estree) {\n      tail.data = {estree}\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagAttributeNamePrimary(token) {\n    const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n    const node = /** @type {MdxJsxAttribute} */ (\n      tag.attributes[tag.attributes.length - 1]\n    )\n    node.name = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagAttributeNameLocal(token) {\n    const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n    const node = /** @type {MdxJsxAttribute} */ (\n      tag.attributes[tag.attributes.length - 1]\n    )\n    node.name += ':' + this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagAttributeValueLiteral() {\n    const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n    tag.attributes[tag.attributes.length - 1].value = parseEntities(\n      this.resume(),\n      {nonTerminated: false}\n    )\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagAttributeValueExpression(token) {\n    const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n    const tail = /** @type {MdxJsxAttribute} */ (\n      tag.attributes[tag.attributes.length - 1]\n    )\n    /** @type {MdxJsxAttributeValueExpression} */\n    const node = {type: 'mdxJsxAttributeValueExpression', value: this.resume()}\n    /** @type {Program | undefined} */\n    // @ts-expect-error: custom.\n    const estree = token.estree\n\n    if (estree) {\n      node.data = {estree}\n    }\n\n    tail.value = node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTagSelfClosingMarker() {\n    const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n\n    tag.selfClosing = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMdxJsxTag(token) {\n    const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n    const stack = /** @type {Array<Tag>} */ (this.getData('mdxJsxTagStack'))\n    const tail = stack[stack.length - 1]\n\n    if (tag.close && tail.name !== tag.name) {\n      throw new VFileMessage(\n        'Unexpected closing tag `' +\n          serializeAbbreviatedTag(tag) +\n          '`, expected corresponding closing tag for `' +\n          serializeAbbreviatedTag(tail) +\n          '` (' +\n          stringifyPosition(tail) +\n          ')',\n        {start: token.start, end: token.end},\n        'mdast-util-mdx-jsx:end-tag-mismatch'\n      )\n    }\n\n    // End of a tag, so drop the buffer.\n    this.resume()\n\n    if (tag.close) {\n      stack.pop()\n    } else {\n      this.enter(\n        {\n          type:\n            token.type === 'mdxJsxTextTag'\n              ? 'mdxJsxTextElement'\n              : 'mdxJsxFlowElement',\n          name: tag.name || null,\n          attributes: tag.attributes,\n          children: []\n        },\n        token,\n        onErrorRightIsTag\n      )\n    }\n\n    if (tag.selfClosing || tag.close) {\n      this.exit(token, onErrorLeftIsTag)\n    } else {\n      stack.push(tag)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {OnEnterError}\n   */\n  function onErrorRightIsTag(closing, open) {\n    const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n    const place = closing ? ' before the end of `' + closing.type + '`' : ''\n    const position = closing\n      ? {start: closing.start, end: closing.end}\n      : undefined\n\n    throw new VFileMessage(\n      'Expected a closing tag for `' +\n        serializeAbbreviatedTag(tag) +\n        '` (' +\n        stringifyPosition({start: open.start, end: open.end}) +\n        ')' +\n        place,\n      position,\n      'mdast-util-mdx-jsx:end-tag-mismatch'\n    )\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {OnExitError}\n   */\n  function onErrorLeftIsTag(a, b) {\n    const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n    throw new VFileMessage(\n      'Expected the closing tag `' +\n        serializeAbbreviatedTag(tag) +\n        '` either after the end of `' +\n        b.type +\n        '` (' +\n        stringifyPosition(b.end) +\n        ') or another opening tag after the start of `' +\n        b.type +\n        '` (' +\n        stringifyPosition(b.start) +\n        ')',\n      {start: a.start, end: a.end},\n      'mdast-util-mdx-jsx:end-tag-mismatch'\n    )\n  }\n\n  /**\n   * Serialize a tag, excluding attributes.\n   * `self-closing` is not supported, because we don’t need it yet.\n   *\n   * @param {Tag} tag\n   * @returns {string}\n   */\n  function serializeAbbreviatedTag(tag) {\n    return '<' + (tag.close ? '/' : '') + (tag.name || '') + '>'\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable MDX JSX.\n *\n * This extension configures `mdast-util-to-markdown` with\n * `options.fences: true` and `options.resourceLink: true` too, do not\n * overwrite them!\n *\n * @param {ToMarkdownOptions | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable MDX JSX.\n */\nexport function mdxJsxToMarkdown(options) {\n  const options_ = options || {}\n  const quote = options_.quote || '\"'\n  const quoteSmart = options_.quoteSmart || false\n  const tightSelfClosing = options_.tightSelfClosing || false\n  const printWidth = options_.printWidth || Number.POSITIVE_INFINITY\n  const alternative = quote === '\"' ? \"'\" : '\"'\n\n  if (quote !== '\"' && quote !== \"'\") {\n    throw new Error(\n      'Cannot serialize attribute values with `' +\n        quote +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  mdxElement.peek = peekElement\n\n  return {\n    handlers: {\n      mdxJsxFlowElement: mdxElement,\n      mdxJsxTextElement: mdxElement\n    },\n    unsafe: [\n      {character: '<', inConstruct: ['phrasing']},\n      {atBreak: true, character: '<'}\n    ],\n    // Always generate fenced code (never indented code).\n    fences: true,\n    // Always generate links with resources (never autolinks).\n    resourceLink: true\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n   */\n  // eslint-disable-next-line complexity\n  function mdxElement(node, _, context, safeOptions) {\n    const flow = node.type === 'mdxJsxFlowElement'\n    const selfClosing = node.name\n      ? !node.children || node.children.length === 0\n      : false\n    const depth = inferDepth(context)\n    const currentIndent = createIndent(depth)\n    const trackerOneLine = track(safeOptions)\n    const trackerMultiLine = track(safeOptions)\n    /** @type {Array<string>} */\n    const serializedAttributes = []\n    const prefix = (flow ? currentIndent : '') + '<' + (node.name || '')\n    const exit = context.enter(node.type)\n\n    trackerOneLine.move(prefix)\n    trackerMultiLine.move(prefix)\n\n    // None.\n    if (node.attributes && node.attributes.length > 0) {\n      if (!node.name) {\n        throw new Error('Cannot serialize fragment w/ attributes')\n      }\n\n      let index = -1\n      while (++index < node.attributes.length) {\n        const attribute = node.attributes[index]\n        /** @type {string} */\n        let result\n\n        if (attribute.type === 'mdxJsxExpressionAttribute') {\n          result = '{' + (attribute.value || '') + '}'\n        } else {\n          if (!attribute.name) {\n            throw new Error('Cannot serialize attribute w/o name')\n          }\n\n          const value = attribute.value\n          const left = attribute.name\n          /** @type {string} */\n          let right = ''\n\n          if (value === undefined || value === null) {\n            // Empty.\n          } else if (typeof value === 'object') {\n            right = '{' + (value.value || '') + '}'\n          } else {\n            // If the alternative is less common than `quote`, switch.\n            const appliedQuote =\n              quoteSmart && ccount(value, quote) > ccount(value, alternative)\n                ? alternative\n                : quote\n            right =\n              appliedQuote +\n              stringifyEntitiesLight(value, {subset: [appliedQuote]}) +\n              appliedQuote\n          }\n\n          result = left + (right ? '=' : '') + right\n        }\n\n        serializedAttributes.push(result)\n      }\n    }\n\n    let attributesOnTheirOwnLine = false\n    const attributesOnOneLine = serializedAttributes.join(' ')\n\n    if (\n      // Block:\n      flow &&\n      // Including a line ending (expressions).\n      (/\\r?\\n|\\r/.test(attributesOnOneLine) ||\n        // Current position (including `<tag`).\n        trackerOneLine.current().now.column +\n          // -1 because columns, +1 for ` ` before attributes.\n          // Attributes joined by spaces.\n          attributesOnOneLine.length +\n          // ` />`.\n          (selfClosing ? (tightSelfClosing ? 2 : 3) : 1) >\n          printWidth)\n    ) {\n      attributesOnTheirOwnLine = true\n    }\n\n    let tracker = trackerOneLine\n    let value = prefix\n\n    if (attributesOnTheirOwnLine) {\n      tracker = trackerMultiLine\n\n      let index = -1\n\n      while (++index < serializedAttributes.length) {\n        // Only indent first line of of attributes, we can’t indent attribute\n        // values.\n        serializedAttributes[index] =\n          currentIndent + indent + serializedAttributes[index]\n      }\n\n      value += tracker.move(\n        '\\n' + serializedAttributes.join('\\n') + '\\n' + currentIndent\n      )\n    } else if (attributesOnOneLine) {\n      value += tracker.move(' ' + attributesOnOneLine)\n    }\n\n    if (selfClosing) {\n      value += tracker.move(\n        (tightSelfClosing || attributesOnTheirOwnLine ? '' : ' ') + '/'\n      )\n    }\n\n    value += tracker.move('>')\n\n    if (node.children && node.children.length > 0) {\n      if (node.type === 'mdxJsxTextElement') {\n        value += tracker.move(\n          containerPhrasing(node, context, {\n            ...tracker.current(),\n            before: '>',\n            after: '<'\n          })\n        )\n      } else {\n        tracker.shift(2)\n        value += tracker.move('\\n')\n        value += tracker.move(containerFlow(node, context, tracker.current()))\n        value += tracker.move('\\n')\n      }\n    }\n\n    if (!selfClosing) {\n      value += tracker.move(\n        (flow ? currentIndent : '') + '</' + (node.name || '') + '>'\n      )\n    }\n\n    exit()\n    return value\n  }\n}\n\n// Modified copy of:\n// <https://github.com/syntax-tree/mdast-util-to-markdown/blob/a381cbc/lib/util/container-flow.js>.\n//\n// To do: add `indent` support to `mdast-util-to-markdown`.\n// As indents are only used for JSX, it’s fine for now, but perhaps better\n// there.\n/**\n * @param {MdxJsxFlowElement} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {ReturnType<Tracker['current']>} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nfunction containerFlow(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children\n  const tracker = state.createTracker(info)\n  const currentIndent = createIndent(inferDepth(state))\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    const childInfo = {before: '\\n', after: '\\n', ...tracker.current()}\n\n    const result = state.handle(child, parent, state, childInfo)\n\n    const serializedChild =\n      child.type === 'mdxJsxFlowElement'\n        ? result\n        : indentLines(result, function (line, _, blank) {\n            return (blank ? '' : currentIndent) + line\n          })\n\n    results.push(tracker.move(serializedChild))\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(tracker.move('\\n\\n'))\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n\n/**\n *\n * @param {State} context\n * @returns {number}\n */\nfunction inferDepth(context) {\n  let depth = 0\n\n  for (const x of context.stack) {\n    if (x === 'mdxJsxFlowElement') {\n      depth++\n    }\n  }\n\n  return depth\n}\n\n/**\n * @param {number} depth\n * @returns {string}\n */\nfunction createIndent(depth) {\n  return indent.repeat(depth)\n}\n\n/**\n * @type {ToMarkdownHandle}\n */\nfunction peekElement() {\n  return '<'\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').PhrasingContent} PhrasingContent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nexport function containerPhrasing(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = info.before\n\n  indexStack.push(-1)\n  let tracker = state.createTracker(info)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = state.handle.handlers[children[index + 1].type]\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, state, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = info.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = state.createTracker(info)\n      tracker.move(results.join(''))\n    }\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          ...tracker.current(),\n          before,\n          after\n        })\n      )\n    )\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('estree-jsx').Program} Program\n *\n * @typedef {import('../index.js').MdxjsEsm} MdxjsEsm\n */\n\n// To do: next major: expose functions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable MDX ESM.\n *\n * When using the syntax extension with `addResult`, nodes will have a\n * `data.estree` field set to an ESTree `Program` node.\n *\n * @type {FromMarkdownExtension}\n */\nexport const mdxjsEsmFromMarkdown = {\n  enter: {mdxjsEsm: enterMdxjsEsm},\n  exit: {mdxjsEsm: exitMdxjsEsm, mdxjsEsmData: exitMdxjsEsmData}\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable MDX ESM.\n *\n * @type {ToMarkdownExtension}\n */\nexport const mdxjsEsmToMarkdown = {handlers: {mdxjsEsm: handleMdxjsEsm}}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterMdxjsEsm(token) {\n  this.enter({type: 'mdxjsEsm', value: ''}, token)\n  this.buffer() // Capture EOLs\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitMdxjsEsm(token) {\n  const value = this.resume()\n  const node = /** @type {MdxjsEsm} */ (this.exit(token))\n  /** @type {Program | undefined} */\n  // @ts-expect-error: custom.\n  const estree = token.estree\n\n  node.value = value\n\n  if (estree) {\n    node.data = {estree}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitMdxjsEsmData(token) {\n  this.config.enter.data.call(this, token)\n  this.config.exit.data.call(this, token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {MdxjsEsm} node\n */\nfunction handleMdxjsEsm(node) {\n  return node.value || ''\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-mdxjs').Options} MicromarkOptions\n * @typedef {import('mdast-util-mdx').ToMarkdownOptions} ToMarkdownOptions\n * @typedef {import('mdast-util-mdx')} DoNotTouchAsThisIncludesMdxInTree\n */\n\n/**\n * @typedef {MicromarkOptions & ToMarkdownOptions} Options\n *   Configuration.\n */\n\nimport {mdxjs} from 'micromark-extension-mdxjs'\nimport {mdxFromMarkdown, mdxToMarkdown} from 'mdast-util-mdx'\n\n/**\n * Plugin to support MDX (import/exports: `export {x} from 'y'`; expressions:\n * `{1 + 1}`; and JSX: `<Video id={123} />`).\n *\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options | null | undefined] | [], Root>}\n */\nexport default function remarkMdx(options) {\n  const data = this.data()\n\n  add('micromarkExtensions', mdxjs(options))\n  add('fromMarkdownExtensions', mdxFromMarkdown())\n  add('toMarkdownExtensions', mdxToMarkdown(options))\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {Array<unknown>} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n","/**\n * @typedef {import('micromark-extension-mdx-expression').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {Parser} from 'acorn'\nimport acornJsx from 'acorn-jsx'\nimport {mdxExpression} from 'micromark-extension-mdx-expression'\nimport {mdxJsx} from 'micromark-extension-mdx-jsx'\nimport {mdxMd} from 'micromark-extension-mdx-md'\nimport {mdxjsEsm} from 'micromark-extension-mdxjs-esm'\nimport {combineExtensions} from 'micromark-util-combine-extensions'\n\n/**\n * Create an extension for `micromark` to enable MDX syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable MDX\n *   syntax.\n */\nexport function mdxjs(options) {\n  const settings = Object.assign(\n    {\n      acorn: Parser.extend(acornJsx()),\n      acornOptions: {ecmaVersion: 2020, sourceType: 'module'},\n      addResult: true\n    },\n    options\n  )\n\n  return combineExtensions([\n    mdxjsEsm(settings),\n    mdxExpression(settings),\n    mdxJsx(settings),\n    mdxMd\n  ])\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-mdx-expression').MdxFlowExpression} MdxFlowExpression\n * @typedef {import('mdast-util-mdx-expression').MdxTextExpression} MdxTextExpression\n * @typedef {import('mdast-util-mdxjs-esm').MdxjsEsm} MdxjsEsm\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxAttributeValueExpression} MdxJsxAttributeValueExpression\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxAttribute} MdxJsxAttribute\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxExpressionAttribute} MdxJsxExpressionAttribute\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxFlowElement} MdxJsxFlowElement\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxTextElement} MdxJsxTextElement\n * @typedef {import('mdast-util-mdx-jsx').ToMarkdownOptions} ToMarkdownOptions\n */\n\nimport {\n  mdxExpressionFromMarkdown,\n  mdxExpressionToMarkdown\n} from 'mdast-util-mdx-expression'\nimport {mdxJsxFromMarkdown, mdxJsxToMarkdown} from 'mdast-util-mdx-jsx'\nimport {mdxjsEsmFromMarkdown, mdxjsEsmToMarkdown} from 'mdast-util-mdxjs-esm'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable MDX (ESM, JSX,\n * expressions).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable MDX (ESM, JSX,\n *   expressions).\n *\n *   When using the syntax extensions with `addResult`, ESM and expression\n *   nodes will have `data.estree` fields set to ESTree `Program` node.\n */\nexport function mdxFromMarkdown() {\n  return [mdxExpressionFromMarkdown, mdxJsxFromMarkdown(), mdxjsEsmFromMarkdown]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable MDX (ESM, JSX,\n * expressions).\n *\n * @param {ToMarkdownOptions | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable MDX (ESM, JSX,\n *   expressions).\n */\nexport function mdxToMarkdown(options) {\n  return {\n    extensions: [\n      mdxExpressionToMarkdown,\n      mdxJsxToMarkdown(options),\n      mdxjsEsmToMarkdown\n    ]\n  }\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\n */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(tree, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier)\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    state.footnoteOrder.push(id)\n    state.footnoteCounts[id] = 1\n    counter = state.footnoteOrder.length\n  } else {\n    state.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = state.footnoteCounts[id]\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id:\n        state.clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return {type: 'text', value: '![' + node.alt + suffix}\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null\n  /** @type {Properties} */\n  const properties = {}\n\n  if (lang) {\n    properties.className = ['language-' + lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastRoot | HastElement}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start.line && end.line) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(node, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} MdastRoot\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\n *\n * @typedef EmbeddedHastFields\n *   hast fields.\n * @property {string | null | undefined} [hName]\n *   Generate a specific element with this tag name instead.\n * @property {HastProperties | null | undefined} [hProperties]\n *   Generate an element with these properties instead.\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\n *   Generate an element with this content instead.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\n *   mdast data with embedded hast fields.\n *\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\n *   mdast node with embedded hast data.\n *\n * @typedef PointLike\n *   Point-like value.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @typedef PositionLike\n *   Position-like value.\n * @property {PointLike | null | undefined} [start]\n *   Point-like value.\n * @property {PointLike | null | undefined} [end]\n *   Point-like value.\n *\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | null | undefined} parent\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n *   Signature of `state` for when props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {HastProperties} props\n *   Properties.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n *   Signature of `state` for when no props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @typedef HFields\n *   Info on `state`.\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {HastProperties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use from backreferences back to their footnote call.\n * @property {(identifier: string) => MdastDefinition | null} definition\n *   Definition cache.\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Record<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\n *   Transform an mdast node to hast.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\n *   Like `state` but lower-level and usable on non-elements.\n *   Deprecated: use `patch` and `applyData`.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\n *   *clobbering*.\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call (affects\n *   screen readers).\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section (affects screen readers).\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\n *   is always added as footnote calls use it with `aria-describedby` to\n *   provide an accessible label).\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   Tag name to use for the footnote label.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes.\n * @property {Array<string> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Handle nodes.\n *\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\n *   Info passed around.\n */\n\nimport {visit} from 'unist-util-visit'\nimport {position, pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, MdastFootnoteDefinition>} */\n  const footnoteById = {}\n\n  // To do: next major: add `options` to state, remove:\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\n  // `unknownHandler`.\n\n  // To do: next major: move to `state.options.allowDangerousHtml`.\n  state.dangerous = dangerous\n  // To do: next major: move to `state.options`.\n  state.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  // To do: next major: move to `state.options`.\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  // To do: next major: move to `state.options`.\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  // To do: next major: move to `state.options`.\n  state.unknownHandler = settings.unknownHandler\n  // To do: next major: move to `state.options`.\n  state.passThrough = settings.passThrough\n\n  state.handlers = {...handlers, ...settings.handlers}\n\n  // To do: next major: replace utility with `definitionById` object, so we\n  // only walk once (as we need footnotes too).\n  state.definition = definitions(tree)\n  state.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  state.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  state.footnoteCounts = {}\n\n  state.patch = patch\n  state.applyData = applyData\n  state.one = oneBound\n  state.all = allBound\n  state.wrap = wrap\n  // To do: next major: remove `augment`.\n  state.augment = augment\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return state\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\n   * @param {HastElementContent} right\n   * @returns {HastElementContent}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {MdastData} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function state(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | null | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n   *   Resulting hast node.\n   */\n  function oneBound(node, parent) {\n    // @ts-expect-error: that’s a state :)\n    return one(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function allBound(parent) {\n    // @ts-expect-error: that’s a state :)\n    return all(state, parent)\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {Type | HastElement}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {Type | HastElement} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent is likely to keep the content around (otherwise: pass\n      // `hChildren`).\n      else {\n        result = {\n          type: 'element',\n          tagName: hName,\n          properties: {},\n          children: []\n        }\n\n        // To do: next major: take the children from the `root`, or inject the\n        // raw/text/comment or so into the element?\n        // if ('children' in node) {\n        //   // @ts-expect-error: assume `children` are allowed in elements.\n        //   result.children = node.children\n        // } else {\n        //   // @ts-expect-error: assume `node` is allowed in elements.\n        //   result.children.push(node)\n        // }\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      result.properties = {...result.properties, ...hProperties}\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      // @ts-expect-error: assume valid children are defined.\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an mdast node into a hast node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   mdast node.\n * @param {MdastParents | null | undefined} [parent]\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   Resulting hast node.\n */\n// To do: next major: do not expose, keep bound.\nexport function one(state, node, parent) {\n  const type = node && node.type\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(state.handlers, type)) {\n    return state.handlers[type](state, node, parent)\n  }\n\n  if (state.passThrough && state.passThrough.includes(type)) {\n    // To do: next major: deep clone.\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\n    return 'children' in node ? {...node, children: all(state, node)} : node\n  }\n\n  if (state.unknownHandler) {\n    return state.unknownHandler(state, node, parent)\n  }\n\n  return defaultUnknownHandler(state, node)\n}\n\n/**\n * Transform the children of an mdast node into hast nodes.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} parent\n *   mdast node to compile\n * @returns {Array<HastElementContent>}\n *   Resulting hast nodes.\n */\n// To do: next major: do not expose, keep bound.\nexport function all(state, parent) {\n  /** @type {Array<HastElementContent>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n    while (++index < nodes.length) {\n      const result = one(state, nodes[index], parent)\n\n      // To do: see if we van clean this? Can we merge texts?\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastText | HastElement}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastText | HastElement} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: all(state, node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | null | undefined} [loose=false]\n *   Whether to add line endings at start and end.\n * @returns {Array<Type | HastText>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Type | HastText>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n */\n\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HastNodes | null | undefined}\n *   hast tree.\n */\n// To do: next major: always return a single `root`.\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, null)\n  const foot = footer(state)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  // To do: next major: always return root?\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\nexport function footer(state) {\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let index = -1\n\n  while (++index < state.footnoteOrder.length) {\n    const def = state.footnoteById[state.footnoteOrder[index]]\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= state.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            state.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: state.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: state.clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: state.footnoteLabelTagName,\n        properties: {\n          // To do: use structured clone.\n          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: state.footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n","/**\n * @typedef { import('estree').Node} Node\n * @typedef {{\n *   skip: () => void;\n *   remove: () => void;\n *   replace: (node: Node) => void;\n * }} WalkerContext\n */\n\nexport class WalkerBase {\n\tconstructor() {\n\t\t/** @type {boolean} */\n\t\tthis.should_skip = false;\n\n\t\t/** @type {boolean} */\n\t\tthis.should_remove = false;\n\n\t\t/** @type {Node | null} */\n\t\tthis.replacement = null;\n\n\t\t/** @type {WalkerContext} */\n\t\tthis.context = {\n\t\t\tskip: () => (this.should_skip = true),\n\t\t\tremove: () => (this.should_remove = true),\n\t\t\treplace: (node) => (this.replacement = node)\n\t\t};\n\t}\n\n\t/**\n\t * @template {Node} Parent\n\t * @param {Parent | null | undefined} parent\n\t * @param {keyof Parent | null | undefined} prop\n\t * @param {number | null | undefined} index\n\t * @param {Node} node\n\t */\n\treplace(parent, prop, index, node) {\n\t\tif (parent && prop) {\n\t\t\tif (index != null) {\n\t\t\t\t/** @type {Array<Node>} */ (parent[prop])[index] = node;\n\t\t\t} else {\n\t\t\t\t/** @type {Node} */ (parent[prop]) = node;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @template {Node} Parent\n\t * @param {Parent | null | undefined} parent\n\t * @param {keyof Parent | null | undefined} prop\n\t * @param {number | null | undefined} index\n\t */\n\tremove(parent, prop, index) {\n\t\tif (parent && prop) {\n\t\t\tif (index !== null && index !== undefined) {\n\t\t\t\t/** @type {Array<Node>} */ (parent[prop]).splice(index, 1);\n\t\t\t} else {\n\t\t\t\tdelete parent[prop];\n\t\t\t}\n\t\t}\n\t}\n}\n","import { WalkerBase } from './walker.js';\n\n/**\n * @typedef { import('estree').Node} Node\n * @typedef { import('./walker.js').WalkerContext} WalkerContext\n * @typedef {(\n *    this: WalkerContext,\n *    node: Node,\n *    parent: Node | null,\n *    key: string | number | symbol | null | undefined,\n *    index: number | null | undefined\n * ) => void} SyncHandler\n */\n\nexport class SyncWalker extends WalkerBase {\n\t/**\n\t *\n\t * @param {SyncHandler} [enter]\n\t * @param {SyncHandler} [leave]\n\t */\n\tconstructor(enter, leave) {\n\t\tsuper();\n\n\t\t/** @type {boolean} */\n\t\tthis.should_skip = false;\n\n\t\t/** @type {boolean} */\n\t\tthis.should_remove = false;\n\n\t\t/** @type {Node | null} */\n\t\tthis.replacement = null;\n\n\t\t/** @type {WalkerContext} */\n\t\tthis.context = {\n\t\t\tskip: () => (this.should_skip = true),\n\t\t\tremove: () => (this.should_remove = true),\n\t\t\treplace: (node) => (this.replacement = node)\n\t\t};\n\n\t\t/** @type {SyncHandler | undefined} */\n\t\tthis.enter = enter;\n\n\t\t/** @type {SyncHandler | undefined} */\n\t\tthis.leave = leave;\n\t}\n\n\t/**\n\t * @template {Node} Parent\n\t * @param {Node} node\n\t * @param {Parent | null} parent\n\t * @param {keyof Parent} [prop]\n\t * @param {number | null} [index]\n\t * @returns {Node | null}\n\t */\n\tvisit(node, parent, prop, index) {\n\t\tif (node) {\n\t\t\tif (this.enter) {\n\t\t\t\tconst _should_skip = this.should_skip;\n\t\t\t\tconst _should_remove = this.should_remove;\n\t\t\t\tconst _replacement = this.replacement;\n\t\t\t\tthis.should_skip = false;\n\t\t\t\tthis.should_remove = false;\n\t\t\t\tthis.replacement = null;\n\n\t\t\t\tthis.enter.call(this.context, node, parent, prop, index);\n\n\t\t\t\tif (this.replacement) {\n\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t}\n\n\t\t\t\tif (this.should_remove) {\n\t\t\t\t\tthis.remove(parent, prop, index);\n\t\t\t\t}\n\n\t\t\t\tconst skipped = this.should_skip;\n\t\t\t\tconst removed = this.should_remove;\n\n\t\t\t\tthis.should_skip = _should_skip;\n\t\t\t\tthis.should_remove = _should_remove;\n\t\t\t\tthis.replacement = _replacement;\n\n\t\t\t\tif (skipped) return node;\n\t\t\t\tif (removed) return null;\n\t\t\t}\n\n\t\t\t/** @type {keyof Node} */\n\t\t\tlet key;\n\n\t\t\tfor (key in node) {\n\t\t\t\t/** @type {unknown} */\n\t\t\t\tconst value = node[key];\n\n\t\t\t\tif (value && typeof value === 'object') {\n\t\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\t\tconst nodes = /** @type {Array<unknown>} */ (value);\n\t\t\t\t\t\tfor (let i = 0; i < nodes.length; i += 1) {\n\t\t\t\t\t\t\tconst item = nodes[i];\n\t\t\t\t\t\t\tif (isNode(item)) {\n\t\t\t\t\t\t\t\tif (!this.visit(item, node, key, i)) {\n\t\t\t\t\t\t\t\t\t// removed\n\t\t\t\t\t\t\t\t\ti--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (isNode(value)) {\n\t\t\t\t\t\tthis.visit(value, node, key, null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.leave) {\n\t\t\t\tconst _replacement = this.replacement;\n\t\t\t\tconst _should_remove = this.should_remove;\n\t\t\t\tthis.replacement = null;\n\t\t\t\tthis.should_remove = false;\n\n\t\t\t\tthis.leave.call(this.context, node, parent, prop, index);\n\n\t\t\t\tif (this.replacement) {\n\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t}\n\n\t\t\t\tif (this.should_remove) {\n\t\t\t\t\tthis.remove(parent, prop, index);\n\t\t\t\t}\n\n\t\t\t\tconst removed = this.should_remove;\n\n\t\t\t\tthis.replacement = _replacement;\n\t\t\t\tthis.should_remove = _should_remove;\n\n\t\t\t\tif (removed) return null;\n\t\t\t}\n\t\t}\n\n\t\treturn node;\n\t}\n}\n\n/**\n * Ducktype a node.\n *\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction isNode(value) {\n\treturn (\n\t\tvalue !== null && typeof value === 'object' && 'type' in value && typeof value.type === 'string'\n\t);\n}\n","import { SyncWalker } from './sync.js';\nimport { AsyncWalker } from './async.js';\n\n/**\n * @typedef {import('estree').Node} Node\n * @typedef {import('./sync.js').SyncHandler} SyncHandler\n * @typedef {import('./async.js').AsyncHandler} AsyncHandler\n */\n\n/**\n * @param {Node} ast\n * @param {{\n *   enter?: SyncHandler\n *   leave?: SyncHandler\n * }} walker\n * @returns {Node | null}\n */\nexport function walk(ast, { enter, leave }) {\n\tconst instance = new SyncWalker(enter, leave);\n\treturn instance.visit(ast, null);\n}\n\n/**\n * @param {Node} ast\n * @param {{\n *   enter?: AsyncHandler\n *   leave?: AsyncHandler\n * }} walker\n * @returns {Promise<Node | null>}\n */\nexport async function asyncWalk(ast, { enter, leave }) {\n\tconst instance = new AsyncWalker(enter, leave);\n\treturn await instance.visit(ast, null);\n}\n","/**\n * @typedef {import('estree-jsx').Node} Node\n * @typedef {import('estree-jsx').Expression} Expression\n * @typedef {import('estree-jsx').ObjectExpression} ObjectExpression\n * @typedef {import('estree-jsx').Property} Property\n * @typedef {import('estree-jsx').ImportSpecifier} ImportSpecifier\n * @typedef {import('estree-jsx').SpreadElement} SpreadElement\n * @typedef {import('estree-jsx').MemberExpression} MemberExpression\n * @typedef {import('estree-jsx').Literal} Literal\n * @typedef {import('estree-jsx').Identifier} Identifier\n * @typedef {import('estree-jsx').JSXAttribute} JSXAttribute\n * @typedef {import('estree-jsx').JSXMemberExpression} JSXMemberExpression\n * @typedef {import('estree-jsx').JSXNamespacedName} JSXNamespacedName\n * @typedef {import('estree-jsx').JSXIdentifier} JSXIdentifier\n *\n * @typedef {'automatic' | 'classic'} Runtime\n *   How to transform JSX.\n *\n * @typedef Options\n *   Configuration.\n *\n *   > 👉 **Note**: you can also configure `runtime`, `importSource`, `pragma`,\n *   > and `pragmaFrag` from within files through comments.\n * @property {Runtime | null | undefined} [runtime='classic']\n *   Choose the runtime.\n *\n *   Comment form: `@jsxRuntime theRuntime`.\n * @property {string | null | undefined} [importSource='react']\n *   Place to import `jsx`, `jsxs`, `jsxDEV`, and `Fragment` from, when the\n *   effective runtime is automatic.\n *\n *   Comment form: `@jsxImportSource theSource`.\n *\n *   > 👉 **Note**: `/jsx-runtime` or `/jsx-dev-runtime` is appended to this\n *   > provided source.\n *   > In CJS, that can resolve to a file (as in `theSource/jsx-runtime.js`),\n *   > but for ESM an export map needs to be set up to point to files:\n *   >\n *   > ```js\n *   > // …\n *   > \"exports\": {\n *   >   // …\n *   >   \"./jsx-runtime\": \"./path/to/jsx-runtime.js\",\n *   >   \"./jsx-dev-runtime\": \"./path/to/jsx-runtime.js\"\n *   >   // …\n *   > ```\n * @property {string | null | undefined} [pragma='React.createElement']\n *   Identifier or member expression to call when the effective runtime is\n *   classic.\n *\n *   Comment form: `@jsx identifier`.\n * @property {string | null | undefined} [pragmaFrag='React.Fragment']\n *   Identifier or member expression to use as a symbol for fragments when the\n *   effective runtime is classic.\n *\n *   Comment form: `@jsxFrag identifier`.\n * @property {boolean | null | undefined} [development=false]\n *   When in the automatic runtime, whether to import\n *   `theSource/jsx-dev-runtime.js`, use `jsxDEV`, and pass location info when\n *   available.\n *\n *   This helps debugging but adds a lot of code that you don’t want in\n *   production.\n * @property {string | null | undefined} [filePath]\n *   File path to the original source file.\n *\n *   Passed in location info to `jsxDEV` when using the automatic runtime with\n *   `development: true`.\n *\n * @typedef Annotations\n *   State where info from comments is gathered.\n * @property {Runtime | undefined} [jsxRuntime]\n *   Runtime.\n * @property {string | undefined} [jsx]\n *   JSX identifier (`pragma`).\n * @property {string | undefined} [jsxFrag]\n *   JSX identifier of fragment (`pragmaFrag`).\n * @property {string | undefined} [jsxImportSource]\n *   Where to import an automatic JSX runtime from.\n *\n * @typedef Imports\n *   State of used identifiers from the automatic runtime.\n * @property {boolean | undefined} [fragment]\n *   Symbol of `Fragment`.\n * @property {boolean | undefined} [jsx]\n *   Symbol of `jsx`.\n * @property {boolean | undefined} [jsxs]\n *   Symbol of `jsxs`.\n * @property {boolean | undefined} [jsxDEV]\n *   Symbol of `jsxDEV`.\n */\n\nimport {walk} from 'estree-walker'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\n\nconst regex = /@(jsx|jsxFrag|jsxImportSource|jsxRuntime)\\s+(\\S+)/g\n\n/**\n * Turn JSX in `tree` into function calls: `<x />` -> `h('x')`!\n *\n * ###### Algorithm\n *\n * In almost all cases, this utility is the same as the Babel plugin, except that\n * they work on slightly different syntax trees.\n *\n * Some differences:\n *\n * *   no pure annotations things\n * *   `this` is not a component: `<this>` -> `h('this')`, not `h(this)`\n * *   namespaces are supported: `<a:b c:d>` -> `h('a:b', {'c:d': true})`,\n *     which throws by default in Babel or can be turned on with `throwIfNamespace`\n * *   no `useSpread`, `useBuiltIns`, or `filter` options\n *\n * @template {Node} Tree\n *   Node type.\n * @param {Tree} tree\n *   Tree to transform (typically `Program`).\n * @param {Options | null | undefined} [options={}]\n *   Configuration (optional).\n * @returns {Tree}\n *   Given, modified, `tree`.\n */\n// To do next major: do not return the given Node.\nexport function buildJsx(tree, options) {\n  const config = options || {}\n  let automatic = config.runtime === 'automatic'\n  /** @type {Annotations} */\n  const annotations = {}\n  /** @type {Imports} */\n  const imports = {}\n\n  walk(tree, {\n    // @ts-expect-error: hush, `estree-walker` is broken.\n    enter(/** @type {Node} */ node) {\n      if (node.type === 'Program') {\n        const comments = node.comments || []\n        let index = -1\n\n        while (++index < comments.length) {\n          regex.lastIndex = 0\n\n          let match = regex.exec(comments[index].value)\n\n          while (match) {\n            // @ts-expect-error: indexable.\n            annotations[match[1]] = match[2]\n            match = regex.exec(comments[index].value)\n          }\n        }\n\n        if (annotations.jsxRuntime) {\n          if (annotations.jsxRuntime === 'automatic') {\n            automatic = true\n\n            if (annotations.jsx) {\n              throw new Error('Unexpected `@jsx` pragma w/ automatic runtime')\n            }\n\n            if (annotations.jsxFrag) {\n              throw new Error(\n                'Unexpected `@jsxFrag` pragma w/ automatic runtime'\n              )\n            }\n          } else if (annotations.jsxRuntime === 'classic') {\n            automatic = false\n\n            if (annotations.jsxImportSource) {\n              throw new Error(\n                'Unexpected `@jsxImportSource` w/ classic runtime'\n              )\n            }\n          } else {\n            throw new Error(\n              'Unexpected `jsxRuntime` `' +\n                annotations.jsxRuntime +\n                '`, expected `automatic` or `classic`'\n            )\n          }\n        }\n      }\n    },\n    // @ts-expect-error: hush, `estree-walker` is broken.\n    // eslint-disable-next-line complexity\n    leave(/** @type {Node} */ node) {\n      if (node.type === 'Program') {\n        /** @type {Array<ImportSpecifier>} */\n        const specifiers = []\n\n        if (imports.fragment) {\n          specifiers.push({\n            type: 'ImportSpecifier',\n            imported: {type: 'Identifier', name: 'Fragment'},\n            local: {type: 'Identifier', name: '_Fragment'}\n          })\n        }\n\n        if (imports.jsx) {\n          specifiers.push({\n            type: 'ImportSpecifier',\n            imported: {type: 'Identifier', name: 'jsx'},\n            local: {type: 'Identifier', name: '_jsx'}\n          })\n        }\n\n        if (imports.jsxs) {\n          specifiers.push({\n            type: 'ImportSpecifier',\n            imported: {type: 'Identifier', name: 'jsxs'},\n            local: {type: 'Identifier', name: '_jsxs'}\n          })\n        }\n\n        if (imports.jsxDEV) {\n          specifiers.push({\n            type: 'ImportSpecifier',\n            imported: {type: 'Identifier', name: 'jsxDEV'},\n            local: {type: 'Identifier', name: '_jsxDEV'}\n          })\n        }\n\n        if (specifiers.length > 0) {\n          node.body.unshift({\n            type: 'ImportDeclaration',\n            specifiers,\n            source: {\n              type: 'Literal',\n              value:\n                (annotations.jsxImportSource ||\n                  config.importSource ||\n                  'react') +\n                (config.development ? '/jsx-dev-runtime' : '/jsx-runtime')\n            }\n          })\n        }\n      }\n\n      if (node.type !== 'JSXElement' && node.type !== 'JSXFragment') {\n        return\n      }\n\n      /** @type {Array<Expression>} */\n      const children = []\n      let index = -1\n\n      // Figure out `children`.\n      while (++index < node.children.length) {\n        const child = node.children[index]\n\n        if (child.type === 'JSXExpressionContainer') {\n          // Ignore empty expressions.\n          if (child.expression.type !== 'JSXEmptyExpression') {\n            children.push(child.expression)\n          }\n        } else if (child.type === 'JSXText') {\n          const value = child.value\n            // Replace tabs w/ spaces.\n            .replace(/\\t/g, ' ')\n            // Use line feeds, drop spaces around them.\n            .replace(/ *(\\r?\\n|\\r) */g, '\\n')\n            // Collapse multiple line feeds.\n            .replace(/\\n+/g, '\\n')\n            // Drop final line feeds.\n            .replace(/\\n+$/, '')\n            // Drop first line feeds.\n            .replace(/^\\n+/, '')\n            // Replace line feeds with spaces.\n            .replace(/\\n/g, ' ')\n\n          // Ignore collapsible text.\n          if (value) {\n            children.push(create(child, {type: 'Literal', value}))\n          }\n        } else {\n          // @ts-expect-error JSX{Element,Fragment} have already been compiled,\n          // and `JSXSpreadChild` is not supported in Babel either, so ignore\n          // it.\n          children.push(child)\n        }\n      }\n\n      /** @type {MemberExpression | Literal | Identifier} */\n      let name\n      /** @type {Array<Property>} */\n      let fields = []\n      /** @type {Array<Expression>} */\n      const objects = []\n      /** @type {Array<Expression | SpreadElement>} */\n      let parameters = []\n      /** @type {Expression | undefined} */\n      let key\n\n      // Do the stuff needed for elements.\n      if (node.type === 'JSXElement') {\n        name = toIdentifier(node.openingElement.name)\n\n        // If the name could be an identifier, but start with a lowercase letter,\n        // it’s not a component.\n        if (name.type === 'Identifier' && /^[a-z]/.test(name.name)) {\n          name = create(name, {type: 'Literal', value: name.name})\n        }\n\n        /** @type {boolean | undefined} */\n        let spread\n        const attributes = node.openingElement.attributes\n        let index = -1\n\n        // Place props in the right order, because we might have duplicates\n        // in them and what’s spread in.\n        while (++index < attributes.length) {\n          const attribute = attributes[index]\n\n          if (attribute.type === 'JSXSpreadAttribute') {\n            if (fields.length > 0) {\n              objects.push({type: 'ObjectExpression', properties: fields})\n              fields = []\n            }\n\n            objects.push(attribute.argument)\n            spread = true\n          } else {\n            const prop = toProperty(attribute)\n\n            if (\n              automatic &&\n              prop.key.type === 'Identifier' &&\n              prop.key.name === 'key'\n            ) {\n              if (spread) {\n                throw new Error(\n                  'Expected `key` to come before any spread expressions'\n                )\n              }\n\n              // @ts-expect-error I can’t see object patterns being used as\n              // attribute values? 🤷‍♂️\n              key = prop.value\n            } else {\n              fields.push(prop)\n            }\n          }\n        }\n      }\n      // …and fragments.\n      else if (automatic) {\n        imports.fragment = true\n        name = {type: 'Identifier', name: '_Fragment'}\n      } else {\n        name = toMemberExpression(\n          annotations.jsxFrag || config.pragmaFrag || 'React.Fragment'\n        )\n      }\n\n      if (automatic) {\n        if (children.length > 0) {\n          fields.push({\n            type: 'Property',\n            key: {type: 'Identifier', name: 'children'},\n            value:\n              children.length > 1\n                ? {type: 'ArrayExpression', elements: children}\n                : children[0],\n            kind: 'init',\n            method: false,\n            shorthand: false,\n            computed: false\n          })\n        }\n      } else {\n        parameters = children\n      }\n\n      if (fields.length > 0) {\n        objects.push({type: 'ObjectExpression', properties: fields})\n      }\n\n      /** @type {Expression | undefined} */\n      let props\n      /** @type {MemberExpression | Literal | Identifier} */\n      let callee\n\n      if (objects.length > 1) {\n        // Don’t mutate the first object, shallow clone instead.\n        if (objects[0].type !== 'ObjectExpression') {\n          objects.unshift({type: 'ObjectExpression', properties: []})\n        }\n\n        props = {\n          type: 'CallExpression',\n          callee: toMemberExpression('Object.assign'),\n          arguments: objects,\n          optional: false\n        }\n      } else if (objects.length > 0) {\n        props = objects[0]\n      }\n\n      if (automatic) {\n        parameters.push(props || {type: 'ObjectExpression', properties: []})\n\n        if (key) {\n          parameters.push(key)\n        } else if (config.development) {\n          parameters.push({type: 'Identifier', name: 'undefined'})\n        }\n\n        const isStaticChildren = children.length > 1\n\n        if (config.development) {\n          imports.jsxDEV = true\n          callee = {\n            type: 'Identifier',\n            name: '_jsxDEV'\n          }\n          parameters.push({type: 'Literal', value: isStaticChildren})\n\n          /** @type {ObjectExpression} */\n          const source = {\n            type: 'ObjectExpression',\n            properties: [\n              {\n                type: 'Property',\n                method: false,\n                shorthand: false,\n                computed: false,\n                kind: 'init',\n                key: {type: 'Identifier', name: 'fileName'},\n                value: {\n                  type: 'Literal',\n                  value: config.filePath || '<source.js>'\n                }\n              }\n            ]\n          }\n\n          if (node.loc) {\n            source.properties.push(\n              {\n                type: 'Property',\n                method: false,\n                shorthand: false,\n                computed: false,\n                kind: 'init',\n                key: {type: 'Identifier', name: 'lineNumber'},\n                value: {type: 'Literal', value: node.loc.start.line}\n              },\n              {\n                type: 'Property',\n                method: false,\n                shorthand: false,\n                computed: false,\n                kind: 'init',\n                key: {type: 'Identifier', name: 'columnNumber'},\n                value: {type: 'Literal', value: node.loc.start.column + 1}\n              }\n            )\n          }\n\n          parameters.push(source, {type: 'ThisExpression'})\n        } else if (isStaticChildren) {\n          imports.jsxs = true\n          callee = {type: 'Identifier', name: '_jsxs'}\n        } else {\n          imports.jsx = true\n          callee = {type: 'Identifier', name: '_jsx'}\n        }\n      }\n      // Classic.\n      else {\n        // There are props or children.\n        if (props || parameters.length > 0) {\n          parameters.unshift(props || {type: 'Literal', value: null})\n        }\n\n        callee = toMemberExpression(\n          annotations.jsx || config.pragma || 'React.createElement'\n        )\n      }\n\n      parameters.unshift(name)\n\n      // Types of `estree-walker` are wrong\n      this.replace(\n        create(node, {\n          type: 'CallExpression',\n          callee,\n          arguments: parameters,\n          optional: false\n        })\n      )\n    }\n  })\n\n  return tree\n}\n\n/**\n * @param {JSXAttribute} node\n * @returns {Property}\n */\nfunction toProperty(node) {\n  /** @type {Expression} */\n  let value\n\n  if (node.value) {\n    if (node.value.type === 'JSXExpressionContainer') {\n      // @ts-expect-error `JSXEmptyExpression` is not allowed in props.\n      value = node.value.expression\n    }\n    // Literal or call expression.\n    else {\n      // @ts-expect-error: JSX{Element,Fragment} are already compiled to\n      // `CallExpression`.\n      value = node.value\n      // @ts-expect-error Remove `raw` so we don’t get character references in\n      // strings.\n      delete value.raw\n    }\n  }\n  // Boolean prop.\n  else {\n    value = {type: 'Literal', value: true}\n  }\n\n  return create(node, {\n    type: 'Property',\n    key: toIdentifier(node.name),\n    value,\n    kind: 'init',\n    method: false,\n    shorthand: false,\n    computed: false\n  })\n}\n\n/**\n * @param {JSXMemberExpression | JSXNamespacedName | JSXIdentifier} node\n * @returns {MemberExpression | Identifier | Literal}\n */\nfunction toIdentifier(node) {\n  /** @type {MemberExpression | Identifier | Literal} */\n  let replace\n\n  if (node.type === 'JSXMemberExpression') {\n    // `property` is always a `JSXIdentifier`, but it could be something that\n    // isn’t an ES identifier name.\n    const id = toIdentifier(node.property)\n    replace = {\n      type: 'MemberExpression',\n      object: toIdentifier(node.object),\n      property: id,\n      computed: id.type === 'Literal',\n      optional: false\n    }\n  } else if (node.type === 'JSXNamespacedName') {\n    replace = {\n      type: 'Literal',\n      value: node.namespace.name + ':' + node.name.name\n    }\n  }\n  // Must be `JSXIdentifier`.\n  else {\n    replace = isIdentifierName(node.name)\n      ? {type: 'Identifier', name: node.name}\n      : {type: 'Literal', value: node.name}\n  }\n\n  return create(node, replace)\n}\n\n/**\n * @param {string} id\n * @returns {Identifier | Literal | MemberExpression}\n */\nfunction toMemberExpression(id) {\n  const identifiers = id.split('.')\n  let index = -1\n  /** @type {Identifier | Literal | MemberExpression | undefined} */\n  let result\n\n  while (++index < identifiers.length) {\n    /** @type {Identifier | Literal} */\n    const prop = isIdentifierName(identifiers[index])\n      ? {type: 'Identifier', name: identifiers[index]}\n      : {type: 'Literal', value: identifiers[index]}\n    result = result\n      ? {\n          type: 'MemberExpression',\n          object: result,\n          property: prop,\n          computed: Boolean(index && prop.type === 'Literal'),\n          optional: false\n        }\n      : prop\n  }\n\n  // @ts-expect-error: always a result.\n  return result\n}\n\n/**\n * @template {Node} T\n * @param {Node} from\n * @param {T} node\n * @returns {T}\n */\nfunction create(from, node) {\n  const fields = ['start', 'end', 'loc', 'range', 'comments']\n  let index = -1\n\n  while (++index < fields.length) {\n    const field = fields[index]\n    if (field in from) {\n      // @ts-expect-error: indexable.\n      node[field] = from[field]\n    }\n  }\n\n  return node\n}\n","/**\n * @typedef {import('estree-jsx').Node} Node\n */\n\n/**\n * @param {Node} from\n *   Node to take from.\n * @param {Node} to\n *   Node to add to.\n * @returns {void}\n *   Nothing.\n */\nexport function create(from, to) {\n  /** @type {Array<keyof Node>} */\n  // @ts-expect-error: `start`, `end`, `comments` are custom Acorn fields.\n  const fields = ['start', 'end', 'loc', 'range', 'comments']\n  let index = -1\n\n  while (++index < fields.length) {\n    const field = fields[index]\n\n    if (field in from) {\n      // @ts-expect-error: assume they’re settable.\n      to[field] = from[field]\n    }\n  }\n}\n","/**\n * @typedef {import('estree-jsx').AssignmentProperty} AssignmentProperty\n * @typedef {import('estree-jsx').ExportSpecifier} ExportSpecifier\n * @typedef {import('estree-jsx').Expression} Expression\n * @typedef {import('estree-jsx').Identifier} Identifier\n * @typedef {import('estree-jsx').ImportDefaultSpecifier} ImportDefaultSpecifier\n * @typedef {import('estree-jsx').ImportNamespaceSpecifier} ImportNamespaceSpecifier\n * @typedef {import('estree-jsx').ImportSpecifier} ImportSpecifier\n * @typedef {import('estree-jsx').VariableDeclarator} VariableDeclarator\n */\n\nimport {create} from './estree-util-create.js'\n\n/**\n * @param {Array<ImportSpecifier | ImportDefaultSpecifier | ImportNamespaceSpecifier | ExportSpecifier>} specifiers\n * @param {Expression} init\n * @returns {Array<VariableDeclarator>}\n */\nexport function specifiersToDeclarations(specifiers, init) {\n  let index = -1\n  /** @type {Array<VariableDeclarator>} */\n  const declarations = []\n  /** @type {Array<ImportSpecifier | ImportDefaultSpecifier | ExportSpecifier>} */\n  const otherSpecifiers = []\n  // Can only be one according to JS syntax.\n  /** @type {ImportNamespaceSpecifier | undefined} */\n  let importNamespaceSpecifier\n\n  while (++index < specifiers.length) {\n    const specifier = specifiers[index]\n\n    if (specifier.type === 'ImportNamespaceSpecifier') {\n      importNamespaceSpecifier = specifier\n    } else {\n      otherSpecifiers.push(specifier)\n    }\n  }\n\n  if (importNamespaceSpecifier) {\n    /** @type {VariableDeclarator} */\n    const declarator = {\n      type: 'VariableDeclarator',\n      id: importNamespaceSpecifier.local,\n      init\n    }\n    create(importNamespaceSpecifier, declarator)\n    declarations.push(declarator)\n  }\n\n  declarations.push({\n    type: 'VariableDeclarator',\n    id: {\n      type: 'ObjectPattern',\n      properties: otherSpecifiers.map((specifier) => {\n        /** @type {Identifier} */\n        let key =\n          specifier.type === 'ImportSpecifier'\n            ? specifier.imported\n            : specifier.type === 'ExportSpecifier'\n            ? specifier.exported\n            : {type: 'Identifier', name: 'default'}\n        let value = specifier.local\n\n        // Switch them around if we’re exporting.\n        if (specifier.type === 'ExportSpecifier') {\n          value = key\n          key = specifier.local\n        }\n\n        /** @type {AssignmentProperty} */\n        const property = {\n          type: 'Property',\n          kind: 'init',\n          shorthand: key.name === value.name,\n          method: false,\n          computed: false,\n          key,\n          value\n        }\n        create(specifier, property)\n        return property\n      })\n    },\n    init: importNamespaceSpecifier\n      ? {type: 'Identifier', name: importNamespaceSpecifier.local.name}\n      : init\n  })\n\n  return declarations\n}\n","/**\n * @typedef {import('estree-jsx').Identifier} Identifier\n * @typedef {import('estree-jsx').JSXIdentifier} JSXIdentifier\n * @typedef {import('estree-jsx').JSXMemberExpression} JSXMemberExpression\n * @typedef {import('estree-jsx').Literal} Literal\n * @typedef {import('estree-jsx').MemberExpression} MemberExpression\n */\n\nimport {\n  start as esStart,\n  cont as esCont,\n  name as isIdentifierName\n} from 'estree-util-is-identifier-name'\n\nexport const toIdOrMemberExpression = toIdOrMemberExpressionFactory(\n  'Identifier',\n  'MemberExpression',\n  isIdentifierName\n)\n\nexport const toJsxIdOrMemberExpression =\n  // @ts-expect-error: fine\n  /** @type {(ids: Array<string | number>) => JSXIdentifier | JSXMemberExpression)} */\n  (\n    toIdOrMemberExpressionFactory(\n      'JSXIdentifier',\n      'JSXMemberExpression',\n      isJsxIdentifierName\n    )\n  )\n\n/**\n * @param {string} idType\n * @param {string} memberType\n * @param {(value: string) => boolean} isIdentifier\n */\nfunction toIdOrMemberExpressionFactory(idType, memberType, isIdentifier) {\n  return toIdOrMemberExpression\n  /**\n   * @param {Array<string | number>} ids\n   * @returns {Identifier | MemberExpression}\n   */\n  function toIdOrMemberExpression(ids) {\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let object\n\n    while (++index < ids.length) {\n      const name = ids[index]\n      const valid = typeof name === 'string' && isIdentifier(name)\n\n      // A value of `asd.123` could be turned into `asd['123']` in the JS form,\n      // but JSX does not have a form for it, so throw.\n      /* c8 ignore next 3 */\n      if (idType === 'JSXIdentifier' && !valid) {\n        throw new Error('Cannot turn `' + name + '` into a JSX identifier')\n      }\n\n      /** @type {Identifier | Literal} */\n      // @ts-expect-error: JSX is fine.\n      const id = valid ? {type: idType, name} : {type: 'Literal', value: name}\n      // @ts-expect-error: JSX is fine.\n      object = object\n        ? {\n            type: memberType,\n            object,\n            property: id,\n            computed: id.type === 'Literal',\n            optional: false\n          }\n        : id\n    }\n\n    // Just for types.\n    /* c8 ignore next 3 */\n    if (!object) throw new Error('Expected non-empty `ids` to be passed')\n    if (object.type === 'Literal')\n      throw new Error('Expected identifier as left-most value')\n\n    return object\n  }\n}\n\n/**\n * Checks if the given string is a valid JSX identifier name.\n * @param {string} name\n */\nfunction isJsxIdentifierName(name) {\n  let index = -1\n\n  while (++index < name.length) {\n    // We currently receive valid input, but this catches bugs and is needed\n    // when externalized.\n    /* c8 ignore next */\n    if (!(index ? jsxCont : esStart)(name.charCodeAt(index))) return false\n  }\n\n  // `false` if `name` is empty.\n  return index > 0\n}\n\n/**\n * Checks if the given character code can continue a JSX identifier.\n * @param {number} code\n */\nfunction jsxCont(code) {\n  return code === 45 /* `-` */ || esCont(code)\n}\n","/**\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {import('estree-util-build-jsx').BuildJsxOptions} BuildJsxOptions\n */\n\n/**\n * @typedef ExtraOptions\n *   Configuration for internal plugin `recma-jsx-build`.\n * @property {'function-body' | 'program' | null | undefined} [outputFormat='program']\n *   Whether to keep the import of the automatic runtime or get it from\n *   `arguments[0]` instead.\n *\n * @typedef {BuildJsxOptions & ExtraOptions} RecmaJsxBuildOptions\n */\n\nimport {buildJsx} from 'estree-util-build-jsx'\nimport {specifiersToDeclarations} from '../util/estree-util-specifiers-to-declarations.js'\nimport {toIdOrMemberExpression} from '../util/estree-util-to-id-or-member-expression.js'\n\n/**\n * A plugin to build JSX into function calls.\n * `estree-util-build-jsx` does all the work for us!\n *\n * @type {import('unified').Plugin<[RecmaJsxBuildOptions | null | undefined] | [], Program>}\n */\nexport function recmaJsxBuild(options) {\n  // Always given inside `@mdx-js/mdx`\n  /* c8 ignore next */\n  const {development, outputFormat} = options || {}\n\n  return (tree, file) => {\n    buildJsx(tree, {development, filePath: file.history[0]})\n\n    // When compiling to a function body, replace the import that was just\n    // generated, and get `jsx`, `jsxs`, and `Fragment` from `arguments[0]`\n    // instead.\n    if (\n      outputFormat === 'function-body' &&\n      tree.body[0] &&\n      tree.body[0].type === 'ImportDeclaration' &&\n      typeof tree.body[0].source.value === 'string' &&\n      /\\/jsx-(dev-)?runtime$/.test(tree.body[0].source.value)\n    ) {\n      tree.body[0] = {\n        type: 'VariableDeclaration',\n        kind: 'const',\n        declarations: specifiersToDeclarations(\n          tree.body[0].specifiers,\n          toIdOrMemberExpression(['arguments', 0])\n        )\n      }\n    }\n  }\n}\n","/** @typedef { import('estree').Node} Node */\n/** @typedef {Node | {\n *   type: 'PropertyDefinition';\n *   computed: boolean;\n *   value: Node\n * }} NodeWithPropertyDefinition */\n\n/**\n *\n * @param {NodeWithPropertyDefinition} node\n * @param {NodeWithPropertyDefinition} parent\n * @returns {boolean}\n */\nexport default function is_reference (node, parent) {\n\tif (node.type === 'MemberExpression') {\n\t\treturn !node.computed && is_reference(node.object, node);\n\t}\n\n\tif (node.type === 'Identifier') {\n\t\tif (!parent) return true;\n\n\t\tswitch (parent.type) {\n\t\t\t// disregard `bar` in `foo.bar`\n\t\t\tcase 'MemberExpression': return parent.computed || node === parent.object;\n\n\t\t\t// disregard the `foo` in `class {foo(){}}` but keep it in `class {[foo](){}}`\n\t\t\tcase 'MethodDefinition': return parent.computed;\n\n\t\t\t// disregard the `foo` in `class {foo=bar}` but keep it in `class {[foo]=bar}` and `class {bar=foo}`\n\t\t\tcase 'PropertyDefinition': return parent.computed || node === parent.value;\n\n\t\t\t// disregard the `bar` in `{ bar: foo }`, but keep it in `{ [bar]: foo }`\n\t\t\tcase 'Property': return parent.computed || node === parent.value;\n\n\t\t\t// disregard the `bar` in `export { foo as bar }` or\n\t\t\t// the foo in `import { foo as bar }`\n\t\t\tcase 'ExportSpecifier':\n\t\t\tcase 'ImportSpecifier': return node === parent.local;\n\n\t\t\t// disregard the `foo` in `foo: while (...) { ... break foo; ... continue foo;}`\n\t\t\tcase 'LabeledStatement':\n\t\t\tcase 'BreakStatement':\n\t\t\tcase 'ContinueStatement': return false;\n\t\t\tdefault: return true;\n\t\t}\n\t}\n\n\treturn false;\n}\n","import { walk } from 'estree-walker';\nimport is_reference from 'is-reference';\n\n/** @param {import('estree').Node} expression */\nexport function analyze(expression) {\n\t/** @typedef {import('estree').Node} Node */\n\n\t/** @type {WeakMap<Node, Scope>} */\n\tconst map = new WeakMap();\n\n\t/** @type {Map<string, Node>} */\n\tconst globals = new Map();\n\n\tconst scope = new Scope(null, false);\n\n\t/** @type {[Scope, import('estree').Identifier][]} */\n\tconst references = [];\n\t/** @type {Scope} */\n\tlet current_scope = scope;\n\n\twalk(expression, {\n\t\tenter(node, parent) {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'Identifier':\n\t\t\t\t\tif (parent && is_reference(node, parent)) {\n\t\t\t\t\t\treferences.push([current_scope, node]);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ImportDeclaration':\n\t\t\t\t\tnode.specifiers.forEach((specifier) => {\n\t\t\t\t\t\tcurrent_scope.declarations.set(specifier.local.name, specifier);\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'FunctionExpression':\n\t\t\t\tcase 'FunctionDeclaration':\n\t\t\t\tcase 'ArrowFunctionExpression':\n\t\t\t\t\tif (node.type === 'FunctionDeclaration') {\n\t\t\t\t\t\tif (node.id) {\n\t\t\t\t\t\t\tcurrent_scope.declarations.set(node.id.name, node);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmap.set(node, current_scope = new Scope(current_scope, false));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmap.set(node, current_scope = new Scope(current_scope, false));\n\n\t\t\t\t\t\tif (node.type === 'FunctionExpression' && node.id) {\n\t\t\t\t\t\t\tcurrent_scope.declarations.set(node.id.name, node);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tnode.params.forEach(param => {\n\t\t\t\t\t\textract_names(param).forEach(name => {\n\t\t\t\t\t\t\tcurrent_scope.declarations.set(name, node);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ForStatement':\n\t\t\t\tcase 'ForInStatement':\n\t\t\t\tcase 'ForOfStatement':\n\t\t\t\t\tmap.set(node, current_scope = new Scope(current_scope, true));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'BlockStatement':\n\t\t\t\t\tmap.set(node, current_scope = new Scope(current_scope, true));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ClassDeclaration':\n\t\t\t\tcase 'VariableDeclaration':\n\t\t\t\t\tcurrent_scope.add_declaration(node);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'CatchClause':\n\t\t\t\t\tmap.set(node, current_scope = new Scope(current_scope, true));\n\n\t\t\t\t\tif (node.param) {\n\t\t\t\t\t\textract_names(node.param).forEach(name => {\n\t\t\t\t\t\t\tif (node.param) {\n\t\t\t\t\t\t\t\tcurrent_scope.declarations.set(name, node.param);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\n\t\tleave(node) {\n\t\t\tif (map.has(node) && current_scope !== null && current_scope.parent) {\n\t\t\t\tcurrent_scope = current_scope.parent;\n\t\t\t}\n\t\t}\n\t});\n\n\tfor (let i = references.length - 1; i >= 0; --i) {\n\t\tconst [scope, reference] = references[i];\n\n\t\tif (!scope.references.has(reference.name)) {\n\t\t\tadd_reference(scope, reference.name);\n\t\t}\n\t\tif (!scope.find_owner(reference.name)) {\n\t\t\tglobals.set(reference.name, reference);\n\t\t}\n\t}\n\n\treturn { map, scope, globals };\n}\n\n/**\n * @param {Scope} scope\n * @param {string} name\n */\nfunction add_reference(scope, name) {\n\tscope.references.add(name);\n\tif (scope.parent) add_reference(scope.parent, name);\n}\n\nexport class Scope {\n\t/**\n\t * @param {Scope | null} parent \n\t * @param {boolean} block \n\t */\n\tconstructor(parent, block) {\n\t\t/** @type {Scope | null} */\n\t\tthis.parent = parent;\n\n\t\t/** @type {boolean} */\n\t\tthis.block = block;\n\n\t\t/** @type {Map<string, import('estree').Node>} */\n\t\tthis.declarations = new Map();\n\n\t\t/** @type {Set<string>} */\n\t\tthis.initialised_declarations = new Set();\n\n\t\t/** @type {Set<string>} */\n\t\tthis.references = new Set();\n\t}\n\n\t/**\n\t * @param {import('estree').VariableDeclaration | import('estree').ClassDeclaration} node\n\t */\n\tadd_declaration(node) {\n\t\tif (node.type === 'VariableDeclaration') {\n\t\t\tif (node.kind === 'var' && this.block && this.parent) {\n\t\t\t\tthis.parent.add_declaration(node);\n\t\t\t} else {\n\t\t\t\t/** @param {import('estree').VariableDeclarator} declarator */\n\t\t\t\tconst handle_declarator = (declarator) => {\n\t\t\t\t\textract_names(declarator.id).forEach(name => {\n\t\t\t\t\t\tthis.declarations.set(name, node);\n\t\t\t\t\t\tif (declarator.init) this.initialised_declarations.add(name);\n\t\t\t\t\t});;\n\t\t\t\t}\n\n\t\t\t\tnode.declarations.forEach(handle_declarator);\n\t\t\t}\n\t\t} else if (node.id) {\n\t\t\tthis.declarations.set(node.id.name, node);\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} name\n\t * @returns {Scope | null}\n\t */\n\tfind_owner(name) {\n\t\tif (this.declarations.has(name)) return this;\n\t\treturn this.parent && this.parent.find_owner(name);\n\t}\n\n\t/**\n\t * @param {string} name\n\t * @returns {boolean}\n\t */\n\thas(name) {\n\t\treturn (\n\t\t\tthis.declarations.has(name) || (!!this.parent && this.parent.has(name))\n\t\t);\n\t}\n}\n\n/**\n * @param {import('estree').Node} param\n * @returns {string[]}\n */\nexport function extract_names(param) {\n\treturn extract_identifiers(param).map(node => node.name);\n}\n\n/**\n * @param {import('estree').Node} param\n * @param {import('estree').Identifier[]} nodes\n * @returns {import('estree').Identifier[]}\n */\nexport function extract_identifiers(param, nodes = []) {\n\tswitch (param.type) {\n\t\tcase 'Identifier':\n\t\t\tnodes.push(param);\n\t\t\tbreak;\n\n\t\tcase 'MemberExpression':\n\t\t\tlet object = param;\n\t\t\twhile (object.type === 'MemberExpression') {\n\t\t\t\tobject = /** @type {any} */ (object.object);\n\t\t\t}\n\t\t\tnodes.push(/** @type {any} */ (object));\n\t\t\tbreak;\n\n\t\tcase 'ObjectPattern':\n\t\t\t/** @param {import('estree').Property | import('estree').RestElement} prop */\n\t\t\tconst handle_prop = (prop) => {\n\t\t\t\tif (prop.type === 'RestElement') {\n\t\t\t\t\textract_identifiers(prop.argument, nodes);\n\t\t\t\t} else {\n\t\t\t\t\textract_identifiers(prop.value, nodes);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tparam.properties.forEach(handle_prop);\n\t\t\tbreak;\n\n\t\tcase 'ArrayPattern':\n\t\t\t/** @param {import('estree').Node} element */\n\t\t\tconst handle_element = (element) => {\n\t\t\t\tif (element) extract_identifiers(element, nodes);\n\t\t\t};\n\n\t\t\tparam.elements.forEach((element) => {\n\t\t\t\tif (element) {\n\t\t\t\t\thandle_element(element)\n\t\t\t\t}\n\t\t\t});\n\t\t\tbreak;\n\n\t\tcase 'RestElement':\n\t\t\textract_identifiers(param.argument, nodes);\n\t\t\tbreak;\n\n\t\tcase 'AssignmentPattern':\n\t\t\textract_identifiers(param.left, nodes);\n\t\t\tbreak;\n\t}\n\n\treturn nodes;\n}\n","/**\n * @typedef {import('estree-jsx').Declaration} Declaration\n * @typedef {import('estree-jsx').Expression} Expression\n */\n\n/**\n * Turn a declaration into an expression.\n *\n * Doesn’t work for variable declarations, but that’s fine for our use case\n * because currently we’re using this utility for export default declarations,\n * which can’t contain variable declarations.\n *\n * @param {Declaration} declaration\n *   Declaration.\n * @returns {Expression}\n *   Expression.\n */\nexport function declarationToExpression(declaration) {\n  if (declaration.type === 'FunctionDeclaration') {\n    return {...declaration, type: 'FunctionExpression'}\n  }\n\n  if (declaration.type === 'ClassDeclaration') {\n    return {...declaration, type: 'ClassExpression'}\n    /* Internal utility so the next shouldn’t happen or a maintainer is making a\n     * mistake. */\n    /* c8 ignore next 4 */\n  }\n\n  // Probably `VariableDeclaration`.\n  throw new Error('Cannot turn `' + declaration.type + '` into an expression')\n}\n","/**\n * @typedef {import('estree-jsx').Node} Node\n * @typedef {import('estree-jsx').Declaration} Declaration\n */\n\n/**\n * Check if `node` is a declaration.\n *\n * @param {Node} node\n *   Node to check.\n * @returns {node is Declaration}\n *   Whether `node` is a declaration.\n */\nexport function isDeclaration(node) {\n  return Boolean(\n    node.type === 'FunctionDeclaration' ||\n      node.type === 'ClassDeclaration' ||\n      node.type === 'VariableDeclaration'\n  )\n}\n","/**\n * @typedef {import('estree-jsx').Directive} Directive\n * @typedef {import('estree-jsx').ExportAllDeclaration} ExportAllDeclaration\n * @typedef {import('estree-jsx').ExportDefaultDeclaration} ExportDefaultDeclaration\n * @typedef {import('estree-jsx').ExportNamedDeclaration} ExportNamedDeclaration\n * @typedef {import('estree-jsx').ExportSpecifier} ExportSpecifier\n * @typedef {import('estree-jsx').Expression} Expression\n * @typedef {import('estree-jsx').FunctionDeclaration} FunctionDeclaration\n * @typedef {import('estree-jsx').ImportDeclaration} ImportDeclaration\n * @typedef {import('estree-jsx').ImportDefaultSpecifier} ImportDefaultSpecifier\n * @typedef {import('estree-jsx').ImportExpression} ImportExpression\n * @typedef {import('estree-jsx').ImportSpecifier} ImportSpecifier\n * @typedef {import('estree-jsx').Literal} Literal\n * @typedef {import('estree-jsx').JSXElement} JSXElement\n * @typedef {import('estree-jsx').ModuleDeclaration} ModuleDeclaration\n * @typedef {import('estree-jsx').Node} Node\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {import('estree-jsx').Property} Property\n * @typedef {import('estree-jsx').SimpleLiteral} SimpleLiteral\n * @typedef {import('estree-jsx').SpreadElement} SpreadElement\n * @typedef {import('estree-jsx').Statement} Statement\n * @typedef {import('estree-jsx').VariableDeclarator} VariableDeclarator\n */\n\n/**\n * @typedef RecmaDocumentOptions\n *   Configuration for internal plugin `recma-document`.\n * @property {'function-body' | 'program' | null | undefined} [outputFormat='program']\n *   Whether to use either `import` and `export` statements to get the runtime\n *   (and optionally provider) and export the content, or get values from\n *   `arguments` and return things.\n * @property {boolean | null | undefined} [useDynamicImport=false]\n *   Whether to keep `import` (and `export … from`) statements or compile them\n *   to dynamic `import()` instead.\n * @property {string | null | undefined} [baseUrl]\n *   Resolve `import`s (and `export … from`, and `import.meta.url`) relative to\n *   this URL.\n * @property {string | null | undefined} [pragma='React.createElement']\n *   Pragma for JSX (used in classic runtime).\n * @property {string | null | undefined} [pragmaFrag='React.Fragment']\n *   Pragma for JSX fragments (used in classic runtime).\n * @property {string | null | undefined} [pragmaImportSource='react']\n *   Where to import the identifier of `pragma` from (used in classic runtime).\n * @property {string | null | undefined} [jsxImportSource='react']\n *   Place to import automatic JSX runtimes from (used in automatic runtime).\n * @property {'automatic' | 'classic' | null | undefined} [jsxRuntime='automatic']\n *   JSX runtime to use.\n */\n\nimport {analyze} from 'periscopic'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nimport {positionFromEstree} from 'unist-util-position-from-estree'\nimport {walk} from 'estree-walker'\nimport {create} from '../util/estree-util-create.js'\nimport {specifiersToDeclarations} from '../util/estree-util-specifiers-to-declarations.js'\nimport {declarationToExpression} from '../util/estree-util-declaration-to-expression.js'\nimport {isDeclaration} from '../util/estree-util-is-declaration.js'\n\n/**\n * A plugin to wrap the estree in `MDXContent`.\n *\n * @type {import('unified').Plugin<[RecmaDocumentOptions | null | undefined] | [], Program>}\n */\nexport function recmaDocument(options) {\n  // Always given inside `@mdx-js/mdx`\n  /* c8 ignore next */\n  const options_ = options || {}\n  const baseUrl = options_.baseUrl || undefined\n  const useDynamicImport = options_.useDynamicImport || undefined\n  const outputFormat = options_.outputFormat || 'program'\n  const pragma =\n    options_.pragma === undefined ? 'React.createElement' : options_.pragma\n  const pragmaFrag =\n    options_.pragmaFrag === undefined ? 'React.Fragment' : options_.pragmaFrag\n  const pragmaImportSource = options_.pragmaImportSource || 'react'\n  const jsxImportSource = options_.jsxImportSource || 'react'\n  const jsxRuntime = options_.jsxRuntime || 'automatic'\n\n  return (tree, file) => {\n    /** @type {Array<[string, string] | string>} */\n    const exportedIdentifiers = []\n    /** @type {Array<Directive | ModuleDeclaration | Statement>} */\n    const replacement = []\n    /** @type {Array<string>} */\n    const pragmas = []\n    let exportAllCount = 0\n    /** @type {ExportDefaultDeclaration | ExportSpecifier | undefined} */\n    let layout\n    /** @type {boolean | undefined} */\n    let content\n    /** @type {Node} */\n    let child\n\n    // Patch missing comments, which types say could occur.\n    /* c8 ignore next */\n    if (!tree.comments) tree.comments = []\n\n    if (jsxRuntime) {\n      pragmas.push('@jsxRuntime ' + jsxRuntime)\n    }\n\n    if (jsxRuntime === 'automatic' && jsxImportSource) {\n      pragmas.push('@jsxImportSource ' + jsxImportSource)\n    }\n\n    if (jsxRuntime === 'classic' && pragma) {\n      pragmas.push('@jsx ' + pragma)\n    }\n\n    if (jsxRuntime === 'classic' && pragmaFrag) {\n      pragmas.push('@jsxFrag ' + pragmaFrag)\n    }\n\n    if (pragmas.length > 0) {\n      tree.comments.unshift({type: 'Block', value: pragmas.join(' ')})\n    }\n\n    if (jsxRuntime === 'classic' && pragmaImportSource) {\n      if (!pragma) {\n        throw new Error(\n          'Missing `pragma` in classic runtime with `pragmaImportSource`'\n        )\n      }\n\n      handleEsm({\n        type: 'ImportDeclaration',\n        specifiers: [\n          {\n            type: 'ImportDefaultSpecifier',\n            local: {type: 'Identifier', name: pragma.split('.')[0]}\n          }\n        ],\n        source: {type: 'Literal', value: pragmaImportSource}\n      })\n    }\n\n    // Find the `export default`, the JSX expression, and leave the rest\n    // (import/exports) as they are.\n    for (child of tree.body) {\n      // ```js\n      // export default props => <>{props.children}</>\n      // ```\n      //\n      // Treat it as an inline layout declaration.\n      if (child.type === 'ExportDefaultDeclaration') {\n        if (layout) {\n          file.fail(\n            'Cannot specify multiple layouts (previous: ' +\n              stringifyPosition(positionFromEstree(layout)) +\n              ')',\n            positionFromEstree(child),\n            'recma-document:duplicate-layout'\n          )\n        }\n\n        layout = child\n        replacement.push({\n          type: 'VariableDeclaration',\n          kind: 'const',\n          declarations: [\n            {\n              type: 'VariableDeclarator',\n              id: {type: 'Identifier', name: 'MDXLayout'},\n              init: isDeclaration(child.declaration)\n                ? declarationToExpression(child.declaration)\n                : child.declaration\n            }\n          ]\n        })\n      }\n      // ```js\n      // export {a, b as c} from 'd'\n      // ```\n      else if (child.type === 'ExportNamedDeclaration' && child.source) {\n        const source = /** @type {SimpleLiteral} */ (child.source)\n\n        // Remove `default` or `as default`, but not `default as`, specifier.\n        child.specifiers = child.specifiers.filter((specifier) => {\n          if (specifier.exported.name === 'default') {\n            if (layout) {\n              file.fail(\n                'Cannot specify multiple layouts (previous: ' +\n                  stringifyPosition(positionFromEstree(layout)) +\n                  ')',\n                positionFromEstree(child),\n                'recma-document:duplicate-layout'\n              )\n            }\n\n            layout = specifier\n\n            // Make it just an import: `import MDXLayout from '…'`.\n            /** @type {Array<ImportDefaultSpecifier | ImportSpecifier>} */\n            const specifiers = []\n\n            // Default as default / something else as default.\n            if (specifier.local.name === 'default') {\n              specifiers.push({\n                type: 'ImportDefaultSpecifier',\n                local: {type: 'Identifier', name: 'MDXLayout'}\n              })\n            } else {\n              /** @type {ImportSpecifier} */\n              const importSpecifier = {\n                type: 'ImportSpecifier',\n                imported: specifier.local,\n                local: {type: 'Identifier', name: 'MDXLayout'}\n              }\n              create(specifier.local, importSpecifier)\n              specifiers.push(importSpecifier)\n            }\n\n            /** @type {Literal} */\n            const from = {type: 'Literal', value: source.value}\n            create(source, from)\n\n            /** @type {ImportDeclaration} */\n            const declaration = {\n              type: 'ImportDeclaration',\n              specifiers,\n              source: from\n            }\n            create(specifier, declaration)\n            handleEsm(declaration)\n\n            return false\n          }\n\n          return true\n        })\n\n        // If there are other things imported, keep it.\n        if (child.specifiers.length > 0) {\n          handleExport(child)\n        }\n      }\n      // ```js\n      // export {a, b as c}\n      // export * from 'a'\n      // ```\n      else if (\n        child.type === 'ExportNamedDeclaration' ||\n        child.type === 'ExportAllDeclaration'\n      ) {\n        handleExport(child)\n      } else if (child.type === 'ImportDeclaration') {\n        handleEsm(child)\n      } else if (\n        child.type === 'ExpressionStatement' &&\n        // @ts-expect-error types are wrong: `JSXFragment` is an `Expression`.\n        (child.expression.type === 'JSXFragment' ||\n          child.expression.type === 'JSXElement')\n      ) {\n        content = true\n        replacement.push(...createMdxContent(child.expression, Boolean(layout)))\n        // The following catch-all branch is because plugins might’ve added\n        // other things.\n        // Normally, we only have import/export/jsx, but just add whatever’s\n        // there.\n        /* c8 ignore next 3 */\n      } else {\n        replacement.push(child)\n      }\n    }\n\n    // If there was no JSX content at all, add an empty function.\n    if (!content) {\n      replacement.push(...createMdxContent(undefined, Boolean(layout)))\n    }\n\n    exportedIdentifiers.push(['MDXContent', 'default'])\n\n    if (outputFormat === 'function-body') {\n      replacement.push({\n        type: 'ReturnStatement',\n        argument: {\n          type: 'ObjectExpression',\n          properties: [\n            ...Array.from({length: exportAllCount}).map(\n              /**\n               * @param {undefined} _\n               * @param {number} index\n               * @returns {SpreadElement}\n               */\n              (_, index) => ({\n                type: 'SpreadElement',\n                argument: {type: 'Identifier', name: '_exportAll' + (index + 1)}\n              })\n            ),\n            ...exportedIdentifiers.map((d) => {\n              /** @type {Property} */\n              const prop = {\n                type: 'Property',\n                kind: 'init',\n                method: false,\n                computed: false,\n                shorthand: typeof d === 'string',\n                key: {\n                  type: 'Identifier',\n                  name: typeof d === 'string' ? d : d[1]\n                },\n                value: {\n                  type: 'Identifier',\n                  name: typeof d === 'string' ? d : d[0]\n                }\n              }\n\n              return prop\n            })\n          ]\n        }\n      })\n    } else {\n      replacement.push({\n        type: 'ExportDefaultDeclaration',\n        declaration: {type: 'Identifier', name: 'MDXContent'}\n      })\n    }\n\n    tree.body = replacement\n\n    if (baseUrl) {\n      walk(tree, {\n        enter(node) {\n          if (\n            node.type === 'MemberExpression' &&\n            'object' in node &&\n            node.object.type === 'MetaProperty' &&\n            node.property.type === 'Identifier' &&\n            node.object.meta.name === 'import' &&\n            node.object.property.name === 'meta' &&\n            node.property.name === 'url'\n          ) {\n            /** @type {SimpleLiteral} */\n            const replacement = {type: 'Literal', value: baseUrl}\n            this.replace(replacement)\n          }\n        }\n      })\n    }\n\n    /**\n     * @param {ExportAllDeclaration | ExportNamedDeclaration} node\n     * @returns {void}\n     */\n    function handleExport(node) {\n      if (node.type === 'ExportNamedDeclaration') {\n        // ```js\n        // export function a() {}\n        // export class A {}\n        // export var a = 1\n        // ```\n        if (node.declaration) {\n          exportedIdentifiers.push(\n            ...analyze(node.declaration).scope.declarations.keys()\n          )\n        }\n\n        // ```js\n        // export {a, b as c}\n        // export {a, b as c} from 'd'\n        // ```\n        for (child of node.specifiers) {\n          exportedIdentifiers.push(child.exported.name)\n        }\n      }\n\n      handleEsm(node)\n    }\n\n    /**\n     * @param {ExportAllDeclaration | ExportNamedDeclaration | ImportDeclaration} node\n     * @returns {void}\n     */\n    function handleEsm(node) {\n      // Rewrite the source of the `import` / `export … from`.\n      // See: <https://html.spec.whatwg.org/multipage/webappapis.html#resolve-a-module-specifier>\n      if (baseUrl && node.source) {\n        let value = String(node.source.value)\n\n        try {\n          // A full valid URL.\n          value = String(new URL(value))\n        } catch {\n          // Relative: `/example.js`, `./example.js`, and `../example.js`.\n          if (/^\\.{0,2}\\//.test(value)) {\n            value = String(new URL(value, baseUrl))\n          }\n          // Otherwise, it’s a bare specifiers.\n          // For example `some-package`, `@some-package`, and\n          // `some-package/path`.\n          // These are supported in Node and browsers plan to support them\n          // with import maps (<https://github.com/WICG/import-maps>).\n        }\n\n        /** @type {Literal} */\n        const literal = {type: 'Literal', value}\n        create(node.source, literal)\n        node.source = literal\n      }\n\n      /** @type {ModuleDeclaration | Statement | undefined} */\n      let replace\n      /** @type {Expression} */\n      let init\n\n      if (outputFormat === 'function-body') {\n        if (\n          // Always have a source:\n          node.type === 'ImportDeclaration' ||\n          node.type === 'ExportAllDeclaration' ||\n          // Source optional:\n          (node.type === 'ExportNamedDeclaration' && node.source)\n        ) {\n          if (!useDynamicImport) {\n            file.fail(\n              'Cannot use `import` or `export … from` in `evaluate` (outputting a function body) by default: please set `useDynamicImport: true` (and probably specify a `baseUrl`)',\n              positionFromEstree(node),\n              'recma-document:invalid-esm-statement'\n            )\n          }\n\n          // Just for types.\n          /* c8 ignore next 3 */\n          if (!node.source) {\n            throw new Error('Expected `node.source` to be defined')\n          }\n\n          // ```\n          // import 'a'\n          // //=> await import('a')\n          // import a from 'b'\n          // //=> const {default: a} = await import('b')\n          // export {a, b as c} from 'd'\n          // //=> const {a, c: b} = await import('d')\n          // export * from 'a'\n          // //=> const _exportAll0 = await import('a')\n          // ```\n          /** @type {ImportExpression} */\n          const argument = {type: 'ImportExpression', source: node.source}\n          create(node, argument)\n          init = {type: 'AwaitExpression', argument}\n\n          if (\n            (node.type === 'ImportDeclaration' ||\n              node.type === 'ExportNamedDeclaration') &&\n            node.specifiers.length === 0\n          ) {\n            replace = {type: 'ExpressionStatement', expression: init}\n          } else {\n            replace = {\n              type: 'VariableDeclaration',\n              kind: 'const',\n              declarations:\n                node.type === 'ExportAllDeclaration'\n                  ? [\n                      {\n                        type: 'VariableDeclarator',\n                        id: {\n                          type: 'Identifier',\n                          name: '_exportAll' + ++exportAllCount\n                        },\n                        init\n                      }\n                    ]\n                  : specifiersToDeclarations(node.specifiers, init)\n            }\n          }\n        } else if (node.declaration) {\n          replace = node.declaration\n        } else {\n          /** @type {Array<VariableDeclarator>} */\n          const declarators = node.specifiers\n            .filter(\n              (specifier) => specifier.local.name !== specifier.exported.name\n            )\n            .map((specifier) => ({\n              type: 'VariableDeclarator',\n              id: specifier.exported,\n              init: specifier.local\n            }))\n\n          if (declarators.length > 0) {\n            replace = {\n              type: 'VariableDeclaration',\n              kind: 'const',\n              declarations: declarators\n            }\n          }\n        }\n      } else {\n        replace = node\n      }\n\n      if (replace) {\n        replacement.push(replace)\n      }\n    }\n  }\n\n  /**\n   * @param {Expression | undefined} [content]\n   * @param {boolean | undefined} [hasInternalLayout]\n   * @returns {Array<FunctionDeclaration>}\n   */\n  function createMdxContent(content, hasInternalLayout) {\n    /** @type {JSXElement} */\n    const element = {\n      type: 'JSXElement',\n      openingElement: {\n        type: 'JSXOpeningElement',\n        name: {type: 'JSXIdentifier', name: 'MDXLayout'},\n        attributes: [\n          {\n            type: 'JSXSpreadAttribute',\n            argument: {type: 'Identifier', name: 'props'}\n          }\n        ],\n        selfClosing: false\n      },\n      closingElement: {\n        type: 'JSXClosingElement',\n        name: {type: 'JSXIdentifier', name: 'MDXLayout'}\n      },\n      children: [\n        {\n          type: 'JSXElement',\n          openingElement: {\n            type: 'JSXOpeningElement',\n            name: {type: 'JSXIdentifier', name: '_createMdxContent'},\n            attributes: [\n              {\n                type: 'JSXSpreadAttribute',\n                argument: {type: 'Identifier', name: 'props'}\n              }\n            ],\n            selfClosing: true\n          },\n          closingElement: null,\n          children: []\n        }\n      ]\n    }\n\n    let result = /** @type {Expression} */ (element)\n\n    if (!hasInternalLayout) {\n      result = {\n        type: 'ConditionalExpression',\n        test: {type: 'Identifier', name: 'MDXLayout'},\n        consequent: result,\n        alternate: {\n          type: 'CallExpression',\n          callee: {type: 'Identifier', name: '_createMdxContent'},\n          arguments: [{type: 'Identifier', name: 'props'}],\n          optional: false\n        }\n      }\n    }\n\n    let argument = content || {type: 'Literal', value: null}\n\n    // Unwrap a fragment of a single element.\n    if (\n      argument &&\n      // @ts-expect-error: fine.\n      argument.type === 'JSXFragment' &&\n      // @ts-expect-error: fine.\n      argument.children.length === 1 &&\n      // @ts-expect-error: fine.\n      argument.children[0].type === 'JSXElement'\n    ) {\n      // @ts-expect-error: fine.\n      argument = argument.children[0]\n    }\n\n    return [\n      {\n        type: 'FunctionDeclaration',\n        id: {type: 'Identifier', name: '_createMdxContent'},\n        params: [{type: 'Identifier', name: 'props'}],\n        body: {\n          type: 'BlockStatement',\n          body: [{type: 'ReturnStatement', argument}]\n        }\n      },\n      {\n        type: 'FunctionDeclaration',\n        id: {type: 'Identifier', name: 'MDXContent'},\n        params: [\n          {\n            type: 'AssignmentPattern',\n            left: {type: 'Identifier', name: 'props'},\n            right: {type: 'ObjectExpression', properties: []}\n          }\n        ],\n        body: {\n          type: 'BlockStatement',\n          body: [{type: 'ReturnStatement', argument: result}]\n        }\n      }\n    ]\n  }\n}\n","/**\n * @typedef {import('estree-jsx').Expression} Expression\n */\n\n/**\n * @param {Array<Expression>} expressions\n */\nexport function toBinaryAddition(expressions) {\n  let index = -1\n  /** @type {Expression | undefined} */\n  let left\n\n  while (++index < expressions.length) {\n    const right = expressions[index]\n    left = left ? {type: 'BinaryExpression', left, operator: '+', right} : right\n  }\n\n  // Just for types.\n  /* c8 ignore next */\n  if (!left) throw new Error('Expected non-empty `expressions` to be passed')\n\n  return left\n}\n","/**\n * @typedef {import('estree-jsx').Expression} Expression\n * @typedef {import('estree-jsx').Function} EstreeFunction\n * @typedef {import('estree-jsx').Identifier} Identifier\n * @typedef {import('estree-jsx').ImportSpecifier} ImportSpecifier\n * @typedef {import('estree-jsx').JSXElement} JSXElement\n * @typedef {import('estree-jsx').ModuleDeclaration} ModuleDeclaration\n * @typedef {import('estree-jsx').Node} Node\n * @typedef {import('estree-jsx').ObjectPattern} ObjectPattern\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {import('estree-jsx').Property} Property\n * @typedef {import('estree-jsx').Statement} Statement\n * @typedef {import('estree-jsx').VariableDeclarator} VariableDeclarator\n *\n * @typedef {import('periscopic').Scope & {node: Node}} Scope\n */\n\n/**\n * @typedef RecmaJsxRewriteOptions\n *   Configuration for internal plugin `recma-jsx-rewrite`.\n * @property {'function-body' | 'program' | null | undefined} [outputFormat='program']\n *   Whether to use an import statement or `arguments[0]` to get the provider.\n * @property {string | null | undefined} [providerImportSource]\n *   Place to import a provider from.\n * @property {boolean | null | undefined} [development=false]\n *   Whether to add extra info to error messages in generated code.\n *\n *   This also results in the development automatic JSX runtime\n *   (`/jsx-dev-runtime`, `jsxDEV`) being used, which passes positional info to\n *   nodes.\n *   The default can be set to `true` in Node.js through environment variables:\n *   set `NODE_ENV=development`.\n *\n * @typedef StackEntry\n * @property {Array<string>} objects\n * @property {Array<string>} components\n * @property {Array<string>} tags\n * @property {Record<string, {node: JSXElement, component: boolean}>} references\n * @property {Map<string|number, string>} idToInvalidComponentName\n * @property {EstreeFunction} node\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\nimport {positionFromEstree} from 'unist-util-position-from-estree'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {walk} from 'estree-walker'\nimport {analyze} from 'periscopic'\nimport {specifiersToDeclarations} from '../util/estree-util-specifiers-to-declarations.js'\nimport {\n  toIdOrMemberExpression,\n  toJsxIdOrMemberExpression\n} from '../util/estree-util-to-id-or-member-expression.js'\nimport {toBinaryAddition} from '../util/estree-util-to-binary-addition.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * A plugin that rewrites JSX in functions to accept components as\n * `props.components` (when the function is called `_createMdxContent`), or from\n * a provider (if there is one).\n * It also makes sure that any undefined components are defined: either from\n * received components or as a function that throws an error.\n *\n * @type {import('unified').Plugin<[RecmaJsxRewriteOptions | null | undefined] | [], Program>}\n */\nexport function recmaJsxRewrite(options) {\n  // Always given inside `@mdx-js/mdx`\n  /* c8 ignore next */\n  const {development, providerImportSource, outputFormat} = options || {}\n\n  return (tree, file) => {\n    // Find everything that’s defined in the top-level scope.\n    const scopeInfo = analyze(tree)\n    /** @type {Array<StackEntry>} */\n    const fnStack = []\n    let importProvider = false\n    let createErrorHelper = false\n    /** @type {Scope | undefined} */\n    let currentScope\n\n    walk(tree, {\n      enter(node) {\n        const newScope = /** @type {Scope | undefined} */ (\n          scopeInfo.map.get(node)\n        )\n\n        if (\n          node.type === 'FunctionDeclaration' ||\n          node.type === 'FunctionExpression' ||\n          node.type === 'ArrowFunctionExpression'\n        ) {\n          fnStack.push({\n            objects: [],\n            components: [],\n            tags: [],\n            references: {},\n            idToInvalidComponentName: new Map(),\n            node\n          })\n\n          // MDXContent only ever contains MDXLayout\n          if (\n            isNamedFunction(node, 'MDXContent') &&\n            newScope &&\n            !inScope(newScope, 'MDXLayout')\n          ) {\n            fnStack[0].components.push('MDXLayout')\n          }\n        }\n\n        const fnScope = fnStack[0]\n        if (\n          !fnScope ||\n          (!isNamedFunction(fnScope.node, '_createMdxContent') &&\n            !providerImportSource)\n        ) {\n          return\n        }\n\n        if (newScope) {\n          newScope.node = node\n          currentScope = newScope\n        }\n\n        if (currentScope && node.type === 'JSXElement') {\n          let name = node.openingElement.name\n\n          // `<x.y>`, `<Foo.Bar>`, `<x.y.z>`.\n          if (name.type === 'JSXMemberExpression') {\n            /** @type {Array<string>} */\n            const ids = []\n\n            // Find the left-most identifier.\n            while (name.type === 'JSXMemberExpression') {\n              ids.unshift(name.property.name)\n              name = name.object\n            }\n\n            ids.unshift(name.name)\n            const fullId = ids.join('.')\n            const id = name.name\n\n            const isInScope = inScope(currentScope, id)\n\n            if (!own.call(fnScope.references, fullId)) {\n              const parentScope = /** @type {Scope | undefined} */ (\n                currentScope.parent\n              )\n              if (\n                !isInScope ||\n                // If the parent scope is `_createMdxContent`, then this\n                // references a component we can add a check statement for.\n                (parentScope &&\n                  parentScope.node.type === 'FunctionDeclaration' &&\n                  isNamedFunction(parentScope.node, '_createMdxContent'))\n              ) {\n                fnScope.references[fullId] = {node, component: true}\n              }\n            }\n\n            if (!fnScope.objects.includes(id) && !isInScope) {\n              fnScope.objects.push(id)\n            }\n          }\n          // `<xml:thing>`.\n          else if (name.type === 'JSXNamespacedName') {\n            // Ignore namespaces.\n          }\n          // If the name is a valid ES identifier, and it doesn’t start with a\n          // lowercase letter, it’s a component.\n          // For example, `$foo`, `_bar`, `Baz` are all component names.\n          // But `foo` and `b-ar` are tag names.\n          else if (isIdentifierName(name.name) && !/^[a-z]/.test(name.name)) {\n            const id = name.name\n\n            if (!inScope(currentScope, id)) {\n              // No need to add an error for an undefined layout — we use an\n              // `if` later.\n              if (id !== 'MDXLayout' && !own.call(fnScope.references, id)) {\n                fnScope.references[id] = {node, component: true}\n              }\n\n              if (!fnScope.components.includes(id)) {\n                fnScope.components.push(id)\n              }\n            }\n          }\n          // @ts-expect-error Allow fields passed through from mdast through hast to\n          // esast.\n          else if (node.data && node.data._mdxExplicitJsx) {\n            // Do not turn explicit JSX into components from `_components`.\n            // As in, a given `h1` component is used for `# heading` (next case),\n            // but not for `<h1>heading</h1>`.\n          } else {\n            const id = name.name\n\n            if (!fnScope.tags.includes(id)) {\n              fnScope.tags.push(id)\n            }\n\n            /** @type {Array<string | number>} */\n            let jsxIdExpression = ['_components', id]\n            if (isIdentifierName(id) === false) {\n              let invalidComponentName =\n                fnScope.idToInvalidComponentName.get(id)\n              if (invalidComponentName === undefined) {\n                invalidComponentName = `_component${fnScope.idToInvalidComponentName.size}`\n                fnScope.idToInvalidComponentName.set(id, invalidComponentName)\n              }\n\n              jsxIdExpression = [invalidComponentName]\n            }\n\n            node.openingElement.name =\n              toJsxIdOrMemberExpression(jsxIdExpression)\n\n            if (node.closingElement) {\n              node.closingElement.name =\n                toJsxIdOrMemberExpression(jsxIdExpression)\n            }\n          }\n        }\n      },\n      leave(node) {\n        /** @type {Array<Property>} */\n        const defaults = []\n        /** @type {Array<string>} */\n        const actual = []\n        /** @type {Array<Expression>} */\n        const parameters = []\n        /** @type {Array<VariableDeclarator>} */\n        const declarations = []\n\n        if (currentScope && currentScope.node === node) {\n          // @ts-expect-error: `node`s were patched when entering.\n          currentScope = currentScope.parent\n        }\n\n        if (\n          node.type === 'FunctionDeclaration' ||\n          node.type === 'FunctionExpression' ||\n          node.type === 'ArrowFunctionExpression'\n        ) {\n          const fn = node\n          const scope = fnStack[fnStack.length - 1]\n          /** @type {string} */\n          let name\n\n          for (name of scope.tags) {\n            defaults.push({\n              type: 'Property',\n              kind: 'init',\n              key: isIdentifierName(name)\n                ? {type: 'Identifier', name}\n                : {type: 'Literal', value: name},\n              value: {type: 'Literal', value: name},\n              method: false,\n              shorthand: false,\n              computed: false\n            })\n          }\n\n          actual.push(...scope.components)\n\n          for (name of scope.objects) {\n            // In some cases, a component is used directly (`<X>`) but it’s also\n            // used as an object (`<X.Y>`).\n            if (!actual.includes(name)) {\n              actual.push(name)\n            }\n          }\n\n          /** @type {Array<Statement>} */\n          const statements = []\n\n          if (\n            defaults.length > 0 ||\n            actual.length > 0 ||\n            scope.idToInvalidComponentName.size > 0\n          ) {\n            if (providerImportSource) {\n              importProvider = true\n              parameters.push({\n                type: 'CallExpression',\n                callee: {type: 'Identifier', name: '_provideComponents'},\n                arguments: [],\n                optional: false\n              })\n            }\n\n            // Accept `components` as a prop if this is the `MDXContent` or\n            // `_createMdxContent` function.\n            if (\n              isNamedFunction(scope.node, 'MDXContent') ||\n              isNamedFunction(scope.node, '_createMdxContent')\n            ) {\n              parameters.push(toIdOrMemberExpression(['props', 'components']))\n            }\n\n            if (defaults.length > 0 || parameters.length > 1) {\n              parameters.unshift({\n                type: 'ObjectExpression',\n                properties: defaults\n              })\n            }\n\n            // If we’re getting components from several sources, merge them.\n            /** @type {Expression} */\n            let componentsInit =\n              parameters.length > 1\n                ? {\n                    type: 'CallExpression',\n                    callee: toIdOrMemberExpression(['Object', 'assign']),\n                    arguments: parameters,\n                    optional: false\n                  }\n                : parameters[0].type === 'MemberExpression'\n                ? // If we’re only getting components from `props.components`,\n                  // make sure it’s defined.\n                  {\n                    type: 'LogicalExpression',\n                    operator: '||',\n                    left: parameters[0],\n                    right: {type: 'ObjectExpression', properties: []}\n                  }\n                : parameters[0]\n\n            /** @type {ObjectPattern | undefined} */\n            let componentsPattern\n\n            // Add components to scope.\n            // For `['MyComponent', 'MDXLayout']` this generates:\n            // ```js\n            // const {MyComponent, wrapper: MDXLayout} = _components\n            // ```\n            // Note that MDXLayout is special as it’s taken from\n            // `_components.wrapper`.\n            if (actual.length > 0) {\n              componentsPattern = {\n                type: 'ObjectPattern',\n                properties: actual.map((name) => ({\n                  type: 'Property',\n                  kind: 'init',\n                  key: {\n                    type: 'Identifier',\n                    name: name === 'MDXLayout' ? 'wrapper' : name\n                  },\n                  value: {type: 'Identifier', name},\n                  method: false,\n                  shorthand: name !== 'MDXLayout',\n                  computed: false\n                }))\n              }\n            }\n\n            if (scope.tags.length > 0) {\n              declarations.push({\n                type: 'VariableDeclarator',\n                id: {type: 'Identifier', name: '_components'},\n                init: componentsInit\n              })\n              componentsInit = {type: 'Identifier', name: '_components'}\n            }\n\n            if (isNamedFunction(scope.node, '_createMdxContent')) {\n              for (const [\n                id,\n                componentName\n              ] of scope.idToInvalidComponentName) {\n                // For JSX IDs that can’t be represented as JavaScript IDs (as in,\n                // those with dashes, such as `custom-element`), generate a\n                // separate variable that is a valid JS ID (such as `_component0`),\n                // and takes it from components:\n                // `const _component0 = _components['custom-element']`\n                declarations.push({\n                  type: 'VariableDeclarator',\n                  id: {type: 'Identifier', name: componentName},\n                  init: {\n                    type: 'MemberExpression',\n                    object: {type: 'Identifier', name: '_components'},\n                    property: {type: 'Literal', value: id},\n                    computed: true,\n                    optional: false\n                  }\n                })\n              }\n            }\n\n            if (componentsPattern) {\n              declarations.push({\n                type: 'VariableDeclarator',\n                id: componentsPattern,\n                init: componentsInit\n              })\n            }\n\n            if (declarations.length > 0) {\n              statements.push({\n                type: 'VariableDeclaration',\n                kind: 'const',\n                declarations\n              })\n            }\n          }\n\n          /** @type {string} */\n          let key\n\n          // Add partials (so for `x.y.z` it’d generate `x` and `x.y` too).\n          for (key in scope.references) {\n            if (own.call(scope.references, key)) {\n              const parts = key.split('.')\n              let index = 0\n              while (++index < parts.length) {\n                const partial = parts.slice(0, index).join('.')\n                if (!own.call(scope.references, partial)) {\n                  scope.references[partial] = {\n                    node: scope.references[key].node,\n                    component: false\n                  }\n                }\n              }\n            }\n          }\n\n          const references = Object.keys(scope.references).sort()\n          let index = -1\n          while (++index < references.length) {\n            const id = references[index]\n            const info = scope.references[id]\n            const place = stringifyPosition(positionFromEstree(info.node))\n            /** @type {Array<Expression>} */\n            const parameters = [\n              {type: 'Literal', value: id},\n              {type: 'Literal', value: info.component}\n            ]\n\n            createErrorHelper = true\n\n            if (development && place !== '1:1-1:1') {\n              parameters.push({type: 'Literal', value: place})\n            }\n\n            statements.push({\n              type: 'IfStatement',\n              test: {\n                type: 'UnaryExpression',\n                operator: '!',\n                prefix: true,\n                argument: toIdOrMemberExpression(id.split('.'))\n              },\n              consequent: {\n                type: 'ExpressionStatement',\n                expression: {\n                  type: 'CallExpression',\n                  callee: {type: 'Identifier', name: '_missingMdxReference'},\n                  arguments: parameters,\n                  optional: false\n                }\n              },\n              alternate: null\n            })\n          }\n\n          if (statements.length > 0) {\n            // Arrow functions with an implied return:\n            if (fn.body.type !== 'BlockStatement') {\n              fn.body = {\n                type: 'BlockStatement',\n                body: [{type: 'ReturnStatement', argument: fn.body}]\n              }\n            }\n\n            fn.body.body.unshift(...statements)\n          }\n\n          fnStack.pop()\n        }\n      }\n    })\n\n    // If a provider is used (and can be used), import it.\n    if (importProvider && providerImportSource) {\n      tree.body.unshift(\n        createImportProvider(providerImportSource, outputFormat)\n      )\n    }\n\n    // If potentially missing components are used.\n    if (createErrorHelper) {\n      /** @type {Array<Expression>} */\n      const message = [\n        {type: 'Literal', value: 'Expected '},\n        {\n          type: 'ConditionalExpression',\n          test: {type: 'Identifier', name: 'component'},\n          consequent: {type: 'Literal', value: 'component'},\n          alternate: {type: 'Literal', value: 'object'}\n        },\n        {type: 'Literal', value: ' `'},\n        {type: 'Identifier', name: 'id'},\n        {\n          type: 'Literal',\n          value:\n            '` to be defined: you likely forgot to import, pass, or provide it.'\n        }\n      ]\n\n      /** @type {Array<Identifier>} */\n      const parameters = [\n        {type: 'Identifier', name: 'id'},\n        {type: 'Identifier', name: 'component'}\n      ]\n\n      if (development) {\n        message.push({\n          type: 'ConditionalExpression',\n          test: {type: 'Identifier', name: 'place'},\n          consequent: toBinaryAddition([\n            {type: 'Literal', value: '\\nIt’s referenced in your code at `'},\n            {type: 'Identifier', name: 'place'},\n            {\n              type: 'Literal',\n              value: (file.path ? '` in `' + file.path : '') + '`'\n            }\n          ]),\n          alternate: {type: 'Literal', value: ''}\n        })\n\n        parameters.push({type: 'Identifier', name: 'place'})\n      }\n\n      tree.body.push({\n        type: 'FunctionDeclaration',\n        id: {type: 'Identifier', name: '_missingMdxReference'},\n        generator: false,\n        async: false,\n        params: parameters,\n        body: {\n          type: 'BlockStatement',\n          body: [\n            {\n              type: 'ThrowStatement',\n              argument: {\n                type: 'NewExpression',\n                callee: {type: 'Identifier', name: 'Error'},\n                arguments: [toBinaryAddition(message)]\n              }\n            }\n          ]\n        }\n      })\n    }\n  }\n}\n\n/**\n * @param {string} providerImportSource\n * @param {RecmaJsxRewriteOptions['outputFormat']} outputFormat\n * @returns {Statement | ModuleDeclaration}\n */\nfunction createImportProvider(providerImportSource, outputFormat) {\n  /** @type {Array<ImportSpecifier>} */\n  const specifiers = [\n    {\n      type: 'ImportSpecifier',\n      imported: {type: 'Identifier', name: 'useMDXComponents'},\n      local: {type: 'Identifier', name: '_provideComponents'}\n    }\n  ]\n\n  return outputFormat === 'function-body'\n    ? {\n        type: 'VariableDeclaration',\n        kind: 'const',\n        declarations: specifiersToDeclarations(\n          specifiers,\n          toIdOrMemberExpression(['arguments', 0])\n        )\n      }\n    : {\n        type: 'ImportDeclaration',\n        specifiers,\n        source: {type: 'Literal', value: providerImportSource}\n      }\n}\n\n/**\n * @param {EstreeFunction} node\n * @param {string} name\n * @returns {boolean}\n */\nfunction isNamedFunction(node, name) {\n  return Boolean(node && 'id' in node && node.id && node.id.name === name)\n}\n\n/**\n * @param {Scope} scope\n * @param {string} id\n * @returns {boolean}\n */\nfunction inScope(scope, id) {\n  /** @type {Scope | undefined} */\n  let currentScope = scope\n\n  while (currentScope) {\n    if (currentScope.declarations.has(id)) {\n      return true\n    }\n\n    // @ts-expect-error: `node`s have been added when entering.\n    currentScope = currentScope.parent\n  }\n\n  return false\n}\n","// Astring is a tiny and fast JavaScript code generator from an ESTree-compliant AST.\n//\n// Astring was written by David Bonnet and released under an MIT license.\n//\n// The Git repository for Astring is available at:\n// https://github.com/davidbonnet/astring.git\n//\n// Please use the GitHub bug tracker to report issues:\n// https://github.com/davidbonnet/astring/issues\n\nconst { stringify } = JSON\n\n/* c8 ignore if */\nif (!String.prototype.repeat) {\n  /* c8 ignore next */\n  throw new Error(\n    'String.prototype.repeat is undefined, see https://github.com/davidbonnet/astring#installation',\n  )\n}\n\n/* c8 ignore if */\nif (!String.prototype.endsWith) {\n  /* c8 ignore next */\n  throw new Error(\n    'String.prototype.endsWith is undefined, see https://github.com/davidbonnet/astring#installation',\n  )\n}\n\nconst OPERATOR_PRECEDENCE = {\n  '||': 2,\n  '??': 3,\n  '&&': 4,\n  '|': 5,\n  '^': 6,\n  '&': 7,\n  '==': 8,\n  '!=': 8,\n  '===': 8,\n  '!==': 8,\n  '<': 9,\n  '>': 9,\n  '<=': 9,\n  '>=': 9,\n  in: 9,\n  instanceof: 9,\n  '<<': 10,\n  '>>': 10,\n  '>>>': 10,\n  '+': 11,\n  '-': 11,\n  '*': 12,\n  '%': 12,\n  '/': 12,\n  '**': 13,\n}\n\n// Enables parenthesis regardless of precedence\nexport const NEEDS_PARENTHESES = 17\n\nexport const EXPRESSIONS_PRECEDENCE = {\n  // Definitions\n  ArrayExpression: 20,\n  TaggedTemplateExpression: 20,\n  ThisExpression: 20,\n  Identifier: 20,\n  PrivateIdentifier: 20,\n  Literal: 18,\n  TemplateLiteral: 20,\n  Super: 20,\n  SequenceExpression: 20,\n  // Operations\n  MemberExpression: 19,\n  ChainExpression: 19,\n  CallExpression: 19,\n  NewExpression: 19,\n  // Other definitions\n  ArrowFunctionExpression: NEEDS_PARENTHESES,\n  ClassExpression: NEEDS_PARENTHESES,\n  FunctionExpression: NEEDS_PARENTHESES,\n  ObjectExpression: NEEDS_PARENTHESES,\n  // Other operations\n  UpdateExpression: 16,\n  UnaryExpression: 15,\n  AwaitExpression: 15,\n  BinaryExpression: 14,\n  LogicalExpression: 13,\n  ConditionalExpression: 4,\n  AssignmentExpression: 3,\n  YieldExpression: 2,\n  RestElement: 1,\n}\n\nfunction formatSequence(state, nodes) {\n  /*\n  Writes into `state` a sequence of `nodes`.\n  */\n  const { generator } = state\n  state.write('(')\n  if (nodes != null && nodes.length > 0) {\n    generator[nodes[0].type](nodes[0], state)\n    const { length } = nodes\n    for (let i = 1; i < length; i++) {\n      const param = nodes[i]\n      state.write(', ')\n      generator[param.type](param, state)\n    }\n  }\n  state.write(')')\n}\n\nfunction expressionNeedsParenthesis(state, node, parentNode, isRightHand) {\n  const nodePrecedence = state.expressionsPrecedence[node.type]\n  if (nodePrecedence === NEEDS_PARENTHESES) {\n    return true\n  }\n  const parentNodePrecedence = state.expressionsPrecedence[parentNode.type]\n  if (nodePrecedence !== parentNodePrecedence) {\n    // Different node types\n    return (\n      (!isRightHand &&\n        nodePrecedence === 15 &&\n        parentNodePrecedence === 14 &&\n        parentNode.operator === '**') ||\n      nodePrecedence < parentNodePrecedence\n    )\n  }\n  if (nodePrecedence !== 13 && nodePrecedence !== 14) {\n    // Not a `LogicalExpression` or `BinaryExpression`\n    return false\n  }\n  if (node.operator === '**' && parentNode.operator === '**') {\n    // Exponentiation operator has right-to-left associativity\n    return !isRightHand\n  }\n  if (\n    nodePrecedence === 13 &&\n    parentNodePrecedence === 13 &&\n    (node.operator === '??' || parentNode.operator === '??')\n  ) {\n    // Nullish coalescing and boolean operators cannot be combined\n    return true\n  }\n  if (isRightHand) {\n    // Parenthesis are used if both operators have the same precedence\n    return (\n      OPERATOR_PRECEDENCE[node.operator] <=\n      OPERATOR_PRECEDENCE[parentNode.operator]\n    )\n  }\n  return (\n    OPERATOR_PRECEDENCE[node.operator] <\n    OPERATOR_PRECEDENCE[parentNode.operator]\n  )\n}\n\nfunction formatExpression(state, node, parentNode, isRightHand) {\n  /*\n  Writes into `state` the provided `node`, adding parenthesis around if the provided `parentNode` needs it. If `node` is a right-hand argument, the provided `isRightHand` parameter should be `true`.\n  */\n  const { generator } = state\n  if (expressionNeedsParenthesis(state, node, parentNode, isRightHand)) {\n    state.write('(')\n    generator[node.type](node, state)\n    state.write(')')\n  } else {\n    generator[node.type](node, state)\n  }\n}\n\nfunction reindent(state, text, indent, lineEnd) {\n  /*\n  Writes into `state` the `text` string reindented with the provided `indent`.\n  */\n  const lines = text.split('\\n')\n  const end = lines.length - 1\n  state.write(lines[0].trim())\n  if (end > 0) {\n    state.write(lineEnd)\n    for (let i = 1; i < end; i++) {\n      state.write(indent + lines[i].trim() + lineEnd)\n    }\n    state.write(indent + lines[end].trim())\n  }\n}\n\nfunction formatComments(state, comments, indent, lineEnd) {\n  /*\n  Writes into `state` the provided list of `comments`, with the given `indent` and `lineEnd` strings.\n  Line comments will end with `\"\\n\"` regardless of the value of `lineEnd`.\n  Expects to start on a new unindented line.\n  */\n  const { length } = comments\n  for (let i = 0; i < length; i++) {\n    const comment = comments[i]\n    state.write(indent)\n    if (comment.type[0] === 'L') {\n      // Line comment\n      state.write('// ' + comment.value.trim() + '\\n', comment)\n    } else {\n      // Block comment\n      state.write('/*')\n      reindent(state, comment.value, indent, lineEnd)\n      state.write('*/' + lineEnd)\n    }\n  }\n}\n\nfunction hasCallExpression(node) {\n  /*\n  Returns `true` if the provided `node` contains a call expression and `false` otherwise.\n  */\n  let currentNode = node\n  while (currentNode != null) {\n    const { type } = currentNode\n    if (type[0] === 'C' && type[1] === 'a') {\n      // Is CallExpression\n      return true\n    } else if (type[0] === 'M' && type[1] === 'e' && type[2] === 'm') {\n      // Is MemberExpression\n      currentNode = currentNode.object\n    } else {\n      return false\n    }\n  }\n}\n\nfunction formatVariableDeclaration(state, node) {\n  /*\n  Writes into `state` a variable declaration.\n  */\n  const { generator } = state\n  const { declarations } = node\n  state.write(node.kind + ' ')\n  const { length } = declarations\n  if (length > 0) {\n    generator.VariableDeclarator(declarations[0], state)\n    for (let i = 1; i < length; i++) {\n      state.write(', ')\n      generator.VariableDeclarator(declarations[i], state)\n    }\n  }\n}\n\nlet ForInStatement,\n  FunctionDeclaration,\n  RestElement,\n  BinaryExpression,\n  ArrayExpression,\n  BlockStatement\n\nexport const GENERATOR = {\n  /*\n  Default generator.\n  */\n  Program(node, state) {\n    const indent = state.indent.repeat(state.indentLevel)\n    const { lineEnd, writeComments } = state\n    if (writeComments && node.comments != null) {\n      formatComments(state, node.comments, indent, lineEnd)\n    }\n    const statements = node.body\n    const { length } = statements\n    for (let i = 0; i < length; i++) {\n      const statement = statements[i]\n      if (writeComments && statement.comments != null) {\n        formatComments(state, statement.comments, indent, lineEnd)\n      }\n      state.write(indent)\n      this[statement.type](statement, state)\n      state.write(lineEnd)\n    }\n    if (writeComments && node.trailingComments != null) {\n      formatComments(state, node.trailingComments, indent, lineEnd)\n    }\n  },\n  BlockStatement: (BlockStatement = function (node, state) {\n    const indent = state.indent.repeat(state.indentLevel++)\n    const { lineEnd, writeComments } = state\n    const statementIndent = indent + state.indent\n    state.write('{')\n    const statements = node.body\n    if (statements != null && statements.length > 0) {\n      state.write(lineEnd)\n      if (writeComments && node.comments != null) {\n        formatComments(state, node.comments, statementIndent, lineEnd)\n      }\n      const { length } = statements\n      for (let i = 0; i < length; i++) {\n        const statement = statements[i]\n        if (writeComments && statement.comments != null) {\n          formatComments(state, statement.comments, statementIndent, lineEnd)\n        }\n        state.write(statementIndent)\n        this[statement.type](statement, state)\n        state.write(lineEnd)\n      }\n      state.write(indent)\n    } else {\n      if (writeComments && node.comments != null) {\n        state.write(lineEnd)\n        formatComments(state, node.comments, statementIndent, lineEnd)\n        state.write(indent)\n      }\n    }\n    if (writeComments && node.trailingComments != null) {\n      formatComments(state, node.trailingComments, statementIndent, lineEnd)\n    }\n    state.write('}')\n    state.indentLevel--\n  }),\n  ClassBody: BlockStatement,\n  StaticBlock(node, state) {\n    state.write('static ')\n    this.BlockStatement(node, state)\n  },\n  EmptyStatement(node, state) {\n    state.write(';')\n  },\n  ExpressionStatement(node, state) {\n    const precedence = state.expressionsPrecedence[node.expression.type]\n    if (\n      precedence === NEEDS_PARENTHESES ||\n      (precedence === 3 && node.expression.left.type[0] === 'O')\n    ) {\n      // Should always have parentheses or is an AssignmentExpression to an ObjectPattern\n      state.write('(')\n      this[node.expression.type](node.expression, state)\n      state.write(')')\n    } else {\n      this[node.expression.type](node.expression, state)\n    }\n    state.write(';')\n  },\n  IfStatement(node, state) {\n    state.write('if (')\n    this[node.test.type](node.test, state)\n    state.write(') ')\n    this[node.consequent.type](node.consequent, state)\n    if (node.alternate != null) {\n      state.write(' else ')\n      this[node.alternate.type](node.alternate, state)\n    }\n  },\n  LabeledStatement(node, state) {\n    this[node.label.type](node.label, state)\n    state.write(': ')\n    this[node.body.type](node.body, state)\n  },\n  BreakStatement(node, state) {\n    state.write('break')\n    if (node.label != null) {\n      state.write(' ')\n      this[node.label.type](node.label, state)\n    }\n    state.write(';')\n  },\n  ContinueStatement(node, state) {\n    state.write('continue')\n    if (node.label != null) {\n      state.write(' ')\n      this[node.label.type](node.label, state)\n    }\n    state.write(';')\n  },\n  WithStatement(node, state) {\n    state.write('with (')\n    this[node.object.type](node.object, state)\n    state.write(') ')\n    this[node.body.type](node.body, state)\n  },\n  SwitchStatement(node, state) {\n    const indent = state.indent.repeat(state.indentLevel++)\n    const { lineEnd, writeComments } = state\n    state.indentLevel++\n    const caseIndent = indent + state.indent\n    const statementIndent = caseIndent + state.indent\n    state.write('switch (')\n    this[node.discriminant.type](node.discriminant, state)\n    state.write(') {' + lineEnd)\n    const { cases: occurences } = node\n    const { length: occurencesCount } = occurences\n    for (let i = 0; i < occurencesCount; i++) {\n      const occurence = occurences[i]\n      if (writeComments && occurence.comments != null) {\n        formatComments(state, occurence.comments, caseIndent, lineEnd)\n      }\n      if (occurence.test) {\n        state.write(caseIndent + 'case ')\n        this[occurence.test.type](occurence.test, state)\n        state.write(':' + lineEnd)\n      } else {\n        state.write(caseIndent + 'default:' + lineEnd)\n      }\n      const { consequent } = occurence\n      const { length: consequentCount } = consequent\n      for (let i = 0; i < consequentCount; i++) {\n        const statement = consequent[i]\n        if (writeComments && statement.comments != null) {\n          formatComments(state, statement.comments, statementIndent, lineEnd)\n        }\n        state.write(statementIndent)\n        this[statement.type](statement, state)\n        state.write(lineEnd)\n      }\n    }\n    state.indentLevel -= 2\n    state.write(indent + '}')\n  },\n  ReturnStatement(node, state) {\n    state.write('return')\n    if (node.argument) {\n      state.write(' ')\n      this[node.argument.type](node.argument, state)\n    }\n    state.write(';')\n  },\n  ThrowStatement(node, state) {\n    state.write('throw ')\n    this[node.argument.type](node.argument, state)\n    state.write(';')\n  },\n  TryStatement(node, state) {\n    state.write('try ')\n    this[node.block.type](node.block, state)\n    if (node.handler) {\n      const { handler } = node\n      if (handler.param == null) {\n        state.write(' catch ')\n      } else {\n        state.write(' catch (')\n        this[handler.param.type](handler.param, state)\n        state.write(') ')\n      }\n      this[handler.body.type](handler.body, state)\n    }\n    if (node.finalizer) {\n      state.write(' finally ')\n      this[node.finalizer.type](node.finalizer, state)\n    }\n  },\n  WhileStatement(node, state) {\n    state.write('while (')\n    this[node.test.type](node.test, state)\n    state.write(') ')\n    this[node.body.type](node.body, state)\n  },\n  DoWhileStatement(node, state) {\n    state.write('do ')\n    this[node.body.type](node.body, state)\n    state.write(' while (')\n    this[node.test.type](node.test, state)\n    state.write(');')\n  },\n  ForStatement(node, state) {\n    state.write('for (')\n    if (node.init != null) {\n      const { init } = node\n      if (init.type[0] === 'V') {\n        formatVariableDeclaration(state, init)\n      } else {\n        this[init.type](init, state)\n      }\n    }\n    state.write('; ')\n    if (node.test) {\n      this[node.test.type](node.test, state)\n    }\n    state.write('; ')\n    if (node.update) {\n      this[node.update.type](node.update, state)\n    }\n    state.write(') ')\n    this[node.body.type](node.body, state)\n  },\n  ForInStatement: (ForInStatement = function (node, state) {\n    state.write(`for ${node.await ? 'await ' : ''}(`)\n    const { left } = node\n    if (left.type[0] === 'V') {\n      formatVariableDeclaration(state, left)\n    } else {\n      this[left.type](left, state)\n    }\n    // Identifying whether node.type is `ForInStatement` or `ForOfStatement`\n    state.write(node.type[3] === 'I' ? ' in ' : ' of ')\n    this[node.right.type](node.right, state)\n    state.write(') ')\n    this[node.body.type](node.body, state)\n  }),\n  ForOfStatement: ForInStatement,\n  DebuggerStatement(node, state) {\n    state.write('debugger;', node)\n  },\n  FunctionDeclaration: (FunctionDeclaration = function (node, state) {\n    state.write(\n      (node.async ? 'async ' : '') +\n        (node.generator ? 'function* ' : 'function ') +\n        (node.id ? node.id.name : ''),\n      node,\n    )\n    formatSequence(state, node.params)\n    state.write(' ')\n    this[node.body.type](node.body, state)\n  }),\n  FunctionExpression: FunctionDeclaration,\n  VariableDeclaration(node, state) {\n    formatVariableDeclaration(state, node)\n    state.write(';')\n  },\n  VariableDeclarator(node, state) {\n    this[node.id.type](node.id, state)\n    if (node.init != null) {\n      state.write(' = ')\n      this[node.init.type](node.init, state)\n    }\n  },\n  ClassDeclaration(node, state) {\n    state.write('class ' + (node.id ? `${node.id.name} ` : ''), node)\n    if (node.superClass) {\n      state.write('extends ')\n      const { superClass } = node\n      const { type } = superClass\n      const precedence = state.expressionsPrecedence[type]\n      if (\n        (type[0] !== 'C' || type[1] !== 'l' || type[5] !== 'E') &&\n        (precedence === NEEDS_PARENTHESES ||\n          precedence < state.expressionsPrecedence.ClassExpression)\n      ) {\n        // Not a ClassExpression that needs parentheses\n        state.write('(')\n        this[node.superClass.type](superClass, state)\n        state.write(')')\n      } else {\n        this[superClass.type](superClass, state)\n      }\n      state.write(' ')\n    }\n    this.ClassBody(node.body, state)\n  },\n  ImportDeclaration(node, state) {\n    state.write('import ')\n    const { specifiers } = node\n    const { length } = specifiers\n    // TODO: Once babili is fixed, put this after condition\n    // https://github.com/babel/babili/issues/430\n    let i = 0\n    if (length > 0) {\n      for (; i < length; ) {\n        if (i > 0) {\n          state.write(', ')\n        }\n        const specifier = specifiers[i]\n        const type = specifier.type[6]\n        if (type === 'D') {\n          // ImportDefaultSpecifier\n          state.write(specifier.local.name, specifier)\n          i++\n        } else if (type === 'N') {\n          // ImportNamespaceSpecifier\n          state.write('* as ' + specifier.local.name, specifier)\n          i++\n        } else {\n          // ImportSpecifier\n          break\n        }\n      }\n      if (i < length) {\n        state.write('{')\n        for (;;) {\n          const specifier = specifiers[i]\n          const { name } = specifier.imported\n          state.write(name, specifier)\n          if (name !== specifier.local.name) {\n            state.write(' as ' + specifier.local.name)\n          }\n          if (++i < length) {\n            state.write(', ')\n          } else {\n            break\n          }\n        }\n        state.write('}')\n      }\n      state.write(' from ')\n    }\n    this.Literal(node.source, state)\n    state.write(';')\n  },\n  ImportExpression(node, state) {\n    state.write('import(')\n    this[node.source.type](node.source, state)\n    state.write(')')\n  },\n  ExportDefaultDeclaration(node, state) {\n    state.write('export default ')\n    this[node.declaration.type](node.declaration, state)\n    if (\n      state.expressionsPrecedence[node.declaration.type] != null &&\n      node.declaration.type[0] !== 'F'\n    ) {\n      // All expression nodes except `FunctionExpression`\n      state.write(';')\n    }\n  },\n  ExportNamedDeclaration(node, state) {\n    state.write('export ')\n    if (node.declaration) {\n      this[node.declaration.type](node.declaration, state)\n    } else {\n      state.write('{')\n      const { specifiers } = node,\n        { length } = specifiers\n      if (length > 0) {\n        for (let i = 0; ; ) {\n          const specifier = specifiers[i]\n          const { name } = specifier.local\n          state.write(name, specifier)\n          if (name !== specifier.exported.name) {\n            state.write(' as ' + specifier.exported.name)\n          }\n          if (++i < length) {\n            state.write(', ')\n          } else {\n            break\n          }\n        }\n      }\n      state.write('}')\n      if (node.source) {\n        state.write(' from ')\n        this.Literal(node.source, state)\n      }\n      state.write(';')\n    }\n  },\n  ExportAllDeclaration(node, state) {\n    if (node.exported != null) {\n      state.write('export * as ' + node.exported.name + ' from ')\n    } else {\n      state.write('export * from ')\n    }\n    this.Literal(node.source, state)\n    state.write(';')\n  },\n  MethodDefinition(node, state) {\n    if (node.static) {\n      state.write('static ')\n    }\n    const kind = node.kind[0]\n    if (kind === 'g' || kind === 's') {\n      // Getter or setter\n      state.write(node.kind + ' ')\n    }\n    if (node.value.async) {\n      state.write('async ')\n    }\n    if (node.value.generator) {\n      state.write('*')\n    }\n    if (node.computed) {\n      state.write('[')\n      this[node.key.type](node.key, state)\n      state.write(']')\n    } else {\n      this[node.key.type](node.key, state)\n    }\n    formatSequence(state, node.value.params)\n    state.write(' ')\n    this[node.value.body.type](node.value.body, state)\n  },\n  ClassExpression(node, state) {\n    this.ClassDeclaration(node, state)\n  },\n  ArrowFunctionExpression(node, state) {\n    state.write(node.async ? 'async ' : '', node)\n    const { params } = node\n    if (params != null) {\n      // Omit parenthesis if only one named parameter\n      if (params.length === 1 && params[0].type[0] === 'I') {\n        // If params[0].type[0] starts with 'I', it can't be `ImportDeclaration` nor `IfStatement` and thus is `Identifier`\n        state.write(params[0].name, params[0])\n      } else {\n        formatSequence(state, node.params)\n      }\n    }\n    state.write(' => ')\n    if (node.body.type[0] === 'O') {\n      // Body is an object expression\n      state.write('(')\n      this.ObjectExpression(node.body, state)\n      state.write(')')\n    } else {\n      this[node.body.type](node.body, state)\n    }\n  },\n  ThisExpression(node, state) {\n    state.write('this', node)\n  },\n  Super(node, state) {\n    state.write('super', node)\n  },\n  RestElement: (RestElement = function (node, state) {\n    state.write('...')\n    this[node.argument.type](node.argument, state)\n  }),\n  SpreadElement: RestElement,\n  YieldExpression(node, state) {\n    state.write(node.delegate ? 'yield*' : 'yield')\n    if (node.argument) {\n      state.write(' ')\n      this[node.argument.type](node.argument, state)\n    }\n  },\n  AwaitExpression(node, state) {\n    state.write('await ', node)\n    formatExpression(state, node.argument, node)\n  },\n  TemplateLiteral(node, state) {\n    const { quasis, expressions } = node\n    state.write('`')\n    const { length } = expressions\n    for (let i = 0; i < length; i++) {\n      const expression = expressions[i]\n      const quasi = quasis[i]\n      state.write(quasi.value.raw, quasi)\n      state.write('${')\n      this[expression.type](expression, state)\n      state.write('}')\n    }\n    const quasi = quasis[quasis.length - 1]\n    state.write(quasi.value.raw, quasi)\n    state.write('`')\n  },\n  TemplateElement(node, state) {\n    state.write(node.value.raw, node)\n  },\n  TaggedTemplateExpression(node, state) {\n    formatExpression(state, node.tag, node)\n    this[node.quasi.type](node.quasi, state)\n  },\n  ArrayExpression: (ArrayExpression = function (node, state) {\n    state.write('[')\n    if (node.elements.length > 0) {\n      const { elements } = node,\n        { length } = elements\n      for (let i = 0; ; ) {\n        const element = elements[i]\n        if (element != null) {\n          this[element.type](element, state)\n        }\n        if (++i < length) {\n          state.write(', ')\n        } else {\n          if (element == null) {\n            state.write(', ')\n          }\n          break\n        }\n      }\n    }\n    state.write(']')\n  }),\n  ArrayPattern: ArrayExpression,\n  ObjectExpression(node, state) {\n    const indent = state.indent.repeat(state.indentLevel++)\n    const { lineEnd, writeComments } = state\n    const propertyIndent = indent + state.indent\n    state.write('{')\n    if (node.properties.length > 0) {\n      state.write(lineEnd)\n      if (writeComments && node.comments != null) {\n        formatComments(state, node.comments, propertyIndent, lineEnd)\n      }\n      const comma = ',' + lineEnd\n      const { properties } = node,\n        { length } = properties\n      for (let i = 0; ; ) {\n        const property = properties[i]\n        if (writeComments && property.comments != null) {\n          formatComments(state, property.comments, propertyIndent, lineEnd)\n        }\n        state.write(propertyIndent)\n        this[property.type](property, state)\n        if (++i < length) {\n          state.write(comma)\n        } else {\n          break\n        }\n      }\n      state.write(lineEnd)\n      if (writeComments && node.trailingComments != null) {\n        formatComments(state, node.trailingComments, propertyIndent, lineEnd)\n      }\n      state.write(indent + '}')\n    } else if (writeComments) {\n      if (node.comments != null) {\n        state.write(lineEnd)\n        formatComments(state, node.comments, propertyIndent, lineEnd)\n        if (node.trailingComments != null) {\n          formatComments(state, node.trailingComments, propertyIndent, lineEnd)\n        }\n        state.write(indent + '}')\n      } else if (node.trailingComments != null) {\n        state.write(lineEnd)\n        formatComments(state, node.trailingComments, propertyIndent, lineEnd)\n        state.write(indent + '}')\n      } else {\n        state.write('}')\n      }\n    } else {\n      state.write('}')\n    }\n    state.indentLevel--\n  },\n  Property(node, state) {\n    if (node.method || node.kind[0] !== 'i') {\n      // Either a method or of kind `set` or `get` (not `init`)\n      this.MethodDefinition(node, state)\n    } else {\n      if (!node.shorthand) {\n        if (node.computed) {\n          state.write('[')\n          this[node.key.type](node.key, state)\n          state.write(']')\n        } else {\n          this[node.key.type](node.key, state)\n        }\n        state.write(': ')\n      }\n      this[node.value.type](node.value, state)\n    }\n  },\n  PropertyDefinition(node, state) {\n    if (node.static) {\n      state.write('static ')\n    }\n    if (node.computed) {\n      state.write('[')\n    }\n    this[node.key.type](node.key, state)\n    if (node.computed) {\n      state.write(']')\n    }\n    if (node.value == null) {\n      if (node.key.type[0] !== 'F') {\n        state.write(';')\n      }\n      return\n    }\n    state.write(' = ')\n    this[node.value.type](node.value, state)\n    state.write(';')\n  },\n  ObjectPattern(node, state) {\n    state.write('{')\n    if (node.properties.length > 0) {\n      const { properties } = node,\n        { length } = properties\n      for (let i = 0; ; ) {\n        this[properties[i].type](properties[i], state)\n        if (++i < length) {\n          state.write(', ')\n        } else {\n          break\n        }\n      }\n    }\n    state.write('}')\n  },\n  SequenceExpression(node, state) {\n    formatSequence(state, node.expressions)\n  },\n  UnaryExpression(node, state) {\n    if (node.prefix) {\n      const {\n        operator,\n        argument,\n        argument: { type },\n      } = node\n      state.write(operator)\n      const needsParentheses = expressionNeedsParenthesis(state, argument, node)\n      if (\n        !needsParentheses &&\n        (operator.length > 1 ||\n          (type[0] === 'U' &&\n            (type[1] === 'n' || type[1] === 'p') &&\n            argument.prefix &&\n            argument.operator[0] === operator &&\n            (operator === '+' || operator === '-')))\n      ) {\n        // Large operator or argument is UnaryExpression or UpdateExpression node\n        state.write(' ')\n      }\n      if (needsParentheses) {\n        state.write(operator.length > 1 ? ' (' : '(')\n        this[type](argument, state)\n        state.write(')')\n      } else {\n        this[type](argument, state)\n      }\n    } else {\n      // FIXME: This case never occurs\n      this[node.argument.type](node.argument, state)\n      state.write(node.operator)\n    }\n  },\n  UpdateExpression(node, state) {\n    // Always applied to identifiers or members, no parenthesis check needed\n    if (node.prefix) {\n      state.write(node.operator)\n      this[node.argument.type](node.argument, state)\n    } else {\n      this[node.argument.type](node.argument, state)\n      state.write(node.operator)\n    }\n  },\n  AssignmentExpression(node, state) {\n    this[node.left.type](node.left, state)\n    state.write(' ' + node.operator + ' ')\n    this[node.right.type](node.right, state)\n  },\n  AssignmentPattern(node, state) {\n    this[node.left.type](node.left, state)\n    state.write(' = ')\n    this[node.right.type](node.right, state)\n  },\n  BinaryExpression: (BinaryExpression = function (node, state) {\n    const isIn = node.operator === 'in'\n    if (isIn) {\n      // Avoids confusion in `for` loops initializers\n      state.write('(')\n    }\n    formatExpression(state, node.left, node, false)\n    state.write(' ' + node.operator + ' ')\n    formatExpression(state, node.right, node, true)\n    if (isIn) {\n      state.write(')')\n    }\n  }),\n  LogicalExpression: BinaryExpression,\n  ConditionalExpression(node, state) {\n    const { test } = node\n    const precedence = state.expressionsPrecedence[test.type]\n    if (\n      precedence === NEEDS_PARENTHESES ||\n      precedence <= state.expressionsPrecedence.ConditionalExpression\n    ) {\n      state.write('(')\n      this[test.type](test, state)\n      state.write(')')\n    } else {\n      this[test.type](test, state)\n    }\n    state.write(' ? ')\n    this[node.consequent.type](node.consequent, state)\n    state.write(' : ')\n    this[node.alternate.type](node.alternate, state)\n  },\n  NewExpression(node, state) {\n    state.write('new ')\n    const precedence = state.expressionsPrecedence[node.callee.type]\n    if (\n      precedence === NEEDS_PARENTHESES ||\n      precedence < state.expressionsPrecedence.CallExpression ||\n      hasCallExpression(node.callee)\n    ) {\n      state.write('(')\n      this[node.callee.type](node.callee, state)\n      state.write(')')\n    } else {\n      this[node.callee.type](node.callee, state)\n    }\n    formatSequence(state, node['arguments'])\n  },\n  CallExpression(node, state) {\n    const precedence = state.expressionsPrecedence[node.callee.type]\n    if (\n      precedence === NEEDS_PARENTHESES ||\n      precedence < state.expressionsPrecedence.CallExpression\n    ) {\n      state.write('(')\n      this[node.callee.type](node.callee, state)\n      state.write(')')\n    } else {\n      this[node.callee.type](node.callee, state)\n    }\n    if (node.optional) {\n      state.write('?.')\n    }\n    formatSequence(state, node['arguments'])\n  },\n  ChainExpression(node, state) {\n    this[node.expression.type](node.expression, state)\n  },\n  MemberExpression(node, state) {\n    const precedence = state.expressionsPrecedence[node.object.type]\n    if (\n      precedence === NEEDS_PARENTHESES ||\n      precedence < state.expressionsPrecedence.MemberExpression\n    ) {\n      state.write('(')\n      this[node.object.type](node.object, state)\n      state.write(')')\n    } else {\n      this[node.object.type](node.object, state)\n    }\n    if (node.computed) {\n      if (node.optional) {\n        state.write('?.')\n      }\n      state.write('[')\n      this[node.property.type](node.property, state)\n      state.write(']')\n    } else {\n      if (node.optional) {\n        state.write('?.')\n      } else {\n        state.write('.')\n      }\n      this[node.property.type](node.property, state)\n    }\n  },\n  MetaProperty(node, state) {\n    state.write(node.meta.name + '.' + node.property.name, node)\n  },\n  Identifier(node, state) {\n    state.write(node.name, node)\n  },\n  PrivateIdentifier(node, state) {\n    state.write(`#${node.name}`, node)\n  },\n  Literal(node, state) {\n    if (node.raw != null) {\n      // Non-standard property\n      state.write(node.raw, node)\n    } else if (node.regex != null) {\n      this.RegExpLiteral(node, state)\n    } else if (node.bigint != null) {\n      state.write(node.bigint + 'n', node)\n    } else {\n      state.write(stringify(node.value), node)\n    }\n  },\n  RegExpLiteral(node, state) {\n    const { regex } = node\n    state.write(`/${regex.pattern}/${regex.flags}`, node)\n  },\n}\n\nconst EMPTY_OBJECT = {}\n\n/*\nDEPRECATED: Alternate export of `GENERATOR`.\n*/\nexport const baseGenerator = GENERATOR\n\nclass State {\n  constructor(options) {\n    const setup = options == null ? EMPTY_OBJECT : options\n    this.output = ''\n    // Functional options\n    if (setup.output != null) {\n      this.output = setup.output\n      this.write = this.writeToStream\n    } else {\n      this.output = ''\n    }\n    this.generator = setup.generator != null ? setup.generator : GENERATOR\n    this.expressionsPrecedence =\n      setup.expressionsPrecedence != null\n        ? setup.expressionsPrecedence\n        : EXPRESSIONS_PRECEDENCE\n    // Formating setup\n    this.indent = setup.indent != null ? setup.indent : '  '\n    this.lineEnd = setup.lineEnd != null ? setup.lineEnd : '\\n'\n    this.indentLevel =\n      setup.startingIndentLevel != null ? setup.startingIndentLevel : 0\n    this.writeComments = setup.comments ? setup.comments : false\n    // Source map\n    if (setup.sourceMap != null) {\n      this.write =\n        setup.output == null ? this.writeAndMap : this.writeToStreamAndMap\n      this.sourceMap = setup.sourceMap\n      this.line = 1\n      this.column = 0\n      this.lineEndSize = this.lineEnd.split('\\n').length - 1\n      this.mapping = {\n        original: null,\n        // Uses the entire state to avoid generating ephemeral objects\n        generated: this,\n        name: undefined,\n        source: setup.sourceMap.file || setup.sourceMap._file,\n      }\n    }\n  }\n\n  write(code) {\n    this.output += code\n  }\n\n  writeToStream(code) {\n    this.output.write(code)\n  }\n\n  writeAndMap(code, node) {\n    this.output += code\n    this.map(code, node)\n  }\n\n  writeToStreamAndMap(code, node) {\n    this.output.write(code)\n    this.map(code, node)\n  }\n\n  map(code, node) {\n    if (node != null) {\n      const { type } = node\n      if (type[0] === 'L' && type[2] === 'n') {\n        // LineComment\n        this.column = 0\n        this.line++\n        return\n      }\n      if (node.loc != null) {\n        const { mapping } = this\n        mapping.original = node.loc.start\n        mapping.name = node.name\n        this.sourceMap.addMapping(mapping)\n      }\n      if (\n        (type[0] === 'T' && type[8] === 'E') ||\n        (type[0] === 'L' && type[1] === 'i' && typeof node.value === 'string')\n      ) {\n        // TemplateElement or Literal string node\n        const { length } = code\n        let { column, line } = this\n        for (let i = 0; i < length; i++) {\n          if (code[i] === '\\n') {\n            column = 0\n            line++\n          } else {\n            column++\n          }\n        }\n        this.column = column\n        this.line = line\n        return\n      }\n    }\n    const { length } = code\n    const { lineEnd } = this\n    if (length > 0) {\n      if (\n        this.lineEndSize > 0 &&\n        (lineEnd.length === 1\n          ? code[length - 1] === lineEnd\n          : code.endsWith(lineEnd))\n      ) {\n        this.line += this.lineEndSize\n        this.column = 0\n      } else {\n        this.column += length\n      }\n    }\n  }\n\n  toString() {\n    return this.output\n  }\n}\n\nexport function generate(node, options) {\n  /*\n  Returns a string representing the rendered code of the provided AST `node`.\n  The `options` are:\n\n  - `indent`: string to use for indentation (defaults to `␣␣`)\n  - `lineEnd`: string to use for line endings (defaults to `\\n`)\n  - `startingIndentLevel`: indent level to start from (defaults to `0`)\n  - `comments`: generate comments if `true` (defaults to `false`)\n  - `output`: output stream to write the rendered code to (defaults to `null`)\n  - `generator`: custom code generator (defaults to `GENERATOR`)\n  - `expressionsPrecedence`: custom map of node types and their precedence level (defaults to `EXPRESSIONS_PRECEDENCE`)\n  */\n  const state = new State(options)\n  // Travel through the AST node and generate the code\n  state.generator[node.type](node, state)\n  return state.output\n}\n","/**\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {typeof import('source-map').SourceMapGenerator} SourceMapGenerator\n * @typedef {import('source-map').RawSourceMap} Map\n * @typedef {import('./types.js').Handlers} Handlers\n */\n\n/**\n * @typedef BaseFields\n * @property {Handlers | null | undefined} [handlers]\n *   Object mapping node types to functions handling the corresponding nodes.\n *\n * @typedef SourceMapFieldsWithoutSourceMapGenerator\n * @property {null | undefined} [SourceMapGenerator]\n *   Generate a source map by passing a `SourceMapGenerator` from `source-map`\n *   in.\n *   This works if there is positional info on nodes.\n * @property {null | undefined} [filePath]\n *   Path to input file.\n *   Only used in source map.\n *\n * @typedef SourceMapFieldsWithSourceMapGenerator\n * @property {SourceMapGenerator} SourceMapGenerator\n *   Generate a source map by passing a `SourceMapGenerator` from `source-map`\n *   in.\n *   This works if there is positional info on nodes.\n * @property {string | null | undefined} [filePath]\n *   Path to input file.\n *   Only used in source map.\n *\n * @typedef SourceMapFieldsMaybeSourceMapGenerator\n * @property {SourceMapGenerator | null | undefined} SourceMapGenerator\n *   Generate a source map by passing a `SourceMapGenerator` from `source-map`\n *   in.\n *   This works if there is positional info on nodes.\n * @property {string | null | undefined} [filePath]\n *   Path to input file.\n *   Only used in source map.\n *\n * @typedef {BaseFields & SourceMapFieldsWithoutSourceMapGenerator} OptionsWithoutSourceMapGenerator\n * @typedef {BaseFields & SourceMapFieldsWithSourceMapGenerator} OptionsWithSourceMapGenerator\n * @typedef {BaseFields & SourceMapFieldsMaybeSourceMapGenerator} OptionsWithMaybeMapGenerator\n *\n * @typedef {OptionsWithMaybeMapGenerator} Options\n *   Configuration (optional).\n *\n * @typedef BaseResultFields\n * @property {string} value\n *   Serialized JavaScript.\n *\n * @typedef ResultFieldsWithoutSourceMapGenerator\n * @property {undefined} map\n *   Source map as (parsed) JSON, if `SourceMapGenerator` is passed.\n *\n * @typedef ResultFieldsWithSourceMapGenerator\n * @property {Map} map\n *   Source map as (parsed) JSON, if `SourceMapGenerator` is not passed.\n *\n * @typedef ResultFieldsMaybeSourceMapGenerator\n * @property {Map | undefined} map\n *   Source map as (parsed) JSON, if `SourceMapGenerator` might be passed.\n *\n * @typedef {BaseResultFields & ResultFieldsWithoutSourceMapGenerator} ResultWithoutSourceMapGenerator\n * @typedef {BaseResultFields & ResultFieldsWithSourceMapGenerator} ResultWithSourceMapGenerator\n * @typedef {BaseResultFields & ResultFieldsMaybeSourceMapGenerator} ResultMaybeSourceMapGenerator\n *\n * @typedef {ResultMaybeSourceMapGenerator} Result\n */\n\n// @ts-expect-error: `astring` has broken types.\nimport * as astring from 'astring'\n\n/** @type {Handlers} */\nconst GENERATOR = astring.GENERATOR\n\n/** @type {(node: Program, options: unknown) => string} */\nconst generate = astring.generate\n\n/**\n * Serialize an estree as JavaScript.\n *\n * @param tree\n *   Estree (esast).\n * @param options\n *   Configuration (optional).\n * @returns\n *   Result, optionally with source map.\n */\nexport const toJs =\n  /**\n   * @type {(\n   *   ((value: Program, options: OptionsWithSourceMapGenerator) => ResultWithSourceMapGenerator) &\n   *   ((value: Program, options: OptionsWithMaybeMapGenerator) => ResultMaybeSourceMapGenerator) &\n   *   ((value: Program, options?: OptionsWithoutSourceMapGenerator | null | undefined) => ResultWithoutSourceMapGenerator)\n   * )}\n   */\n  (\n    /**\n     * @param {Program} tree\n     * @param {Options | null | undefined} [options]\n     * @returns {Result}\n     */\n    function (tree, options) {\n      const {SourceMapGenerator, filePath, handlers} = options || {}\n      const sourceMap = SourceMapGenerator\n        ? new SourceMapGenerator({file: filePath || '<unknown>.js'})\n        : undefined\n\n      const value = generate(tree, {\n        comments: true,\n        generator: {...GENERATOR, ...handlers},\n        sourceMap\n      })\n      const map = sourceMap ? sourceMap.toJSON() : undefined\n\n      return {value, map}\n    }\n  )\n","/**\n * @typedef {import('estree-jsx').JSXAttribute} JSXAttribute\n * @typedef {import('estree-jsx').JSXClosingElement} JSXClosingElement\n * @typedef {import('estree-jsx').JSXClosingFragment} JSXClosingFragment\n * @typedef {import('estree-jsx').JSXElement} JSXElement\n * @typedef {import('estree-jsx').JSXExpressionContainer} JSXExpressionContainer\n * @typedef {import('estree-jsx').JSXFragment} JSXFragment\n * @typedef {import('estree-jsx').JSXIdentifier} JSXIdentifier\n * @typedef {import('estree-jsx').JSXMemberExpression} JSXMemberExpression\n * @typedef {import('estree-jsx').JSXNamespacedName} JSXNamespacedName\n * @typedef {import('estree-jsx').JSXOpeningElement} JSXOpeningElement\n * @typedef {import('estree-jsx').JSXOpeningFragment} JSXOpeningFragment\n * @typedef {import('estree-jsx').JSXSpreadAttribute} JSXSpreadAttribute\n * @typedef {import('estree-jsx').JSXText} JSXText\n * @typedef {import('./types.js').Generator} Generator\n * @typedef {import('./types.js').State} State\n */\n\nexport const jsx = {\n  JSXAttribute,\n  JSXClosingElement,\n  JSXClosingFragment,\n  JSXElement,\n  JSXEmptyExpression,\n  JSXExpressionContainer,\n  JSXFragment,\n  JSXIdentifier,\n  JSXMemberExpression,\n  JSXNamespacedName,\n  JSXOpeningElement,\n  JSXOpeningFragment,\n  JSXSpreadAttribute,\n  JSXText\n}\n\n/**\n * `attr`\n * `attr=\"something\"`\n * `attr={1}`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JSXAttribute} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {void}\n *   Nothing.\n */\nfunction JSXAttribute(node, state) {\n  this[node.name.type](node.name, state)\n\n  if (node.value !== undefined && node.value !== null) {\n    state.write('=')\n\n    // Encode double quotes in attribute values.\n    if (node.value.type === 'Literal') {\n      state.write(\n        '\"' + encodeJsx(String(node.value.value)).replace(/\"/g, '&quot;') + '\"',\n        node\n      )\n    } else {\n      this[node.value.type](node.value, state)\n    }\n  }\n}\n\n/**\n * `</div>`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JSXClosingElement} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {void}\n *   Nothing.\n */\nfunction JSXClosingElement(node, state) {\n  state.write('</')\n  this[node.name.type](node.name, state)\n  state.write('>')\n}\n\n/**\n * `</>`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JSXClosingFragment} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {void}\n *   Nothing.\n */\nfunction JSXClosingFragment(node, state) {\n  state.write('</>', node)\n}\n\n/**\n * `<div />`\n * `<div></div>`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JSXElement} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {void}\n *   Nothing.\n */\nfunction JSXElement(node, state) {\n  let index = -1\n\n  this[node.openingElement.type](node.openingElement, state)\n\n  if (node.children) {\n    while (++index < node.children.length) {\n      const child = node.children[index]\n\n      // Supported in types but not by Acorn.\n      /* c8 ignore next 3 */\n      if (child.type === 'JSXSpreadChild') {\n        throw new Error('JSX spread children are not supported')\n      }\n\n      this[child.type](child, state)\n    }\n  }\n\n  if (node.closingElement) {\n    this[node.closingElement.type](node.closingElement, state)\n  }\n}\n\n/**\n * `{}` (always in a `JSXExpressionContainer`, which does the curlies)\n *\n * @this {Generator}\n *   `astring` generator.\n * @returns {void}\n *   Nothing.\n */\nfunction JSXEmptyExpression() {}\n\n/**\n * `{expression}`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JSXExpressionContainer} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {void}\n *   Nothing.\n */\nfunction JSXExpressionContainer(node, state) {\n  state.write('{')\n  this[node.expression.type](node.expression, state)\n  state.write('}')\n}\n\n/**\n * `<></>`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JSXFragment} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {void}\n *   Nothing.\n */\nfunction JSXFragment(node, state) {\n  let index = -1\n\n  this[node.openingFragment.type](node.openingFragment, state)\n\n  if (node.children) {\n    while (++index < node.children.length) {\n      const child = node.children[index]\n\n      // Supported in types but not by Acorn.\n      /* c8 ignore next 3 */\n      if (child.type === 'JSXSpreadChild') {\n        throw new Error('JSX spread children are not supported')\n      }\n\n      this[child.type](child, state)\n    }\n  }\n\n  this[node.closingFragment.type](node.closingFragment, state)\n}\n\n/**\n * `div`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JSXIdentifier} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {void}\n *   Nothing.\n */\nfunction JSXIdentifier(node, state) {\n  state.write(node.name, node)\n}\n\n/**\n * `member.expression`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JSXMemberExpression} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {void}\n *   Nothing.\n */\nfunction JSXMemberExpression(node, state) {\n  this[node.object.type](node.object, state)\n  state.write('.')\n  this[node.property.type](node.property, state)\n}\n\n/**\n * `ns:name`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JSXNamespacedName} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {void}\n *   Nothing.\n */\nfunction JSXNamespacedName(node, state) {\n  this[node.namespace.type](node.namespace, state)\n  state.write(':')\n  this[node.name.type](node.name, state)\n}\n\n/**\n * `<div>`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JSXOpeningElement} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {void}\n *   Nothing.\n */\nfunction JSXOpeningElement(node, state) {\n  let index = -1\n\n  state.write('<')\n  this[node.name.type](node.name, state)\n\n  if (node.attributes) {\n    while (++index < node.attributes.length) {\n      state.write(' ')\n      this[node.attributes[index].type](node.attributes[index], state)\n    }\n  }\n\n  state.write(node.selfClosing ? ' />' : '>')\n}\n\n/**\n * `<>`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JSXOpeningFragment} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {void}\n *   Nothing.\n */\nfunction JSXOpeningFragment(node, state) {\n  state.write('<>', node)\n}\n\n/**\n * `{...argument}`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JSXSpreadAttribute} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {void}\n *   Nothing.\n */\nfunction JSXSpreadAttribute(node, state) {\n  state.write('{')\n  // eslint-disable-next-line new-cap\n  this.SpreadElement(node, state)\n  state.write('}')\n}\n\n/**\n * `!`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JSXText} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {void}\n *   Nothing.\n */\nfunction JSXText(node, state) {\n  state.write(\n    encodeJsx(node.value).replace(/[<>{}]/g, ($0) =>\n      $0 === '<'\n        ? '&lt;'\n        : $0 === '>'\n        ? '&gt;'\n        : $0 === '{'\n        ? '&#123;'\n        : '&#125;'\n    ),\n    node\n  )\n}\n\n/**\n * Make sure that character references don’t pop up.\n *\n * For example, the text `&copy;` should stay that way, and not turn into `©`.\n * We could encode all `&` (easy but verbose) or look for actual valid\n * references (complex but cleanest output).\n * Looking for the 2nd character gives us a middle ground.\n * The `#` is for (decimal and hexadecimal) numeric references, the letters\n * are for the named references.\n *\n * @param {string} value\n *   Value to encode.\n * @returns {string}\n *   Encoded value.\n */\nfunction encodeJsx(value) {\n  return value.replace(/&(?=[#a-z])/gi, '&amp;')\n}\n","/**\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {typeof import('source-map').SourceMapGenerator} SourceMapGenerator\n *\n * @typedef RecmaStringifyOptions\n *   Configuration for internal plugin `recma-stringify`.\n * @property {SourceMapGenerator | null | undefined} [SourceMapGenerator]\n *   Generate a source map by passing a `SourceMapGenerator` from `source-map`\n *   in.\n */\n\nimport {toJs, jsx} from 'estree-util-to-js'\n\n/**\n * A plugin that adds an esast compiler: a small wrapper around `astring` to add\n * support for serializing JSX.\n *\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[RecmaStringifyOptions | null | undefined] | [], Program, string>}\n */\nexport function recmaStringify(options) {\n  // Always given inside `@mdx-js/mdx`\n  /* c8 ignore next */\n  const {SourceMapGenerator} = options || {}\n\n  Object.assign(this, {Compiler: compiler})\n\n  /** @type {import('unified').CompilerFunction<Program, string>} */\n  function compiler(tree, file) {\n    const result = SourceMapGenerator\n      ? toJs(tree, {\n          filePath: file.path || 'unknown.mdx',\n          SourceMapGenerator,\n          handlers: jsx\n        })\n      : toJs(tree, {handlers: jsx})\n\n    file.map = result.map\n\n    return result.value\n  }\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @callback Handler\n *   Handle a value, with a certain ID field set to a certain value.\n *   The ID field is passed to `zwitch`, and it’s value is this function’s\n *   place on the `handlers` record.\n * @param {...any} parameters\n *   Arbitrary parameters passed to the zwitch.\n *   The first will be an object with a certain ID field set to a certain value.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback UnknownHandler\n *   Handle values that do have a certain ID field, but it’s set to a value\n *   that is not listed in the `handlers` record.\n * @param {unknown} value\n *   An object with a certain ID field set to an unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback InvalidHandler\n *   Handle values that do not have a certain ID field.\n * @param {unknown} value\n *   Any unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {void|null|undefined|never}\n *   This should crash or return nothing.\n */\n\n/**\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @typedef Options\n *   Configuration (required).\n * @property {Invalid} [invalid]\n *   Handler to use for invalid values.\n * @property {Unknown} [unknown]\n *   Handler to use for unknown values.\n * @property {Handlers} [handlers]\n *   Handlers to use.\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Handle values based on a field.\n *\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @param {string} key\n *   Field to switch on.\n * @param {Options<Invalid, Unknown, Handlers>} [options]\n *   Configuration (required).\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\n */\nexport function zwitch(key, options) {\n  const settings = options || {}\n\n  /**\n   * Handle one value.\n   *\n   * Based on the bound `key`, a respective handler will be called.\n   * If `value` is not an object, or doesn’t have a `key` property, the special\n   * “invalid” handler will be called.\n   * If `value` has an unknown `key`, the special “unknown” handler will be\n   * called.\n   *\n   * All arguments, and the context object, are passed through to the handler,\n   * and it’s result is returned.\n   *\n   * @this {unknown}\n   *   Any context object.\n   * @param {unknown} [value]\n   *   Any value.\n   * @param {...unknown} parameters\n   *   Arbitrary parameters passed to the zwitch.\n   * @property {Handler} invalid\n   *   Handle for values that do not have a certain ID field.\n   * @property {Handler} unknown\n   *   Handle values that do have a certain ID field, but it’s set to a value\n   *   that is not listed in the `handlers` record.\n   * @property {Handlers} handlers\n   *   Record of handlers.\n   * @returns {unknown}\n   *   Anything.\n   */\n  function one(value, ...parameters) {\n    /** @type {Handler|undefined} */\n    let fn = one.invalid\n    const handlers = one.handlers\n\n    if (value && own.call(value, key)) {\n      // @ts-expect-error Indexable.\n      const id = String(value[key])\n      // @ts-expect-error Indexable.\n      fn = own.call(handlers, id) ? handlers[id] : one.unknown\n    }\n\n    if (fn) {\n      return fn.call(this, value, ...parameters)\n    }\n  }\n\n  one.handlers = settings.handlers || {}\n  one.invalid = settings.invalid\n  one.unknown = settings.unknown\n\n  // @ts-expect-error: matches!\n  return one\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from './index.js';\n\nexport default StyleToObject;\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('estree').Property} Property\n * @typedef {import('estree-jsx').JSXElement} JsxElement\n * @typedef {import('estree-jsx').JSXSpreadAttribute} JsxSpreadAttribute\n * @typedef {import('estree-jsx').JSXAttribute} JsxAttribute\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Record<string, string>} Style\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {svg, find, hastToReact} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {\n  start as identifierStart,\n  cont as identifierCont,\n  name as identifierName\n} from 'estree-util-is-identifier-name'\nimport styleToObject from 'style-to-object'\n\nconst own = {}.hasOwnProperty\nconst cap = /[A-Z]/g\nconst dashSomething = /-([a-z])/g\n\n/**\n * Turn a hast element into an estree node.\n *\n * @param {Element} node\n *   hast node to transform.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {JsxElement}\n *   estree expression.\n */\n// eslint-disable-next-line complexity\nexport function element(node, state) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n  const props = node.properties || {}\n\n  if (parentSchema.space === 'html' && node.tagName.toLowerCase() === 'svg') {\n    schema = svg\n    state.schema = schema\n  }\n\n  const children = state.all(node)\n\n  /** @type {Array<JsxAttribute | JsxSpreadAttribute>} */\n  const attributes = []\n  /** @type {string} */\n  let prop\n\n  for (prop in props) {\n    if (own.call(props, prop)) {\n      let value = props[prop]\n      const info = find(schema, prop)\n      /** @type {JsxAttribute['value']} */\n      let attributeValue\n\n      // Ignore nullish and `NaN` values.\n      // Ignore `false` and falsey known booleans.\n      if (\n        value === undefined ||\n        value === null ||\n        (typeof value === 'number' && Number.isNaN(value)) ||\n        value === false ||\n        (!value && info.boolean)\n      ) {\n        continue\n      }\n\n      prop =\n        state.elementAttributeNameCase === 'react' && info.space\n          ? hastToReact[info.property] || info.property\n          : info.attribute\n\n      if (Array.isArray(value)) {\n        // Accept `array`.\n        // Most props are space-separated.\n        value = info.commaSeparated ? commas(value) : spaces(value)\n      }\n\n      if (prop === 'style') {\n        let styleObject =\n          typeof value === 'object'\n            ? value\n            : parseStyle(String(value), node.tagName)\n\n        if (state.stylePropertyNameCase === 'css') {\n          styleObject = transformStyleToCssCasing(styleObject)\n        }\n\n        /** @type {Array<Property>} */\n        const cssProperties = []\n        /** @type {string} */\n        let cssProp\n\n        for (cssProp in styleObject) {\n          // eslint-disable-next-line max-depth\n          if (own.call(styleObject, cssProp)) {\n            cssProperties.push({\n              type: 'Property',\n              method: false,\n              shorthand: false,\n              computed: false,\n              key: identifierName(cssProp)\n                ? {type: 'Identifier', name: cssProp}\n                : {type: 'Literal', value: cssProp},\n              value: {type: 'Literal', value: String(styleObject[cssProp])},\n              kind: 'init'\n            })\n          }\n        }\n\n        attributeValue = {\n          type: 'JSXExpressionContainer',\n          expression: {type: 'ObjectExpression', properties: cssProperties}\n        }\n      } else if (value === true) {\n        attributeValue = null\n      } else {\n        attributeValue = {type: 'Literal', value: String(value)}\n      }\n\n      if (jsxIdentifierName(prop)) {\n        attributes.push({\n          type: 'JSXAttribute',\n          name: {type: 'JSXIdentifier', name: prop},\n          value: attributeValue\n        })\n      } else {\n        attributes.push({\n          type: 'JSXSpreadAttribute',\n          argument: {\n            type: 'ObjectExpression',\n            properties: [\n              {\n                type: 'Property',\n                method: false,\n                shorthand: false,\n                computed: false,\n                key: {type: 'Literal', value: String(prop)},\n                // @ts-expect-error No need to worry about `style` (which has a\n                // `JSXExpressionContainer` value) because that’s a valid identifier.\n                value: attributeValue || {type: 'Literal', value: true},\n                kind: 'init'\n              }\n            ]\n          }\n        })\n      }\n    }\n  }\n\n  // Restore parent schema.\n  state.schema = parentSchema\n\n  /** @type {JsxElement} */\n  const result = {\n    type: 'JSXElement',\n    openingElement: {\n      type: 'JSXOpeningElement',\n      attributes,\n      name: state.createJsxElementName(node.tagName),\n      selfClosing: children.length === 0\n    },\n    closingElement:\n      children.length > 0\n        ? {\n            type: 'JSXClosingElement',\n            name: state.createJsxElementName(node.tagName)\n          }\n        : null,\n    children\n  }\n  state.inherit(node, result)\n  return result\n}\n\n/**\n * Parse CSS rules as a declaration.\n *\n * @param {string} value\n *   CSS text.\n * @param {string} tagName\n *   Element name.\n * @returns {Style}\n *   Props.\n */\nfunction parseStyle(value, tagName) {\n  /** @type {Style} */\n  const result = {}\n\n  try {\n    styleToObject(value, iterator)\n  } catch (error) {\n    const exception = /** @type {Error} */ (error)\n    exception.message =\n      tagName + '[style]' + exception.message.slice('undefined'.length)\n    throw error\n  }\n\n  return result\n\n  /**\n   * Add `name`, as a CSS prop, to `result`.\n   *\n   * @param {string} name\n   *   Key.\n   * @param {string} value\n   *   Value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function iterator(name, value) {\n    let key = name\n\n    if (key.slice(0, 2) !== '--') {\n      // See: <https://alanhogan.com/code/vendor-prefixed-css-property-names-in-javascript>\n      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4)\n      key = key.replace(dashSomething, toCamel)\n    }\n\n    result[key] = value\n  }\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStyleToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      let to = from.replace(cap, toDash)\n      // Handle `ms-xxx` -> `-ms-xxx`.\n      if (to.slice(0, 3) === 'ms-') to = '-' + to\n      cssCasing[to] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Make `$1` capitalized.\n *\n * @param {string} _\n *   Whatever.\n * @param {string} $1\n *   Single ASCII alphabetical.\n * @returns {string}\n *   Capitalized `$1`.\n */\nfunction toCamel(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * Checks if the given string is a valid identifier name.\n *\n * Allows dashes, so it’s actually JSX identifier names.\n *\n * @param {string} name\n *   Whatever.\n * @returns {boolean}\n *   Whether `name` is a valid JSX identifier.\n */\nfunction jsxIdentifierName(name) {\n  let index = -1\n\n  while (++index < name.length) {\n    if (!(index ? cont : identifierStart)(name.charCodeAt(index))) return false\n  }\n\n  // `false` if `name` is empty.\n  return index > 0\n\n  /**\n   * @param {number} code\n   * @returns {boolean}\n   */\n  function cont(code) {\n    return identifierCont(code) || code === 45 /* `-` */\n  }\n}\n","/**\n * @typedef {import('estree').BaseNode} EstreeNode\n * @typedef {import('estree').Comment} EstreeComment\n *\n * @typedef State\n *   Info passed around.\n * @property {Array<EstreeComment>} comments\n *   Comments.\n * @property {number} index\n *   Index of comment.\n *\n * @typedef Fields\n * @property {boolean} leading\n * @property {boolean} trailing\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Attach semistandard estree comment nodes to the tree.\n *\n * This mutates the given `tree`.\n * It takes `comments`, walks the tree, and adds comments as close as possible\n * to where they originated.\n *\n * Comment nodes are given two boolean fields: `leading` (`true` for\n * `/* a *\\/ b`) and `trailing` (`true` for `a /* b *\\/`).\n * Both fields are `false` for dangling comments: `[/* a *\\/]`.\n * This is what `recast` uses too, and is somewhat similar to Babel, which is\n * not estree but instead uses `leadingComments`, `trailingComments`, and\n * `innerComments` arrays on nodes.\n *\n * The algorithm checks any node: even recent (or future) proposals or\n * nonstandard syntax such as JSX, because it ducktypes to find nodes instead\n * of having a list of visitor keys.\n *\n * The algorithm supports `loc` fields (line/column), `range` fields (offsets),\n * and direct `start` / `end` fields.\n *\n * @template {EstreeNode} Tree\n *   Node type.\n * @param {Tree} tree\n *   Tree to attach to.\n * @param {Array<EstreeComment> | null | undefined} [comments]\n *   List of comments.\n * @returns {Tree}\n *   Given tree.\n */\n// To do: next major: don’t return given `tree`.\nexport function attachComments(tree, comments) {\n  const list = (comments || []).concat().sort(compare)\n  if (list.length > 0) walk(tree, {comments: list, index: 0})\n  return tree\n}\n\n/**\n * Attach semistandard estree comment nodes to the tree.\n *\n * @param {EstreeNode} node\n *   Node.\n * @param {State} state\n *   Info passed around.\n * @returns {void}\n *   Nothing.\n */\nfunction walk(node, state) {\n  // Done, we can quit.\n  if (state.index === state.comments.length) {\n    return\n  }\n\n  /** @type {Array<EstreeNode>} */\n  const children = []\n  /** @type {Array<EstreeComment>} */\n  const comments = []\n  /** @type {string} */\n  let key\n\n  // Find all children of `node`\n  for (key in node) {\n    if (own.call(node, key)) {\n      /** @type {EstreeNode | Array<EstreeNode>} */\n      // @ts-expect-error: indexable.\n      const value = node[key]\n\n      // Ignore comments.\n      if (value && typeof value === 'object' && key !== 'comments') {\n        if (Array.isArray(value)) {\n          let index = -1\n\n          while (++index < value.length) {\n            if (value[index] && typeof value[index].type === 'string') {\n              children.push(value[index])\n            }\n          }\n        } else if (typeof value.type === 'string') {\n          children.push(value)\n        }\n      }\n    }\n  }\n\n  // Sort the children.\n  children.sort(compare)\n\n  // Initial comments.\n  comments.push(...slice(state, node, false, {leading: true, trailing: false}))\n\n  let index = -1\n\n  while (++index < children.length) {\n    walk(children[index], state)\n  }\n\n  // Dangling or trailing comments.\n  comments.push(\n    ...slice(state, node, true, {\n      leading: false,\n      trailing: children.length > 0\n    })\n  )\n\n  if (comments.length > 0) {\n    // @ts-expect-error, yes, because they’re nonstandard.\n    node.comments = comments\n  }\n}\n\n/**\n * @param {State} state\n *   Info passed around.\n * @param {EstreeNode} node\n *   Node.\n * @param {boolean} compareEnd\n *   Whether to compare on the end (default is on start).\n * @param {Fields} fields\n *   Fields.\n * @returns {Array<EstreeComment>}\n *   Slice from `state.comments`.\n */\nfunction slice(state, node, compareEnd, fields) {\n  /** @type {Array<EstreeComment>} */\n  const result = []\n\n  while (\n    state.comments[state.index] &&\n    compare(state.comments[state.index], node, compareEnd) < 1\n  ) {\n    result.push(Object.assign({}, state.comments[state.index++], fields))\n  }\n\n  return result\n}\n\n/**\n * Sort two nodes (or comments).\n *\n * @param {EstreeNode | EstreeComment} left\n *   A node.\n * @param {EstreeNode | EstreeComment} right\n *   The other node.\n * @param {boolean | undefined} [compareEnd=false]\n *   Compare on `end` of `right`, default is to compare on `start`.\n * @returns {number}\n *   Sorting.\n */\nfunction compare(left, right, compareEnd) {\n  const field = compareEnd ? 'end' : 'start'\n\n  // Offsets.\n  if (left.range && right.range) {\n    return left.range[0] - right.range[compareEnd ? 1 : 0]\n  }\n\n  // Points.\n  if (left.loc && left.loc.start && right.loc && right.loc[field]) {\n    return (\n      left.loc.start.line - right.loc[field].line ||\n      left.loc.start.column - right.loc[field].column\n    )\n  }\n\n  // Just `start` (and `end`) on nodes.\n  // Default in most parsers.\n  if ('start' in left && field in right) {\n    // @ts-expect-error Added by Acorn\n    return left.start - right[field]\n  }\n\n  return Number.NaN\n}\n","/**\n * @typedef {import('mdast-util-mdx-expression').MdxFlowExpression} MdxFlowExpression\n * @typedef {import('mdast-util-mdx-expression').MdxTextExpression} MdxTextExpression\n * @typedef {import('estree').Expression} Expression\n * @typedef {import('estree-jsx').JSXEmptyExpression} JsxEmptyExpression\n * @typedef {import('estree-jsx').JSXExpressionContainer} JsxExpressionContainer\n * @typedef {import('../state.js').State} State\n */\n\nimport {attachComments} from 'estree-util-attach-comments'\n\n/**\n * Turn an MDX expression node into an estree node.\n *\n * @param {MdxFlowExpression | MdxTextExpression} node\n *   hast node to transform.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {JsxExpressionContainer}\n *   estree expression.\n */\nexport function mdxExpression(node, state) {\n  const estree = node.data && node.data.estree\n  const comments = (estree && estree.comments) || []\n  /** @type {Expression | JsxEmptyExpression | undefined} */\n  let expression\n\n  if (estree) {\n    state.comments.push(...comments)\n    attachComments(estree, estree.comments)\n    expression =\n      (estree.body[0] &&\n        estree.body[0].type === 'ExpressionStatement' &&\n        estree.body[0].expression) ||\n      undefined\n  }\n\n  if (!expression) {\n    expression = {type: 'JSXEmptyExpression'}\n    state.patch(node, expression)\n  }\n\n  /** @type {JsxExpressionContainer} */\n  const result = {type: 'JSXExpressionContainer', expression}\n  state.inherit(node, result)\n  return result\n}\n","/**\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxFlowElement} MdxJsxFlowElement\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxTextElement} MdxJsxTextElement\n * @typedef {import('estree').Expression} Expression\n * @typedef {import('estree-jsx').JSXElement} JsxElement\n * @typedef {import('estree-jsx').JSXFragment} JsxFragment\n * @typedef {import('estree-jsx').JSXAttribute} JsxAttribute\n * @typedef {import('estree-jsx').JSXSpreadAttribute} JsxSpreadAttribute\n * @typedef {import('../state.js').State} State\n */\n\nimport {attachComments} from 'estree-util-attach-comments'\nimport {svg} from 'property-information'\n\n/**\n * Turn an MDX JSX element node into an estree node.\n *\n * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n *   hast node to transform.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {JsxElement | JsxFragment}\n *   JSX element or fragment.\n */\n// eslint-disable-next-line complexity\nexport function mdxJsxElement(node, state) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n  const attrs = node.attributes || []\n  let index = -1\n\n  if (\n    node.name &&\n    parentSchema.space === 'html' &&\n    node.name.toLowerCase() === 'svg'\n  ) {\n    schema = svg\n    state.schema = schema\n  }\n\n  const children = state.all(node)\n  /** @type {Array<JsxAttribute | JsxSpreadAttribute>} */\n  const attributes = []\n\n  while (++index < attrs.length) {\n    const attr = attrs[index]\n    const value = attr.value\n    /** @type {JsxAttribute['value']} */\n    let attributeValue\n\n    if (attr.type === 'mdxJsxAttribute') {\n      if (value === undefined || value === null) {\n        attributeValue = null\n        // Empty.\n      }\n      // `MdxJsxAttributeValueExpression`.\n      else if (typeof value === 'object') {\n        const estree = value.data && value.data.estree\n        const comments = (estree && estree.comments) || []\n        /** @type {Expression | undefined} */\n        let expression\n\n        if (estree) {\n          state.comments.push(...comments)\n          attachComments(estree, estree.comments)\n          // Should exist.\n          /* c8 ignore next 5 */\n          expression =\n            (estree.body[0] &&\n              estree.body[0].type === 'ExpressionStatement' &&\n              estree.body[0].expression) ||\n            undefined\n        }\n\n        attributeValue = {\n          type: 'JSXExpressionContainer',\n          expression: expression || {type: 'JSXEmptyExpression'}\n        }\n        state.inherit(value, attributeValue)\n      }\n      // Anything else.\n      else {\n        attributeValue = {type: 'Literal', value: String(value)}\n      }\n\n      /** @type {JsxAttribute} */\n      const attribute = {\n        type: 'JSXAttribute',\n        name: state.createJsxAttributeName(attr.name),\n        value: attributeValue\n      }\n\n      state.inherit(attr, attribute)\n      attributes.push(attribute)\n    }\n    // MdxJsxExpressionAttribute.\n    else {\n      const estree = attr.data && attr.data.estree\n      const comments = (estree && estree.comments) || []\n      /** @type {JsxSpreadAttribute['argument'] | undefined} */\n      let argumentValue\n\n      if (estree) {\n        state.comments.push(...comments)\n        attachComments(estree, estree.comments)\n        // Should exist.\n        /* c8 ignore next 10 */\n        argumentValue =\n          (estree.body[0] &&\n            estree.body[0].type === 'ExpressionStatement' &&\n            estree.body[0].expression &&\n            estree.body[0].expression.type === 'ObjectExpression' &&\n            estree.body[0].expression.properties &&\n            estree.body[0].expression.properties[0] &&\n            estree.body[0].expression.properties[0].type === 'SpreadElement' &&\n            estree.body[0].expression.properties[0].argument) ||\n          undefined\n      }\n\n      /** @type {JsxSpreadAttribute} */\n      const attribute = {\n        type: 'JSXSpreadAttribute',\n        argument: argumentValue || {type: 'ObjectExpression', properties: []}\n      }\n      state.inherit(attr, attribute)\n      attributes.push(attribute)\n    }\n  }\n\n  // Restore parent schema.\n  state.schema = parentSchema\n\n  /** @type {JsxElement | JsxFragment} */\n  const result = node.name\n    ? {\n        type: 'JSXElement',\n        openingElement: {\n          type: 'JSXOpeningElement',\n          attributes,\n          name: state.createJsxElementName(node.name),\n          selfClosing: children.length === 0\n        },\n        closingElement:\n          children.length > 0\n            ? {\n                type: 'JSXClosingElement',\n                name: state.createJsxElementName(node.name)\n              }\n            : null,\n        children\n      }\n    : {\n        type: 'JSXFragment',\n        openingFragment: {type: 'JSXOpeningFragment'},\n        closingFragment: {type: 'JSXClosingFragment'},\n        children\n      }\n\n  state.inherit(node, result)\n  return result\n}\n","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","import {comment} from './comment.js'\nimport {element} from './element.js'\nimport {mdxExpression} from './mdx-expression.js'\nimport {mdxJsxElement} from './mdx-jsx-element.js'\nimport {mdxjsEsm} from './mdxjs-esm.js'\nimport {text} from './text.js'\nimport {root} from './root.js'\n\nexport const handlers = {\n  comment,\n  doctype: ignore,\n  element,\n  mdxFlowExpression: mdxExpression,\n  mdxTextExpression: mdxExpression,\n  mdxJsxFlowElement: mdxJsxElement,\n  mdxJsxTextElement: mdxJsxElement,\n  mdxjsEsm,\n  text,\n  root\n}\n\n/**\n * Handle a node that is ignored.\n *\n * @returns {void}\n *   Nothing.\n */\nfunction ignore() {}\n","/**\n * @typedef {import('estree').Comment} Comment\n * @typedef {import('estree-jsx').JSXExpressionContainer} JsxExpressionContainer\n * @typedef {import('estree-jsx').JSXEmptyExpression} JsxEmptyExpression\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn a hast comment into an estree node.\n *\n * @param {import('hast').Comment} node\n *   hast node to transform.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {JsxExpressionContainer}\n *   estree expression.\n */\nexport function comment(node, state) {\n  /** @type {Comment} */\n  const result = {type: 'Block', value: node.value}\n  state.inherit(node, result)\n  state.comments.push(result)\n\n  /** @type {JsxEmptyExpression} */\n  const expression = {\n    type: 'JSXEmptyExpression',\n    // @ts-expect-error: `comments` is custom.\n    comments: [Object.assign({}, result, {leading: false, trailing: true})]\n  }\n  state.patch(node, expression)\n\n  /** @type {JsxExpressionContainer} */\n  const container = {type: 'JSXExpressionContainer', expression}\n  state.patch(node, container)\n  return container\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef {import('mdast-util-mdxjs-esm').MdxjsEsm} MdxjsEsm\n * @typedef {import('../state.js').State} State\n */\n\nimport {attachComments} from 'estree-util-attach-comments'\n\n/**\n * Handle an MDX ESM node.\n *\n * @param {MdxjsEsm} node\n *   hast node to transform.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {void}\n *   Nothing.\n */\nexport function mdxjsEsm(node, state) {\n  const estree = node.data && node.data.estree\n  const comments = (estree && estree.comments) || []\n\n  if (estree) {\n    state.comments.push(...comments)\n    attachComments(estree, comments)\n    state.esm.push(...estree.body)\n  }\n}\n","/**\n * @typedef {import('hast').Text} Text\n * @typedef {import('estree').Literal} Literal\n * @typedef {import('estree-jsx').JSXExpressionContainer} JsxExpressionContainer\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn a hast text node into an estree node.\n *\n * @param {Text} node\n *   hast node to transform.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {JsxExpressionContainer | void}\n *   JSX expression.\n */\nexport function text(node, state) {\n  const value = String(node.value || '')\n\n  if (value) {\n    /** @type {Literal} */\n    const result = {type: 'Literal', value}\n    state.inherit(node, result)\n    /** @type {JsxExpressionContainer} */\n    const container = {type: 'JSXExpressionContainer', expression: result}\n    state.patch(node, container)\n    return container\n  }\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('estree-jsx').JSXFragment} JsxFragment\n * @typedef {JsxFragment['children'][number]} JsxChild\n * @typedef {import('../state.js').State} State\n */\n\nimport {whitespace} from 'hast-util-whitespace'\n\n/**\n * Turn a hast root node into an estree node.\n *\n * @param {Root} node\n *   hast node to transform.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {JsxFragment}\n *   estree JSX fragment.\n */\nexport function root(node, state) {\n  const children = state.all(node)\n  /** @type {Array<JsxChild>} */\n  const cleanChildren = []\n  let index = -1\n  /** @type {Array<JsxChild> | undefined} */\n  let queue\n\n  // Remove surrounding whitespace nodes from the fragment.\n  while (++index < children.length) {\n    const child = children[index]\n\n    if (\n      child.type === 'JSXExpressionContainer' &&\n      child.expression.type === 'Literal' &&\n      whitespace(child.expression.value)\n    ) {\n      if (queue) queue.push(child)\n    } else {\n      if (queue) cleanChildren.push(...queue)\n      cleanChildren.push(child)\n      queue = []\n    }\n  }\n\n  /** @type {JsxFragment} */\n  const result = {\n    type: 'JSXFragment',\n    openingFragment: {type: 'JSXOpeningFragment'},\n    closingFragment: {type: 'JSXClosingFragment'},\n    children: cleanChildren\n  }\n  state.inherit(node, result)\n  return result\n}\n","/**\n * @typedef {import('estree').Comment} Comment\n * @typedef {import('estree').Directive} Directive\n * @typedef {import('estree').ModuleDeclaration} ModuleDeclaration\n * @typedef {import('estree').Node} EstreeNode\n * @typedef {import('estree').Statement} Statement\n *\n * @typedef {import('estree-jsx').JSXAttribute} JsxAttribute\n * @typedef {import('estree-jsx').JSXElement} JsxElement\n * @typedef {import('estree-jsx').JSXIdentifier} JsxIdentifier\n * @typedef {import('estree-jsx').JSXMemberExpression} JsxMemberExpression\n * @typedef {import('estree-jsx').JSXNamespacedName} JsxNamespacedName\n *\n * @typedef {import('hast').Content} Content\n * @typedef {import('hast').Root} Root\n *\n * @typedef {import('mdast-util-mdx-expression').MdxFlowExpression} MdxFlowExpression\n * @typedef {import('mdast-util-mdx-expression').MdxTextExpression} MdxTextExpression\n *\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxAttribute} MdxJsxAttribute\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxAttributeValueExpression} MdxJsxAttributeValueExpression\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxExpressionAttribute} MdxJsxExpressionAttribute\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxFlowElement} MdxJsxFlowElement\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxTextElement} MdxJsxTextElement\n *\n * @typedef {import('property-information').Schema} Schema\n *\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Content | MdxJsxAttributeValueExpression | MdxJsxAttribute | MdxJsxExpressionAttribute | MdxJsxFlowElement | MdxJsxTextElement | MdxFlowExpression | MdxTextExpression | Root} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n * @typedef {JsxElement['openingElement']['name']} JsxElementName\n * @typedef {JsxAttribute['name']} JsxAttributeName\n * @typedef {JsxElement['children'][number]} JsxChild\n *\n * @typedef {'html' | 'svg'} Space\n *   Namespace.\n *\n * @callback Handle\n *   Turn a hast node into an estree node.\n * @param {any} node\n *   Expected hast node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {JsxChild | null | undefined | void}\n *   estree node.\n *\n * @typedef {'html' | 'react'} ElementAttributeNameCase\n *   Specify casing to use for attribute names.\n *\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`.\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`.\n *\n * @typedef {'css' | 'dom'} StylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n *\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`.\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`.\n *\n * @typedef Options\n *   Configuration.\n * @property {ElementAttributeNameCase | null | undefined} [elementAttributeNameCase='react']\n *   Specify casing to use for attribute names.\n *\n *   This casing is used for hast elements, not for embedded MDX JSX nodes\n *   (components that someone authored manually).\n * @property {Record<string, Handle | null | undefined> | null | undefined} [handlers={}]\n *   Custom handlers.\n * @property {Space | null | undefined} [space='html']\n *   Which space the document is in.\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n * @property {StylePropertyNameCase | null | undefined} [stylePropertyNameCase='dom']\n *   Specify casing to use for property names in `style` objects.\n *\n *   This casing is used for hast elements, not for embedded MDX JSX nodes\n *   (components that someone authored manually).\n *\n * @typedef State\n *   Info passed around about the current state.\n * @property {Schema} schema\n *   Current schema.\n * @property {ElementAttributeNameCase} elementAttributeNameCase\n *   Casing to use for attribute names.\n * @property {StylePropertyNameCase} stylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n * @property {Array<Comment>} comments\n *   List of estree comments.\n * @property {Array<Directive | Statement | ModuleDeclaration>} esm\n *   List of top-level estree nodes.\n * @property {(node: any) => JsxChild | null | undefined | void} handle\n *   Transform a hast node to estree.\n * @property {(parent: Parent) => Array<JsxChild>} all\n *   Transform children of a hast parent to estree.\n * @property {(from: Node, to: EstreeNode | Comment) => void} patch\n *   Take positional info from `from` (use `inherit` if you also want data).\n * @property {(from: Node, to: EstreeNode | Comment) => void} inherit\n *   Take positional info and data from `from` (use `patch` if you don’t want data).\n * @property {(name: string) => JsxAttributeName} createJsxAttributeName\n *   Create a JSX attribute name.\n * @property {(name: string) => JsxElementName} createJsxElementName\n *   Create a JSX element name.\n */\n\nimport {html, svg} from 'property-information'\nimport {position} from 'unist-util-position'\nimport {zwitch} from 'zwitch'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n//\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\n// See: <https://github.com/mdx-js/mdx/issues/2000>\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\n\n/**\n * Create a state from options.\n *\n * @param {Options} options\n *   Configuration.\n * @returns {State}\n *   Info passed around about the current state.\n */\n\nexport function createState(options) {\n  /** @type {Handle} */\n  const one = zwitch('type', {\n    invalid,\n    unknown,\n    handlers: {...handlers, ...options.handlers}\n  })\n\n  return {\n    // Current space.\n    schema: options.space === 'svg' ? svg : html,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    // Results.\n    comments: [],\n    esm: [],\n    // Useful functions.\n    handle,\n    all,\n    patch,\n    inherit,\n    createJsxAttributeName,\n    createJsxElementName\n  }\n\n  /**\n   * @this {State}\n   * @param {any} node\n   * @returns {JsxChild | null | undefined | void}\n   */\n  function handle(node) {\n    return one(node, this)\n  }\n}\n\n/**\n * Crash on an invalid value.\n *\n * @param {unknown} value\n *   Non-node.\n * @returns {never}\n *   Nothing (crashes).\n */\nfunction invalid(value) {\n  throw new Error('Cannot handle value `' + value + '`, expected node')\n}\n\n/**\n * Crash on an unknown node.\n *\n * @param {unknown} node\n *   Unknown node.\n * @returns {never}\n *   Nothing (crashes).\n */\nfunction unknown(node) {\n  // @ts-expect-error: JS guarantees there’s a `type`.\n  throw new Error('Cannot handle unknown node `' + node.type + '`')\n}\n\n/**\n * @this {State} state\n *   Info passed around about the current state.\n * @param {Parent | MdxJsxFlowElement | MdxJsxTextElement} parent\n *   hast node whose children to transform.\n * @returns {Array<JsxChild>}\n *   estree nodes.\n */\nfunction all(parent) {\n  const children = parent.children || []\n  let index = -1\n  /** @type {Array<JsxChild>} */\n  const results = []\n  const ignoreLineBreak =\n    this.schema.space === 'html' &&\n    parent.type === 'element' &&\n    tableElements.has(parent.tagName.toLowerCase())\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    if (ignoreLineBreak && child.type === 'text' && child.value === '\\n') {\n      continue\n    }\n\n    const result = this.handle(child)\n\n    if (Array.isArray(result)) {\n      results.push(...result)\n    } else if (result) {\n      results.push(result)\n    }\n  }\n\n  return results\n}\n\n/**\n * Take positional info and data from `hast`.\n *\n * Use `patch` if you don’t want data.\n *\n * @param {Node | MdxJsxAttributeValueExpression | MdxJsxAttribute | MdxJsxExpressionAttribute | MdxJsxFlowElement | MdxJsxTextElement | MdxFlowExpression | MdxTextExpression} from\n *   hast node to take positional info and data from.\n * @param {EstreeNode | Comment} to\n *   estree node to add positional info and data to.\n * @returns {void}\n *   Nothing.\n */\nfunction inherit(from, to) {\n  /** @type {Record<string, unknown> | undefined} */\n  const left = from.data\n  /** @type {Record<string, unknown> | undefined} */\n  let right\n  /** @type {string} */\n  let key\n\n  patch(from, to)\n\n  if (left) {\n    for (key in left) {\n      if (own.call(left, key) && key !== 'estree') {\n        if (!right) right = {}\n        right[key] = left[key]\n      }\n    }\n\n    if (right) {\n      // @ts-expect-error `esast` extension.\n      to.data = right\n    }\n  }\n}\n\n/**\n * Take positional info from `from`.\n *\n * Use `inherit` if you also want data.\n *\n * @param {Node | MdxJsxAttributeValueExpression | MdxJsxAttribute | MdxJsxExpressionAttribute | MdxJsxFlowElement | MdxJsxTextElement | MdxFlowExpression | MdxTextExpression} from\n *   hast node to take positional info from.\n * @param {EstreeNode | Comment} to\n *   estree node to add positional info to.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  const p = position(from)\n\n  if (\n    p.start.line &&\n    p.start.offset !== undefined &&\n    p.end.offset !== undefined\n  ) {\n    // @ts-expect-error acorn-style.\n    to.start = p.start.offset\n    // @ts-expect-error acorn-style.\n    to.end = p.end.offset\n    to.loc = {\n      start: {line: p.start.line, column: p.start.column - 1},\n      end: {line: p.end.line, column: p.end.column - 1}\n    }\n    to.range = [p.start.offset, p.end.offset]\n  }\n}\n\n/**\n * Create a JSX attribute name.\n *\n * @param {string} name\n * @returns {JsxAttributeName}\n */\nfunction createJsxAttributeName(name) {\n  const node = createJsxNameFromString(name)\n\n  // MDX never generates this.\n  /* c8 ignore next 3 */\n  if (node.type === 'JSXMemberExpression') {\n    throw new Error('Member expressions in attribute names are not supported')\n  }\n\n  return node\n}\n\n/**\n * Create a JSX element name.\n *\n * @param {string} name\n * @returns {JsxElementName}\n */\nfunction createJsxElementName(name) {\n  return createJsxNameFromString(name)\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {string} name\n *   Name.\n * @returns {JsxMemberExpression | JsxNamespacedName | JsxIdentifier}\n *   Node.\n */\nfunction createJsxNameFromString(name) {\n  if (name.includes('.')) {\n    const names = name.split('.')\n    let part = names.shift()\n    /** @type {JsxMemberExpression} */\n    // @ts-expect-error: hush, the first is always defined.\n    let node = {type: 'JSXIdentifier', name: part}\n\n    while ((part = names.shift())) {\n      node = {\n        type: 'JSXMemberExpression',\n        object: node,\n        property: {type: 'JSXIdentifier', name: part}\n      }\n    }\n\n    return node\n  }\n\n  if (name.includes(':')) {\n    const parts = name.split(':')\n    return {\n      type: 'JSXNamespacedName',\n      namespace: {type: 'JSXIdentifier', name: parts[0]},\n      name: {type: 'JSXIdentifier', name: parts[1]}\n    }\n  }\n\n  return {type: 'JSXIdentifier', name}\n}\n","/**\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {import('hast').Root} Root\n */\n\n/**\n * @typedef {'html' | 'react'} ElementAttributeNameCase\n *   Specify casing to use for attribute names.\n *\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`.\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`.\n *\n * @typedef {'css' | 'dom'} StylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n *\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`.\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`.\n *\n * @typedef Options\n *   Configuration for internal plugin `rehype-recma`.\n * @property {ElementAttributeNameCase | null | undefined} [elementAttributeNameCase='react']\n *   Specify casing to use for attribute names.\n *\n *   This casing is used for hast elements, not for embedded MDX JSX nodes\n *   (components that someone authored manually).\n * @property {StylePropertyNameCase | null | undefined} [stylePropertyNameCase='dom']\n *   Specify casing to use for property names in `style` objects.\n *\n *   This casing is used for hast elements, not for embedded MDX JSX nodes\n *   (components that someone authored manually).\n */\n\nimport {toEstree} from 'hast-util-to-estree'\n\n/**\n * A plugin to transform an HTML (hast) tree to a JS (estree).\n * `hast-util-to-estree` does all the work for us!\n *\n * @type {import('unified').Plugin<[Options | null | undefined] | [], Root, Program>}\n */\nexport function rehypeRecma(options) {\n  return (tree) => toEstree(tree, options)\n}\n","/**\n * @typedef {import('hast').Content} Content\n * @typedef {import('hast').Root} Root\n *\n * @typedef {import('estree').ExpressionStatement} ExpressionStatement\n * @typedef {import('estree').Program} Program\n *\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxAttribute} MdxJsxAttribute\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxAttributeValueExpression} MdxJsxAttributeValueExpression\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxExpressionAttribute} MdxJsxExpressionAttribute\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxFlowElement} MdxJsxFlowElement\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxTextElement} MdxJsxTextElement\n *\n * @typedef {import('mdast-util-mdx-expression').MdxFlowExpression} MdxFlowExpression\n * @typedef {import('mdast-util-mdx-expression').MdxTextExpression} MdxTextExpression\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {Root | Content | MdxJsxAttributeValueExpression | MdxJsxAttribute | MdxJsxExpressionAttribute | MdxJsxFlowElement | MdxJsxTextElement | MdxFlowExpression | MdxTextExpression} Node\n */\n\nimport {createState} from './state.js'\n\n/**\n * Transform a hast tree (with embedded MDX nodes) into an estree.\n *\n * ##### Notes\n *\n * ###### Comments\n *\n * Comments are attached to the tree in their neighbouring nodes (`recast`,\n * `babel` style) and also added as a `comments` array on the program node\n * (`espree` style).\n * You may have to do `program.comments = undefined` for certain compilers.\n *\n * ###### Frameworks\n *\n * There are differences between what JSX frameworks accept, such as whether they\n * accept `class` or `className`, or `background-color` or `backgroundColor`.\n *\n * For JSX components written in MDX, the author has to be aware of this\n * difference and write code accordingly.\n * For hast elements transformed by this project, this will be handled through\n * options.\n *\n * | Framework | `elementAttributeNameCase` | `stylePropertyNameCase` |\n * | --------- | -------------------------- | ----------------------- |\n * | Preact    | `'html'`                   | `'dom'`                 |\n * | React     | `'react'`                  | `'dom'`                 |\n * | Solid     | `'html'`                   | `'css'`                 |\n * | Vue       | `'html'`                   | `'dom'`                 |\n *\n * @param {Node} tree\n *   hast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Program}\n *   estree program node.\n *\n *   The program’s last child in `body` is most likely an `ExpressionStatement`,\n *   whose expression is a `JSXFragment` or a `JSXElement`.\n *\n *   Typically, there is only one node in `body`, however, this utility also\n *   supports embedded MDX nodes in the HTML (when `mdast-util-mdx` is used\n *   with mdast to parse markdown before passing its nodes through to hast).\n *   When MDX ESM import/exports are used, those nodes are added before the\n *   fragment or element in body.\n *\n *   There aren’t many great estree serializers out there that support JSX.\n *   To do that, you can use `estree-util-to-js`.\n *   Or, use `estree-util-build-jsx` to turn JSX into function calls, and then\n *   serialize with whatever (`astring`, `escodegen`).\n */\nexport function toEstree(tree, options) {\n  const state = createState(options || {})\n  let result = state.handle(tree)\n  const body = state.esm\n\n  if (result) {\n    if (result.type !== 'JSXFragment' && result.type !== 'JSXElement') {\n      result = {\n        type: 'JSXFragment',\n        openingFragment: {type: 'JSXOpeningFragment'},\n        closingFragment: {type: 'JSXClosingFragment'},\n        children: [result]\n      }\n      state.patch(tree, result)\n    }\n\n    /** @type {ExpressionStatement} */\n    // @ts-expect-error Types are wrong (`expression` *can* be JSX).\n    const statement = {type: 'ExpressionStatement', expression: result}\n    state.patch(tree, statement)\n    body.push(statement)\n  }\n\n  /** @type {Program} */\n  const program = {\n    type: 'Program',\n    body,\n    sourceType: 'module',\n    comments: state.comments\n  }\n  state.patch(tree, program)\n  return program\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('mdast-util-to-hast')} DoNotRemoveUsedToAddRawToNodeType\n */\n\nimport {visit} from 'unist-util-visit'\n\n/**\n * A tiny plugin that removes raw HTML.\n *\n * This is needed if the format is `md` and `rehype-raw` was not used to parse\n * dangerous HTML into nodes.\n *\n * @type {import('unified').Plugin<[], Root>}\n */\nexport function rehypeRemoveRaw() {\n  return (tree) => {\n    visit(tree, 'raw', (_, index, parent) => {\n      if (parent && typeof index === 'number') {\n        parent.children.splice(index, 1)\n        return index\n      }\n    })\n  }\n}\n","/**\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('remark-mdx')} DoNotTouchAsThisImportItIncludesMdxInTree\n */\n\nimport {visit} from 'unist-util-visit'\n\n/**\n * A tiny plugin that unravels `<p><h1>x</h1></p>` but also\n * `<p><Component /></p>` (so it has no knowledge of “HTML”).\n *\n * It also marks JSX as being explicitly JSX, so when a user passes a `h1`\n * component, it is used for `# heading` but not for `<h1>heading</h1>`.\n *\n * @type {import('unified').Plugin<[], Root>}\n */\nexport function remarkMarkAndUnravel() {\n  return (tree) => {\n    visit(tree, (node, index, parent) => {\n      let offset = -1\n      let all = true\n      let oneOrMore = false\n\n      if (parent && typeof index === 'number' && node.type === 'paragraph') {\n        const children = node.children\n\n        while (++offset < children.length) {\n          const child = children[offset]\n\n          if (\n            child.type === 'mdxJsxTextElement' ||\n            child.type === 'mdxTextExpression'\n          ) {\n            oneOrMore = true\n          } else if (\n            child.type === 'text' &&\n            /^[\\t\\r\\n ]+$/.test(String(child.value))\n          ) {\n            // Empty.\n          } else {\n            all = false\n            break\n          }\n        }\n\n        if (all && oneOrMore) {\n          offset = -1\n\n          /** @type {Array<Content>} */\n          const newChildren = []\n\n          while (++offset < children.length) {\n            const child = children[offset]\n\n            if (child.type === 'mdxJsxTextElement') {\n              // @ts-expect-error: content model is fine.\n              child.type = 'mdxJsxFlowElement'\n            }\n\n            if (child.type === 'mdxTextExpression') {\n              // @ts-expect-error: content model is fine.\n              child.type = 'mdxFlowExpression'\n            }\n\n            if (\n              child.type === 'text' &&\n              /^[\\t\\r\\n ]+$/.test(String(child.value))\n            ) {\n              // Empty.\n            } else {\n              newChildren.push(child)\n            }\n          }\n\n          parent.children.splice(index, 1, ...newChildren)\n          return index\n        }\n      }\n\n      if (\n        node.type === 'mdxJsxFlowElement' ||\n        node.type === 'mdxJsxTextElement'\n      ) {\n        const data = node.data || (node.data = {})\n        data._mdxExplicitJsx = true\n      }\n    })\n  }\n}\n","/**\n * List of node types made by `mdast-util-mdx`, which have to be passed\n * through untouched from the mdast tree to the hast tree.\n */\nexport const nodeTypes = [\n  'mdxFlowExpression',\n  'mdxJsxFlowElement',\n  'mdxJsxTextElement',\n  'mdxTextExpression',\n  'mdxjsEsm'\n]\n","export const development = false\n","/**\n * @typedef {import('remark-rehype').Options} RemarkRehypeOptions\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('unified').Processor} Processor\n * @typedef {import('./plugin/rehype-recma.js').Options} RehypeRecmaOptions\n * @typedef {import('./plugin/recma-document.js').RecmaDocumentOptions} RecmaDocumentOptions\n * @typedef {import('./plugin/recma-stringify.js').RecmaStringifyOptions} RecmaStringifyOptions\n * @typedef {import('./plugin/recma-jsx-rewrite.js').RecmaJsxRewriteOptions} RecmaJsxRewriteOptions\n */\n\n/**\n * @typedef BaseProcessorOptions\n *   Base configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Whether to keep JSX.\n * @property {'mdx' | 'md' | null | undefined} [format='mdx']\n *   Format of the files to be processed.\n * @property {'function-body' | 'program'} [outputFormat='program']\n *   Whether to compile to a whole program or a function body..\n * @property {Array<string> | null | undefined} [mdExtensions]\n *   Extensions (with `.`) for markdown.\n * @property {Array<string> | null | undefined} [mdxExtensions]\n *   Extensions (with `.`) for MDX.\n * @property {PluggableList | null | undefined} [recmaPlugins]\n *   List of recma (esast, JavaScript) plugins.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark (mdast, markdown) plugins.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype (hast, HTML) plugins.\n * @property {RemarkRehypeOptions | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n *\n * @typedef {Omit<RehypeRecmaOptions & RecmaDocumentOptions & RecmaStringifyOptions & RecmaJsxRewriteOptions, 'outputFormat'>} PluginOptions\n *   Configuration for internal plugins.\n *\n * @typedef {BaseProcessorOptions & PluginOptions} ProcessorOptions\n *   Configuration for processor.\n */\n\nimport {unified} from 'unified'\nimport remarkMdx from 'remark-mdx'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {recmaJsxBuild} from './plugin/recma-jsx-build.js'\nimport {recmaDocument} from './plugin/recma-document.js'\nimport {recmaJsxRewrite} from './plugin/recma-jsx-rewrite.js'\nimport {recmaStringify} from './plugin/recma-stringify.js'\nimport {rehypeRecma} from './plugin/rehype-recma.js'\nimport {rehypeRemoveRaw} from './plugin/rehype-remove-raw.js'\nimport {remarkMarkAndUnravel} from './plugin/remark-mark-and-unravel.js'\nimport {nodeTypes} from './node-types.js'\nimport {development as defaultDevelopment} from './condition.js'\n\nconst removedOptions = [\n  'filepath',\n  'compilers',\n  'hastPlugins',\n  'mdPlugins',\n  'skipExport',\n  'wrapExport'\n]\n\n/**\n * Pipeline to:\n *\n * 1. Parse MDX (serialized markdown with embedded JSX, ESM, and  expressions)\n * 2. Transform through remark (mdast), rehype (hast), and recma (esast)\n * 3. Serialize as JavaScript\n *\n * @param {ProcessorOptions | null | undefined} [options]\n *   Configuration.\n * @return {Processor}\n *   Processor.\n */\nexport function createProcessor(options) {\n  const {\n    development,\n    jsx,\n    format,\n    outputFormat,\n    providerImportSource,\n    recmaPlugins,\n    rehypePlugins,\n    remarkPlugins,\n    remarkRehypeOptions,\n    elementAttributeNameCase,\n    stylePropertyNameCase,\n    SourceMapGenerator,\n    ...rest\n  } = options || {}\n  const dev =\n    development === null || development === undefined\n      ? defaultDevelopment\n      : development\n  let index = -1\n\n  while (++index < removedOptions.length) {\n    const key = removedOptions[index]\n    if (options && key in options) {\n      throw new Error(\n        '`options.' +\n          key +\n          '` is no longer supported. Please see <https://mdxjs.com/migrating/v2/> for more information'\n      )\n    }\n  }\n\n  // @ts-expect-error runtime exception for disallowed field here, which is\n  // allowed in `compile`.\n  if (format === 'detect') {\n    throw new Error(\n      \"Incorrect `format: 'detect'`: `createProcessor` can support either `md` or `mdx`; it does not support detecting the format\"\n    )\n  }\n\n  const pipeline = unified().use(remarkParse)\n\n  if (format !== 'md') {\n    pipeline.use(remarkMdx)\n  }\n\n  const extraNodeTypes = remarkRehypeOptions\n    ? /* c8 ignore next */\n      remarkRehypeOptions.passThrough || []\n    : []\n\n  pipeline\n    .use(remarkMarkAndUnravel)\n    .use(remarkPlugins || [])\n    .use(remarkRehype, {\n      ...remarkRehypeOptions,\n      allowDangerousHtml: true,\n      passThrough: [...extraNodeTypes, ...nodeTypes]\n    })\n    .use(rehypePlugins || [])\n\n  if (format === 'md') {\n    pipeline.use(rehypeRemoveRaw)\n  }\n\n  pipeline\n    .use(rehypeRecma, {elementAttributeNameCase, stylePropertyNameCase})\n    .use(recmaDocument, {...rest, outputFormat})\n    .use(recmaJsxRewrite, {\n      development: dev,\n      providerImportSource,\n      outputFormat\n    })\n\n  if (!jsx) {\n    pipeline.use(recmaJsxBuild, {development: dev, outputFormat})\n  }\n\n  pipeline.use(recmaStringify, {SourceMapGenerator}).use(recmaPlugins || [])\n\n  return pipeline\n}\n","// @ts-expect-error: untyped.\nimport markdownExtensions from 'markdown-extensions'\n\nexport const mdx = ['.mdx']\n/** @type {Array<string>} */\nexport const md = markdownExtensions.map((/** @type {string} */ d) => '.' + d)\n","/**\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('../core.js').ProcessorOptions} ProcessorOptions\n * @typedef {import('../compile.js').CompileOptions} CompileOptions\n */\n\nimport {VFile} from 'vfile'\nimport {md} from './extnames.js'\n\n/**\n * Create a file and options from a given `vfileCompatible` and options that\n * might contain `format: 'detect'`.\n *\n * @param {VFileCompatible} vfileCompatible\n * @param {CompileOptions | null | undefined} [options]\n * @returns {{file: VFile, options: ProcessorOptions}}\n */\nexport function resolveFileAndOptions(vfileCompatible, options) {\n  const file = looksLikeAVFile(vfileCompatible)\n    ? vfileCompatible\n    : new VFile(vfileCompatible)\n  const {format, ...rest} = options || {}\n  return {\n    file,\n    options: {\n      format:\n        format === 'md' || format === 'mdx'\n          ? format\n          : file.extname && (rest.mdExtensions || md).includes(file.extname)\n          ? 'md'\n          : 'mdx',\n      ...rest\n    }\n  }\n}\n\n/**\n * @param {VFileCompatible | null | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n","/**\n * @typedef {import('vfile').VFile} VFile\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('./core.js').PluginOptions} PluginOptions\n * @typedef {import('./core.js').BaseProcessorOptions} BaseProcessorOptions\n */\n\n/**\n * @typedef {Omit<BaseProcessorOptions, 'format'>} CoreProcessorOptions\n *   Core configuration.\n *\n * @typedef ExtraOptions\n *   Extra configuration.\n * @property {'detect' | 'mdx' | 'md' | null | undefined} [format='detect']\n *   Format of `file`.\n *\n * @typedef {CoreProcessorOptions & PluginOptions & ExtraOptions} CompileOptions\n *   Configuration.\n */\n\nimport {createProcessor} from './core.js'\nimport {resolveFileAndOptions} from './util/resolve-file-and-options.js'\n\n/**\n * Compile MDX to JS.\n *\n * @param {VFileCompatible} vfileCompatible\n *   MDX document to parse (`string`, `Buffer`, `vfile`, anything that can be\n *   given to `vfile`).\n * @param {CompileOptions | null | undefined} [compileOptions]\n *   Compile configuration.\n * @return {Promise<VFile>}\n *   File.\n */\nexport function compile(vfileCompatible, compileOptions) {\n  const {file, options} = resolveFileAndOptions(vfileCompatible, compileOptions)\n  return createProcessor(options).process(file)\n}\n\n/**\n * Synchronously compile MDX to JS.\n *\n * @param {VFileCompatible} vfileCompatible\n *   MDX document to parse (`string`, `Buffer`, `vfile`, anything that can be\n *   given to `vfile`).\n * @param {CompileOptions | null | undefined} [compileOptions]\n *   Compile configuration.\n * @return {VFile}\n *   File.\n */\nexport function compileSync(vfileCompatible, compileOptions) {\n  const {file, options} = resolveFileAndOptions(vfileCompatible, compileOptions)\n  return createProcessor(options).processSync(file)\n}\n","/** @type {new (code: string, ...args: Array<unknown>) => Function} **/\nconst AsyncFunction = Object.getPrototypeOf(run).constructor\n\n/**\n * Asynchronously run code.\n *\n * @param {{toString(): string}} file\n *   JS document to run.\n * @param {unknown} options\n *   Parameter.\n * @return {Promise<any>}\n *   Anthing.\n */\nexport async function run(file, options) {\n  return new AsyncFunction(String(file))(options)\n}\n\n/**\n * Synchronously run code.\n *\n * @param {{toString(): string}} file\n *   JS document to run.\n * @param {unknown} options\n *   Parameter.\n * @return {any}\n *   Anthing.\n */\nexport function runSync(file, options) {\n  // eslint-disable-next-line no-new-func\n  return new Function(String(file))(options)\n}\n","/**\n * @typedef {import('mdx/types.js').MDXModule} ExportMap\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('./util/resolve-evaluate-options.js').EvaluateOptions} EvaluateOptions\n */\n\nimport {compile, compileSync} from './compile.js'\nimport {run, runSync} from './run.js'\nimport {resolveEvaluateOptions} from './util/resolve-evaluate-options.js'\n\n/**\n * Evaluate MDX.\n *\n * @param {VFileCompatible} vfileCompatible\n *   MDX document to parse (`string`, `Buffer`, `vfile`, anything that can be\n *   given to `vfile`).\n * @param {EvaluateOptions} evaluateOptions\n *   Configuration for evaluation.\n * @return {Promise<ExportMap>}\n *   Export map.\n */\nexport async function evaluate(vfileCompatible, evaluateOptions) {\n  const {compiletime, runtime} = resolveEvaluateOptions(evaluateOptions)\n  return run(await compile(vfileCompatible, compiletime), runtime)\n}\n\n/**\n * Synchronously evaluate MDX.\n *\n * @param {VFileCompatible} vfileCompatible\n *   MDX document to parse (`string`, `Buffer`, `vfile`, anything that can be\n *   given to `vfile`).\n * @param {EvaluateOptions} evaluateOptions\n *   Configuration for evaluation.\n * @return {ExportMap}\n *   Export map.\n */\nexport function evaluateSync(vfileCompatible, evaluateOptions) {\n  const {compiletime, runtime} = resolveEvaluateOptions(evaluateOptions)\n  return runSync(compileSync(vfileCompatible, compiletime), runtime)\n}\n","/**\n * @typedef {import('../core.js').ProcessorOptions} ProcessorOptions\n *\n * @typedef RunnerOptions\n *   Configuration with JSX runtime.\n * @property {any} Fragment\n *   Symbol to use for fragments.\n * @property {any} [jsx]\n *   Function to generate an element with static children in production mode.\n * @property {any} [jsxs]\n *   Function to generate an element with dynamic children in production mode.\n * @property {any} [jsxDEV]\n *   Function to generate an element in development mode.\n * @property {any} [useMDXComponents]\n *   Function to get `MDXComponents` from context.\n *\n * @typedef {Omit<ProcessorOptions, 'jsx' | 'jsxImportSource' | 'jsxRuntime' | 'pragma' | 'pragmaFrag' | 'pragmaImportSource' | 'providerImportSource' | 'outputFormat'> } EvaluateProcessorOptions\n *   Compile configuration without JSX options for evaluation.\n *\n * @typedef {EvaluateProcessorOptions & RunnerOptions} EvaluateOptions\n *   Configuration for evaluation.\n */\n\n/**\n * Split compiletime options from runtime options.\n *\n * @param {EvaluateOptions | null | undefined} options\n * @returns {{compiletime: ProcessorOptions, runtime: RunnerOptions}}\n */\nexport function resolveEvaluateOptions(options) {\n  const {development, Fragment, jsx, jsxs, jsxDEV, useMDXComponents, ...rest} =\n    options || {}\n\n  if (!Fragment) throw new Error('Expected `Fragment` given to `evaluate`')\n  if (development) {\n    if (!jsxDEV) throw new Error('Expected `jsxDEV` given to `evaluate`')\n  } else {\n    if (!jsx) throw new Error('Expected `jsx` given to `evaluate`')\n    if (!jsxs) throw new Error('Expected `jsxs` given to `evaluate`')\n  }\n\n  return {\n    compiletime: {\n      ...rest,\n      development,\n      outputFormat: 'function-body',\n      providerImportSource: useMDXComponents ? '#' : undefined\n    },\n    runtime: {Fragment, jsx, jsxs, jsxDEV, useMDXComponents}\n  }\n}\n","import * as React from \"react\"\nimport { evaluateSync } from \"@mdx-js/mdx\"\nimport { MDXProps } from \"mdx/types\"\nimport * as runtime from \"react/jsx-runtime\"\n\ninterface FragmentProperties extends MDXProps {\n  children?: React.ReactElement\n}\n\nconst Fragment = ({children}: FragmentProperties) => {\n  return (\n    <>\n      {children}\n    </>\n  )\n}\n\ninterface MdxRendererProperties {\n  children?: string\n}\n\nconst MdxRenderer = ({children}: MdxRendererProperties) => {\n  if (!children) {\n    return\n  }\n  \n  const exports = React.useMemo(() => {\n    return evaluateSync(children, { ...runtime, Fragment })\n  }, [children])\n  const Content = exports.default\n  return(\n    <>\n      <Content/>\n    </>\n  )\n}\n\nexport default MdxRenderer","import * as React from \"react\"\nimport { useStaticQuery, type HeadFC, type PageProps, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\nimport Layout from \"../components/Layout\"\nimport Section from \"../components/Section\"\nimport Testimonial from \"../components/Testimonial\"\nimport Carousel from \"../components/Carousel\"\nimport ListCard from \"../components/ListCard\"\nimport {\n  FaMicroscope as AnalysisIcon,\n  FaCompassDrafting as ArchitectureIcon,\n  FaMap as PrototypeIcon,\n  FaCode as DevelopmentIcon,\n  FaCloud as CloudIcon,\n} from \"react-icons/fa6\"\nimport {\n  BiSolidBackpack as RucksackIcon\n} from \"react-icons/bi\"\nimport { IconBaseProps } from \"react-icons\"\nimport { HorizontalOrientation } from \"../utilities/HorizontalOrientation\"\nimport Button from \"../components/Button\"\nimport MdxRenderer from \"../components/MdxRenderer\"\n\ninterface ProcessTileProperties {\n  image: React.ReactElement\n  imageOrientation: HorizontalOrientation\n  title: string\n  text: string\n  subtext: string\n}\n\nconst ProcessTile = ({image, imageOrientation, title, text, subtext}: ProcessTileProperties) => {\n  return (\n    <ListCard.Item\n      image={image}\n      imageOrientation={imageOrientation}\n    >\n        <p className=\"text-lg 3xl:text-xl text-gray-400\">\n          {title}\n        </p>\n        <p className=\"text-xl 3xl:text-2xl\">\n          {text}\n        </p>\n        <p className=\"test-base 3xl:text-lg text-gray-400\">\n          {subtext}\n        </p>\n    </ListCard.Item>\n  )\n}\n\ninterface ExpertiseProperties {\n  title: string\n  iconType: React.ElementType<IconBaseProps>\n  iconOrientation: HorizontalOrientation\n  children: string\n}\n\nconst ExpertiseTile = ({title, iconType: Icon, iconOrientation, children}: ExpertiseProperties) => {\n  return (\n    <div className=\"flex flex-row gap-6\">\n      { iconOrientation === HorizontalOrientation.Left\n          ? <div className=\"my-auto\">\n              <div className=\"p-6 bg-zinc-300 rounded-full drop-shadow border border-zinc-400\">\n                <Icon size={32} className=\"text-zinc-500\"/>\n              </div>\n            </div>\n          : \"\"\n      }\n      <div className=\"flex flex-col flex-1 text-center gap-3 3xl:gap-4\">\n        <div className=\"text-base 3xl:text-lg text-zinc-500\">\n          {title}\n        </div>\n        <div className=\"text-lg 3xl:text-xl\">\n          {children}\n        </div>\n      </div>\n      { iconOrientation === HorizontalOrientation.Right\n          ? <div className=\"my-auto\">\n              <div className=\"p-6 bg-zinc-300 rounded-full drop-shadow border border-zinc-400\">\n                <Icon size={32} className=\"text-zinc-500\"/>\n              </div>\n            </div>\n          : \"\"\n      }\n    </div>\n  )\n}\n\nconst IndexPage: React.FC<PageProps> = () => {\n  // const [testimonials, setTestimonials] = React.useState([])\n  const data = useStaticQuery(graphql`\n  query MyQuery {\n    allFile(filter: {sourceInstanceName: {eq: \"testimonials\"}}, sort: {name: ASC}) {\n      nodes {\n        name\n        childMdx {\n          frontmatter {\n            id\n            company\n            contact\n          }\n          body\n        }\n      }\n    }\n  }\n  `)\n\n  const testimonials = data.allFile.nodes.map(({childMdx}: any) => {\n    return (\n      <Testimonial\n        key={childMdx.frontmatter.id}\n        image={<StaticImage src=\"https://placehold.co/128.png\" alt=\"\" height={128} layout=\"fixed\"/>}\n        contact={childMdx.frontmatter.contact}\n        company={childMdx.frontmatter.company}\n      >\n        <MdxRenderer>\n          {childMdx.body}\n        </MdxRenderer>\n      </Testimonial>\n    )\n  })\n  return (\n    <Layout hero={{\n      image: <StaticImage src=\"../images/hero.jpeg\" alt=\"\" layout=\"constrained\"/>,\n      content: \n        <div className=\"h-full flex flex-col\">\n          <p className=\"m-auto mt-32 3xl:mt-48 text-white text-center text-5xl 3xl:text-6xl uppercase font-extrabold leading-relaxed\">\n            Building, and Rebuilding,\n            <br/>\n            Software Systems\n          </p>\n          <div className=\"mx-auto mb-8 3xl:mb-24 text-center\">\n            <Button label=\"Let's Chat\"/>\n          </div>\n        </div>\n    }}>\n      <Section\n        title=\"Side Trailing\"\n        description=\"The Side Trails Software Development process.\"\n      >\n        <p className=\"text-lg 3xl:text-xl\">\n          A process of discovery and exploration aimed at developing a deep understanding of your systems, technical challenges, and business problems.\n          In order to establish this understanding, close collaboration with you is integral to the process. It is not to embarked upon alone.\n        </p>\n        <p className=\"text-lg 3xl:text-xl\">\n          Any development project I undertake can be loosely broken down into the following parts: Discover, Explore, and Build.\n        </p>\n        <ListCard title=\"Process\">\n          <ProcessTile\n            image={<StaticImage src=\"../images/discover.png\" alt=\"\" width={256} height={256} layout=\"fixed\" className=\"rounded-xl bg-zinc-50\"/>}\n            imageOrientation={HorizontalOrientation.Right}\n            title=\"Discover\"\n            text=\"First, let's discover what your business needs/technical challenges are all about.\"\n            subtext=\"What are you trying to achieve? What existing software solutions do you have? What are the non-negotiable vs. the nice-to-haves requirements?\"\n          />\n          <ProcessTile\n            image={<StaticImage src=\"../images/explore.png\" alt=\"\" width={256} height={256} layout=\"fixed\" className=\"rounded-xl bg-zinc-50\"/>}\n            imageOrientation={HorizontalOrientation.Left}\n            title=\"Explore\"\n            text=\"Second, let's explore these business needs/technical challenges to establish a shared and deep understanding.\"\n            subtext=\"What are the various systems and processes? How do they interact? What are the first principles? Close collaboration is key.\"\n          />\n          <ProcessTile\n            image={<StaticImage src=\"../images/build.png\" alt=\"\" width={256} height={256} layout=\"fixed\" className=\"rounded-xl bg-zinc-50\"/>}\n            imageOrientation={HorizontalOrientation.Right}\n            title=\"Build\"\n            text=\"Third, let's build the solution.\"\n            subtext=\"Discovery and exploration remain ongoing. There will always be more questions to ask and answer throughout the process, always more side trails to explore.\"\n          />\n        </ListCard>\n      </Section>\n      <Section\n        title=\"Expertise\" \n        description=\"Some of the things I can do.\"\n        className=\"bg-gray-200\"\n      >\n        <div className=\"grid grid-cols-2 gap-x-6 gap-y-8\">\n          <ExpertiseTile title=\"System Anaylsis\" iconType={AnalysisIcon} iconOrientation={HorizontalOrientation.Left}>\n            Develop an understanding of the breadth and depth of your system, and the relationships and interactions between the various parts.\n          </ExpertiseTile>\n          <ExpertiseTile title=\"System Architecture\" iconType={ArchitectureIcon} iconOrientation={HorizontalOrientation.Right}>\n            Design solutions that incorporate and consider all aspects of a system.\n          </ExpertiseTile>\n          <ExpertiseTile title=\"Software Prototyping\" iconType={PrototypeIcon} iconOrientation={HorizontalOrientation.Left}>\n            Exploratory software development to better understand the solution you want, and need.\n          </ExpertiseTile>\n          <ExpertiseTile title=\"Software Design and Development\" iconType={DevelopmentIcon} iconOrientation={HorizontalOrientation.Right}>\n            Implement well-designed code and abstractions to enable future growth while reducing maintenance and development overhead.\n          </ExpertiseTile>\n          <ExpertiseTile title=\"Cloud Integration\" iconType={CloudIcon} iconOrientation={HorizontalOrientation.Left}>\n            Introduce new cloud services into existing systems or processes, or migrate existing non-cloud systems to the cloud.\n          </ExpertiseTile>\n          <ExpertiseTile title=\"Rucksack\" iconType={RucksackIcon} iconOrientation={HorizontalOrientation.Right}>\n            Java, JavaScript/TypeScript, React, MySQL/SQL, AWS, and more…\n          </ExpertiseTile>\n        </div>\n      </Section>\n      <Section\n        title=\"What Clients Think\"\n        description=\"And colleagues, too!\"\n        >\n        <Carousel>\n          {data.allFile.nodes.map(({childMdx}: any) => {\n            return (\n              <Carousel.Item key={childMdx.frontmatter.id}>\n                <Testimonial\n                image={<StaticImage src=\"https://placehold.co/128.png\" alt=\"\" height={128} layout=\"fixed\"/>}\n                contact={childMdx.frontmatter.contact}\n                company={childMdx.frontmatter.company}\n                >\n                  <MdxRenderer>\n                    {childMdx.body}\n                  </MdxRenderer>\n                </Testimonial>\n              </Carousel.Item>\n            )\n          })}\n        </Carousel>\n      </Section>\n      <Section\n        title=\"Let's Chat\"\n        description=\"Need help with a project? Send me some details.\"\n        className=\"bg-gray-200\"\n      >\n        <div className=\"space-y-4\">\n          <form className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <input type=\"text\" placeholder=\"Name\" name=\"contactName\" className=\"w-full p-2 rounded-md\"/>\n            </div>\n            <div>\n              <input type=\"text\" placeholder=\"Company\" name=\"contactCompany\" className=\"w-full p-2 rounded-md\"/>\n            </div>\n            <div>\n              <input type=\"text\" placeholder=\"Email\" name=\"contactEmail\" className=\"w-full p-2 rounded-md\"/>\n            </div>\n            <div>\n              <select className=\"w-full p-2 rounded-md bg-white text-gray-400\">\n                <option disabled selected hidden>Budget</option>\n                <option>$25,000-$50,000</option>\n                <option>$50,000-$100,000</option>\n                <option>$100,000+</option>\n              </select>\n            </div>\n            <div className=\"flex-1 col-span-2\">\n              <textarea placeholder=\"What's your project about?\" rows={10} className=\"w-full p-2 rounded-md\"/>\n            </div>\n          </form>\n          <div className=\"text-center\">\n            <Button label=\"Submit\"/>\n          </div>\n        </div>\n      </Section>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n\nexport const Head: HeadFC = () => <title>Home - Side Trails Software Development</title>\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","'use strict';\nmodule.exports = require('./markdown-extensions.json');\n","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\nmodule.exports.default = StyleToObject; // ESM support\n"],"names":["XHTMLEntities","hexNumber","decimalNumber","acornJsxMap","WeakMap","getJsxTokens","acorn","Parser","acornJsx","get","tt","tokTypes","TokContext","TokenType","tc_oTag","tc_cTag","tc_expr","tokContexts","jsxName","jsxText","beforeExpr","jsxTagStart","startsExpr","jsxTagEnd","updateContext","this","context","push","exprAllowed","prevType","out","pop","slash","curContext","set","getQualifiedJSXName","object","type","name","namespace","property","module","exports","options","tok","isNewLine","isIdentifierStart","isIdentifierChar","jsx_readToken","chunkStart","pos","input","length","raise","start","ch","charCodeAt","finishToken","getTokenFromCode","slice","jsx_readEntity","jsx_readNewLine","normalizeCRLF","String","fromCharCode","locations","curLine","lineStart","jsx_readString","quote","string","entity","str","count","startPos","substr","test","parseInt","jsx_readWord","jsx_parseIdentifier","node","startNode","value","keyword","unexpected","next","finishNode","jsx_parseNamespacedName","startLoc","allowNamespaces","eat","colon","startNodeAt","jsx_parseElementName","dot","allowNamespacedObjects","newNode","jsx_parseAttributeValue","braceL","jsx_parseExpressionContainer","expression","parseExprAtom","jsx_parseEmptyExpression","lastTokEnd","lastTokEndLoc","finishNodeAt","braceR","parseExpression","expect","jsx_parseAttribute","ellipsis","argument","parseMaybeAssign","eq","jsx_parseOpeningElementAt","attributes","nodeName","selfClosing","jsx_parseClosingElementAt","jsx_parseElementAt","children","openingElement","closingElement","contents","fragmentOrElement","relational","jsx_parseText","parseLiteral","jsx_parseElement","refShortHandDefaultPos","super","readToken","code","b_expr","b_tmpl","plugin","Object","defineProperty","configurable","enumerable","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","tilde","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","hasOwn","prototype","hasOwnProperty","toStr","toString","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","newValue","writable","getProperty","extend","src","copyIsArray","clone","arguments","i","deep","_ref","React","className","title","subtitle","description","contact","company","LeftQuote","size","RightQuote","Carousel","_ref2","currentIndex","setCurrentIndex","Card","onClick","LeftArrow","style","transform","map","child","index","_","disabled","RightArrow","Item","HorizontalOrientation","ListCard","imageOrientation","Left","Right","label","bail","error","getPrototypeOf","Symbol","toStringTag","iterator","trough","fns","pipeline","run","values","middlewareIndex","callback","TypeError","output","fn","undefined","middleware","called","wrapped","parameters","fnExpectsCallback","result","done","apply","Promise","then","Error","wrap","use","middelware","stringifyPosition","position","point","line","column","end","VFileMessage","reason","place","origin","parts","indexOf","message","stack","fatal","source","ruleId","file","actual","expected","url","note","path","basename","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","join","segments","joined","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","lastIndexOf","normalizeString","normalize","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","href","urlToPath","URL","protocol","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","VFile","buffer","data","messages","history","stored","includes","assertNonEmpty","assertPart","stem","encoding","info","fail","unified","base","transformers","attachers","frozen","freezeIndex","processor","assertUnfrozen","own","Compiler","freeze","attacher","transformer","Number","POSITIVE_INFINITY","settings","addPlugin","addList","addPreset","assign","add","plugins","entry","parse","doc","vfile","assertParser","newable","assertCompiler","assertNode","compile","executor","resolve","reject","tree","runSync","complete","assertDone","process","processSync","destination","keys","asyncName","Boolean","looksLikeAVFile","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","CONTINUE","EXIT","SKIP","toResult","nodelike","eventsToAcorn","events","prefix","suffix","acornOptions","comments","tokens","onComment","onToken","estree","exception","swallow","acornConfig","preserveParens","collection","names","stops","event","chunks","sliceStream","shift","serializeChunks","collect","isEmptyExpression","allowEmpty","parseOffsetToUnistPoint","parseExpressionAt","error_","replace","offset","loc","raisedAt","body","sourceType","visitor","enter","leave","build","parents","visit","displayName","cKey","grandparents","concat","nodes","cIndex","subvalue","subresult","esnode","field","fixPosition","comment","token","nodeOrToken","pointStart","pointEnd","range","acornOffset","sourceOffset","relative","stopRelative","stopAbsolute","rest","relativeToPoint","atTab","chunk","positionFromEstree","nodeLike","startColumn","numberOrUndefined","endColumn","factoryMdxExpression","effects","ok","markerType","chunkType","addResult","spread","allowLazy","self","eventStart","lastCrash","consume","exit","now","before","eolAfter","mdxExpressionParse","inside","parser","lazy","head","properties","factorySpace","max","limit","mdxExpression","options_","ecmaVersion","flow","tokenize","nok","after","concrete","text","cont","character","factoryTag","tagType","tagMarkerType","tagClosingMarkerType","tagSelfClosingMarker","tagNameType","tagNamePrimaryType","tagNameMemberMarkerType","tagNameMemberType","tagNamePrefixMarkerType","tagNameLocalType","tagExpressionAttributeType","tagExpressionAttributeMarkerType","tagExpressionAttributeValueType","tagAttributeType","tagAttributeNameType","tagAttributeNamePrimaryType","tagAttributeNamePrefixMarkerType","tagAttributeNameLocalType","tagAttributeInitializerMarkerType","tagAttributeValueLiteralType","tagAttributeValueLiteralMarkerType","tagAttributeValueLiteralValueType","tagAttributeValueExpressionType","tagAttributeValueExpressionMarkerType","tagAttributeValueExpressionValueType","returnState","marker","startAfter","nameBefore","esWhitespaceStart","closingTagNameBefore","tagEnd","primaryName","crash","primaryNameAfter","memberNameBefore","localNameBefore","attributeBefore","memberName","memberNameAfter","localName","localNameAfter","attributeExpressionAfter","attributePrimaryName","attributePrimaryNameAfter","attributeLocalNameBefore","attributeValueBefore","attributeLocalName","attributeLocalNameAfter","attributeValueQuotedStart","attributeValueExpressionAfter","fromCodePoint","attributeValueQuoted","esWhitespaceEolAfter","esWhitespaceInside","at","toUpperCase","padStart","serializeCharCode","jsxFlow","mdxJsx","mdxMd","disable","null","blankLine","partial","blankLineBefore","attempt","allowedAcornTypes","Set","mdxjsEsm","exportImportConstruct","definedModuleSpecifiers","interrupt","word","atEnd","check","continuationStart","has","specifiers","specifier","local","splice","list","remove","items","from","unshift","combineExtensions","extensions","all","syntaxExtension","extension","hook","left","right","constructs","existing","mdxExpressionFromMarkdown","mdxFlowExpression","mdxTextExpression","exitMdxExpression","mdxFlowExpressionChunk","exitMdxExpressionData","mdxTextExpressionChunk","mdxExpressionToMarkdown","handlers","handleMdxExpression","unsafe","inConstruct","atBreak","resume","config","ccount","characterEntitiesLegacy","characterReferenceInvalid","isDecimal","isHexadecimal","isAlphanumerical","isAlphabetical","document","createElement","decodeNamedCharacterReference","characterReference","innerHTML","char","textContent","prohibited","disallowed","subset","groups","RegExp","charactersToExpression","basic","escapeOnly","pair","format","formatBasic","stringifyEntitiesLight","eol","indentLines","match","exec","one","track","lineShift","move","split","tail","current","indent","mdxJsxFromMarkdown","canContainEols","mdxJsxFlowTag","enterMdxJsxTag","mdxJsxFlowTagClosingMarker","enterMdxJsxTagClosingMarker","mdxJsxFlowTagAttribute","enterMdxJsxTagAttribute","mdxJsxFlowTagExpressionAttribute","enterMdxJsxTagExpressionAttribute","mdxJsxFlowTagAttributeValueLiteral","mdxJsxFlowTagAttributeValueExpression","mdxJsxFlowTagSelfClosingMarker","enterMdxJsxTagSelfClosingMarker","mdxJsxTextTag","mdxJsxTextTagClosingMarker","mdxJsxTextTagAttribute","mdxJsxTextTagExpressionAttribute","mdxJsxTextTagAttributeValueLiteral","mdxJsxTextTagAttributeValueExpression","mdxJsxTextTagSelfClosingMarker","exitMdxJsxTagClosingMarker","mdxJsxFlowTagNamePrimary","exitMdxJsxTagNamePrimary","mdxJsxFlowTagNameMember","exitMdxJsxTagNameMember","mdxJsxFlowTagNameLocal","exitMdxJsxTagNameLocal","exitMdxJsxTagExpressionAttribute","mdxJsxFlowTagExpressionAttributeValue","mdxJsxFlowTagAttributeNamePrimary","exitMdxJsxTagAttributeNamePrimary","mdxJsxFlowTagAttributeNameLocal","exitMdxJsxTagAttributeNameLocal","exitMdxJsxTagAttributeValueLiteral","mdxJsxFlowTagAttributeValueLiteralValue","exitMdxJsxTagAttributeValueExpression","mdxJsxFlowTagAttributeValueExpressionValue","exitMdxJsxTagSelfClosingMarker","exitMdxJsxTag","mdxJsxTextTagNamePrimary","mdxJsxTextTagNameMember","mdxJsxTextTagNameLocal","mdxJsxTextTagExpressionAttributeValue","mdxJsxTextTagAttributeNamePrimary","mdxJsxTextTagAttributeNameLocal","mdxJsxTextTagAttributeValueLiteralValue","mdxJsxTextTagAttributeValueExpressionValue","tag","close","getData","setData","enterMdxJsxTagAnyAttribute","sliceSerialize","additional","lines","queue","previous","following","isNaN","begin","characterReferenceCharacters","characters","terminated","namedReference","diff","reference","nonTerminated","warning","attribute","referenceCode","flush","referenceContext","warningContext","textContext","parseEntities","serializeAbbreviatedTag","onErrorRightIsTag","onErrorLeftIsTag","closing","open","a","b","mdxJsxToMarkdown","quoteSmart","tightSelfClosing","printWidth","alternative","mdxElement","peek","peekElement","mdxJsxFlowElement","mdxJsxTextElement","fences","resourceLink","safeOptions","currentIndent","createIndent","inferDepth","trackerOneLine","trackerMultiLine","serializedAttributes","appliedQuote","attributesOnTheirOwnLine","attributesOnOneLine","tracker","parent","state","indexStack","results","createTracker","handle","charAt","containerPhrasing","childInfo","serializedChild","blank","bulletLastUsed","containerFlow","depth","x","repeat","mdxjsEsmFromMarkdown","mdxjsEsmData","mdxjsEsmToMarkdown","remarkMdx","mdxjs","mdxToMarkdown","emptyOptions","includeImageAlt","includeHtml","alt","content","contentStart","contentInitial","contentType","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","flowStart","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","containerContinue","_tokenizer","flowContinue","writeToChild","eof","stream","defineSkip","write","seen","subtokenize","jumps","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","_container","eventIndex","startPosition","startPositions","tokenizer","childEvents","gaps","adjust","breaks","_gfmTasklistFirstContentOfListItem","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","initializeFactory","notText","resolveAllLineSuffixes","extraResolver","tabs","bufferIndex","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","onsuccessfulcheck","expandTabs","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","sliceChunks","chunkIndex","go","restore","onreturn","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","create","resolveTo","thematicBreak","sequence","initialSize","kind","atMarker","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","labelInside","labelEscape","factoryTitle","escape","factoryWhitespace","normalizeIdentifier","toLowerCase","definition","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","media","group","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","declaration","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","search","decodeNumericCharacterReference","characterEscapeOrReference","decode","$0","$1","$2","hex","fromMarkdown","transforms","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","tokenStack","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","errorHandler","onExitError","referenceType","ancestor","decodeString","fragment","ordered","checked","compiler","postprocess","atCarriageReturn","endPosition","lastIndex","Math","ceil","preprocess","d","combined","remarkParse","normalizeUri","skip","encodeURIComponent","convert","castFactory","typeFactory","tests","checks","any","anyFactory","propsFactory","visitParents","reverse","is","step","factory","clean","footnoteReference","id","safeId","footnoteOrder","counter","footnoteCounts","reuseCounter","clobberPrefix","dataFootnoteRef","ariaDescribedBy","patch","applyData","revert","subtype","listItemLoose","tab","space","trimLines","last","trimLine","codePointAt","blockquote","break","delete","footnote","footnoteById","no","dangerous","imageReference","inlineCode","linkReference","loose","listLoose","root","table","rows","firstRow","tableContent","tableCell","tableRow","siblings","align","cellIndex","cells","cell","alignValue","toml","ignore","yaml","footnoteDefinition","createState","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","unknownHandler","passThrough","cache","definitions","augment","hName","hProperties","hChildren","ctx","generated","props","to","defaultUnknownHandler","toHast","foot","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","footer","bridge","mutate","WalkerBase","should_skip","should_remove","replacement","SyncWalker","_should_skip","_should_remove","_replacement","skipped","removed","isNode","walk","ast","toProperty","toIdentifier","method","shorthand","computed","optional","toMemberExpression","identifiers","specifiersToDeclarations","init","declarations","otherSpecifiers","importNamespaceSpecifier","declarator","imported","exported","toIdOrMemberExpression","toIdOrMemberExpressionFactory","toJsxIdOrMemberExpression","jsxCont","idType","memberType","isIdentifier","ids","valid","recmaJsxBuild","development","outputFormat","automatic","runtime","annotations","imports","jsxRuntime","jsx","jsxFrag","jsxImportSource","jsxs","jsxDEV","importSource","objects","callee","pragmaFrag","elements","isStaticChildren","filePath","pragma","buildJsx","is_reference","analyze","globals","Map","scope","Scope","references","current_scope","forEach","params","param","extract_names","add_declaration","add_reference","find_owner","block","initialised_declarations","handle_declarator","extract_identifiers","handle_prop","handle_element","element","declarationToExpression","isDeclaration","recmaDocument","baseUrl","useDynamicImport","pragmaImportSource","exportedIdentifiers","pragmas","layout","exportAllCount","handleEsm","filter","importSpecifier","handleExport","createMdxContent","literal","declarators","hasInternalLayout","consequent","alternate","toBinaryAddition","expressions","operator","recmaJsxRewrite","providerImportSource","scopeInfo","fnStack","currentScope","importProvider","createErrorHelper","newScope","components","tags","idToInvalidComponentName","isNamedFunction","inScope","fnScope","fullId","isInScope","parentScope","component","_mdxExplicitJsx","jsxIdExpression","invalidComponentName","defaults","statements","componentsPattern","componentsInit","componentName","sort","createImportProvider","generator","async","endsWith","OPERATOR_PRECEDENCE","in","instanceof","NEEDS_PARENTHESES","EXPRESSIONS_PRECEDENCE","ArrayExpression","TaggedTemplateExpression","ThisExpression","Identifier","PrivateIdentifier","Literal","TemplateLiteral","Super","SequenceExpression","MemberExpression","ChainExpression","CallExpression","NewExpression","ArrowFunctionExpression","ClassExpression","FunctionExpression","ObjectExpression","UpdateExpression","UnaryExpression","AwaitExpression","BinaryExpression","LogicalExpression","ConditionalExpression","AssignmentExpression","YieldExpression","RestElement","formatSequence","expressionNeedsParenthesis","parentNode","isRightHand","nodePrecedence","expressionsPrecedence","parentNodePrecedence","formatExpression","reindent","lineEnd","trim","formatComments","formatVariableDeclaration","VariableDeclarator","ForInStatement","FunctionDeclaration","BlockStatement","GENERATOR","Program","indentLevel","writeComments","statement","trailingComments","statementIndent","ClassBody","StaticBlock","EmptyStatement","ExpressionStatement","precedence","IfStatement","LabeledStatement","BreakStatement","ContinueStatement","WithStatement","SwitchStatement","caseIndent","discriminant","cases","occurences","occurencesCount","occurence","consequentCount","ReturnStatement","ThrowStatement","TryStatement","finalizer","WhileStatement","DoWhileStatement","ForStatement","update","await","ForOfStatement","DebuggerStatement","VariableDeclaration","ClassDeclaration","superClass","ImportDeclaration","ImportExpression","ExportDefaultDeclaration","ExportNamedDeclaration","ExportAllDeclaration","MethodDefinition","static","SpreadElement","delegate","quasis","quasi","TemplateElement","ArrayPattern","propertyIndent","comma","Property","PropertyDefinition","ObjectPattern","needsParentheses","AssignmentPattern","isIn","currentNode","hasCallExpression","MetaProperty","RegExpLiteral","bigint","pattern","flags","EMPTY_OBJECT","State","setup","writeToStream","startingIndentLevel","sourceMap","writeAndMap","writeToStreamAndMap","lineEndSize","mapping","original","_file","addMapping","toJs","SourceMapGenerator","toJSON","JSXAttribute","encodeJsx","JSXClosingElement","JSXClosingFragment","JSXElement","JSXEmptyExpression","JSXExpressionContainer","JSXFragment","openingFragment","closingFragment","JSXIdentifier","JSXMemberExpression","JSXNamespacedName","JSXOpeningElement","JSXOpeningFragment","JSXSpreadAttribute","JSXText","recmaStringify","Schema","normal","merge","Info","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","powers","increment","DefinedInfo","mask","mark","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","default","defer","dir","dirName","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inert","inputMode","integrity","isMap","itemId","itemProp","itemRef","itemScope","itemType","language","loading","loop","low","manifest","maxLength","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rowSpan","sandbox","scoped","seamless","selected","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","tabIndex","translate","typeMustMatch","useMap","width","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","charOff","classId","clear","codeBase","codeType","color","compact","declare","face","frame","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","profile","prompt","rev","rightMargin","rules","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filterRes","filterUnits","focusable","focusHighlight","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","orient","orientation","overflow","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","padRight","padLeft","dash","find","schema","Type","camelcase","dashes","kebab","hastToReact","dashSomething","parseStyle","toCamel","transformStyleToCssCasing","domCasing","cssCasing","toDash","jsxIdentifierName","attachComments","compare","leading","trailing","compareEnd","NaN","inherit","mdxJsxElement","parentSchema","attrs","attr","attributeValue","createJsxAttributeName","argumentValue","createJsxElementName","whitespace","thing","container","doctype","elementAttributeNameCase","styleObject","stylePropertyNameCase","cssProperties","cssProp","esm","cleanChildren","tableElements","invalid","unknown","zwitch","ignoreLineBreak","p","createJsxNameFromString","rehypeRecma","program","toEstree","rehypeRemoveRaw","remarkMarkAndUnravel","oneOrMore","newChildren","nodeTypes","removedOptions","md","vfileCompatible","mdExtensions","compileSync","compileOptions","recmaPlugins","rehypePlugins","remarkPlugins","remarkRehypeOptions","dev","extraNodeTypes","AsyncFunction","evaluateSync","evaluateOptions","compiletime","Fragment","useMDXComponents","Function","Content","ProcessTile","subtext","ExpertiseTile","iconType","Icon","iconOrientation","useStaticQuery","allFile","_ref3","childMdx","Testimonial","frontmatter","StaticImage","__imageData","MdxRenderer","Layout","hero","Button","Section","AnalysisIcon","ArchitectureIcon","PrototypeIcon","DevelopmentIcon","CloudIcon","RucksackIcon","_ref4","Head","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","lineno","updatePosition","Position","errorsList","msg","err","filename","silent","re","m","c","val","ret","decl","decls","isBuffer","StyleToObject","hasIterator","len"],"sourceRoot":""}